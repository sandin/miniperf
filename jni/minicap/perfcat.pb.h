// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perfcat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_perfcat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_perfcat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_perfcat_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[70]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_perfcat_2eproto;
namespace perfcat {
class AppClosedNTF;
class AppClosedNTFDefaultTypeInternal;
extern AppClosedNTFDefaultTypeInternal _AppClosedNTF_default_instance_;
class AppHelloReq;
class AppHelloReqDefaultTypeInternal;
extern AppHelloReqDefaultTypeInternal _AppHelloReq_default_instance_;
class AppHelloRsp;
class AppHelloRspDefaultTypeInternal;
extern AppHelloRspDefaultTypeInternal _AppHelloRsp_default_instance_;
class AppInfo;
class AppInfoDefaultTypeInternal;
extern AppInfoDefaultTypeInternal _AppInfo_default_instance_;
class CheckDeviceReq;
class CheckDeviceReqDefaultTypeInternal;
extern CheckDeviceReqDefaultTypeInternal _CheckDeviceReq_default_instance_;
class CheckDeviceRsp;
class CheckDeviceRspDefaultTypeInternal;
extern CheckDeviceRspDefaultTypeInternal _CheckDeviceRsp_default_instance_;
class CheckOverlayPermissionReq;
class CheckOverlayPermissionReqDefaultTypeInternal;
extern CheckOverlayPermissionReqDefaultTypeInternal _CheckOverlayPermissionReq_default_instance_;
class CheckOverlayPermissionRsp;
class CheckOverlayPermissionRspDefaultTypeInternal;
extern CheckOverlayPermissionRspDefaultTypeInternal _CheckOverlayPermissionRsp_default_instance_;
class CoreUsage;
class CoreUsageDefaultTypeInternal;
extern CoreUsageDefaultTypeInternal _CoreUsage_default_instance_;
class CpuFreq;
class CpuFreqDefaultTypeInternal;
extern CpuFreqDefaultTypeInternal _CpuFreq_default_instance_;
class CpuUsage;
class CpuUsageDefaultTypeInternal;
extern CpuUsageDefaultTypeInternal _CpuUsage_default_instance_;
class EmptyRsp;
class EmptyRspDefaultTypeInternal;
extern EmptyRspDefaultTypeInternal _EmptyRsp_default_instance_;
class EnableFloatingWindowReq;
class EnableFloatingWindowReqDefaultTypeInternal;
extern EnableFloatingWindowReqDefaultTypeInternal _EnableFloatingWindowReq_default_instance_;
class ExecuteShellCommandReq;
class ExecuteShellCommandReqDefaultTypeInternal;
extern ExecuteShellCommandReqDefaultTypeInternal _ExecuteShellCommandReq_default_instance_;
class ExecuteShellCommandRsp;
class ExecuteShellCommandRspDefaultTypeInternal;
extern ExecuteShellCommandRspDefaultTypeInternal _ExecuteShellCommandRsp_default_instance_;
class FPS;
class FPSDefaultTypeInternal;
extern FPSDefaultTypeInternal _FPS_default_instance_;
class FrameTime;
class FrameTimeDefaultTypeInternal;
extern FrameTimeDefaultTypeInternal _FrameTime_default_instance_;
class GetAppInfoReq;
class GetAppInfoReqDefaultTypeInternal;
extern GetAppInfoReqDefaultTypeInternal _GetAppInfoReq_default_instance_;
class GetAppInfoRsp;
class GetAppInfoRspDefaultTypeInternal;
extern GetAppInfoRspDefaultTypeInternal _GetAppInfoRsp_default_instance_;
class GetBatteryInfoReq;
class GetBatteryInfoReqDefaultTypeInternal;
extern GetBatteryInfoReqDefaultTypeInternal _GetBatteryInfoReq_default_instance_;
class GetBatteryInfoRsp;
class GetBatteryInfoRspDefaultTypeInternal;
extern GetBatteryInfoRspDefaultTypeInternal _GetBatteryInfoRsp_default_instance_;
class GetCpuMaxFreqReq;
class GetCpuMaxFreqReqDefaultTypeInternal;
extern GetCpuMaxFreqReqDefaultTypeInternal _GetCpuMaxFreqReq_default_instance_;
class GetCpuMaxFreqRsp;
class GetCpuMaxFreqRspDefaultTypeInternal;
extern GetCpuMaxFreqRspDefaultTypeInternal _GetCpuMaxFreqRsp_default_instance_;
class GetDataFromAppReq;
class GetDataFromAppReqDefaultTypeInternal;
extern GetDataFromAppReqDefaultTypeInternal _GetDataFromAppReq_default_instance_;
class GetDataFromAppRsp;
class GetDataFromAppRspDefaultTypeInternal;
extern GetDataFromAppRspDefaultTypeInternal _GetDataFromAppRsp_default_instance_;
class GetLMKThresholdReq;
class GetLMKThresholdReqDefaultTypeInternal;
extern GetLMKThresholdReqDefaultTypeInternal _GetLMKThresholdReq_default_instance_;
class GetLMKThresholdRsp;
class GetLMKThresholdRspDefaultTypeInternal;
extern GetLMKThresholdRspDefaultTypeInternal _GetLMKThresholdRsp_default_instance_;
class GetMemoryUsageReq;
class GetMemoryUsageReqDefaultTypeInternal;
extern GetMemoryUsageReqDefaultTypeInternal _GetMemoryUsageReq_default_instance_;
class GetMemoryUsageRsp;
class GetMemoryUsageRspDefaultTypeInternal;
extern GetMemoryUsageRspDefaultTypeInternal _GetMemoryUsageRsp_default_instance_;
class GetScreenInfoReq;
class GetScreenInfoReqDefaultTypeInternal;
extern GetScreenInfoReqDefaultTypeInternal _GetScreenInfoReq_default_instance_;
class GetScreenInfoRsp;
class GetScreenInfoRspDefaultTypeInternal;
extern GetScreenInfoRspDefaultTypeInternal _GetScreenInfoRsp_default_instance_;
class GpuFreq;
class GpuFreqDefaultTypeInternal;
extern GpuFreqDefaultTypeInternal _GpuFreq_default_instance_;
class GpuUsage;
class GpuUsageDefaultTypeInternal;
extern GpuUsageDefaultTypeInternal _GpuUsage_default_instance_;
class HelloReq;
class HelloReqDefaultTypeInternal;
extern HelloReqDefaultTypeInternal _HelloReq_default_instance_;
class Memory;
class MemoryDefaultTypeInternal;
extern MemoryDefaultTypeInternal _Memory_default_instance_;
class MemoryDetail;
class MemoryDetailDefaultTypeInternal;
extern MemoryDetailDefaultTypeInternal _MemoryDetail_default_instance_;
class Network;
class NetworkDefaultTypeInternal;
extern NetworkDefaultTypeInternal _Network_default_instance_;
class PerfcatAppProtocol;
class PerfcatAppProtocolDefaultTypeInternal;
extern PerfcatAppProtocolDefaultTypeInternal _PerfcatAppProtocol_default_instance_;
class PerfcatServerProtocol;
class PerfcatServerProtocolDefaultTypeInternal;
extern PerfcatServerProtocolDefaultTypeInternal _PerfcatServerProtocol_default_instance_;
class Power;
class PowerDefaultTypeInternal;
extern PowerDefaultTypeInternal _Power_default_instance_;
class PrepareWifiProfileNTF;
class PrepareWifiProfileNTFDefaultTypeInternal;
extern PrepareWifiProfileNTFDefaultTypeInternal _PrepareWifiProfileNTF_default_instance_;
class ProcessFoundNTF;
class ProcessFoundNTFDefaultTypeInternal;
extern ProcessFoundNTFDefaultTypeInternal _ProcessFoundNTF_default_instance_;
class ProcessNotFoundNTF;
class ProcessNotFoundNTFDefaultTypeInternal;
extern ProcessNotFoundNTFDefaultTypeInternal _ProcessNotFoundNTF_default_instance_;
class ProfileApp;
class ProfileAppDefaultTypeInternal;
extern ProfileAppDefaultTypeInternal _ProfileApp_default_instance_;
class ProfileAppInfo;
class ProfileAppInfoDefaultTypeInternal;
extern ProfileAppInfoDefaultTypeInternal _ProfileAppInfo_default_instance_;
class ProfileAppPidName;
class ProfileAppPidNameDefaultTypeInternal;
extern ProfileAppPidNameDefaultTypeInternal _ProfileAppPidName_default_instance_;
class ProfileIOSNtf;
class ProfileIOSNtfDefaultTypeInternal;
extern ProfileIOSNtfDefaultTypeInternal _ProfileIOSNtf_default_instance_;
class ProfileNTFACK;
class ProfileNTFACKDefaultTypeInternal;
extern ProfileNTFACKDefaultTypeInternal _ProfileNTFACK_default_instance_;
class ProfileNtf;
class ProfileNtfDefaultTypeInternal;
extern ProfileNtfDefaultTypeInternal _ProfileNtf_default_instance_;
class ProfileReq;
class ProfileReqDefaultTypeInternal;
extern ProfileReqDefaultTypeInternal _ProfileReq_default_instance_;
class ProfileRsp;
class ProfileRspDefaultTypeInternal;
extern ProfileRspDefaultTypeInternal _ProfileRsp_default_instance_;
class ProfileStartedNTF;
class ProfileStartedNTFDefaultTypeInternal;
extern ProfileStartedNTFDefaultTypeInternal _ProfileStartedNTF_default_instance_;
class ProfileStoppedNTF;
class ProfileStoppedNTFDefaultTypeInternal;
extern ProfileStoppedNTFDefaultTypeInternal _ProfileStoppedNTF_default_instance_;
class RegisterAppReq;
class RegisterAppReqDefaultTypeInternal;
extern RegisterAppReqDefaultTypeInternal _RegisterAppReq_default_instance_;
class ResumeProfileReq;
class ResumeProfileReqDefaultTypeInternal;
extern ResumeProfileReqDefaultTypeInternal _ResumeProfileReq_default_instance_;
class ResumeProfileRsp;
class ResumeProfileRspDefaultTypeInternal;
extern ResumeProfileRspDefaultTypeInternal _ResumeProfileRsp_default_instance_;
class Screenshot;
class ScreenshotDefaultTypeInternal;
extern ScreenshotDefaultTypeInternal _Screenshot_default_instance_;
class SetScreenshotIntervalReq;
class SetScreenshotIntervalReqDefaultTypeInternal;
extern SetScreenshotIntervalReqDefaultTypeInternal _SetScreenshotIntervalReq_default_instance_;
class StopProfileReq;
class StopProfileReqDefaultTypeInternal;
extern StopProfileReqDefaultTypeInternal _StopProfileReq_default_instance_;
class StopProfileRsp;
class StopProfileRspDefaultTypeInternal;
extern StopProfileRspDefaultTypeInternal _StopProfileRsp_default_instance_;
class Temp;
class TempDefaultTypeInternal;
extern TempDefaultTypeInternal _Temp_default_instance_;
class ToggleInterestingFiledNTF;
class ToggleInterestingFiledNTFDefaultTypeInternal;
extern ToggleInterestingFiledNTFDefaultTypeInternal _ToggleInterestingFiledNTF_default_instance_;
class VirtualMemory;
class VirtualMemoryDefaultTypeInternal;
extern VirtualMemoryDefaultTypeInternal _VirtualMemory_default_instance_;
class iOSContextSwitch;
class iOSContextSwitchDefaultTypeInternal;
extern iOSContextSwitchDefaultTypeInternal _iOSContextSwitch_default_instance_;
class iOSEnergyUsage;
class iOSEnergyUsageDefaultTypeInternal;
extern iOSEnergyUsageDefaultTypeInternal _iOSEnergyUsage_default_instance_;
class iOSFrameRecord;
class iOSFrameRecordDefaultTypeInternal;
extern iOSFrameRecordDefaultTypeInternal _iOSFrameRecord_default_instance_;
class iOSFrameTime;
class iOSFrameTimeDefaultTypeInternal;
extern iOSFrameTimeDefaultTypeInternal _iOSFrameTime_default_instance_;
class iOSGpuUsage;
class iOSGpuUsageDefaultTypeInternal;
extern iOSGpuUsageDefaultTypeInternal _iOSGpuUsage_default_instance_;
class iOSMemory;
class iOSMemoryDefaultTypeInternal;
extern iOSMemoryDefaultTypeInternal _iOSMemory_default_instance_;
class iOSWakeups;
class iOSWakeupsDefaultTypeInternal;
extern iOSWakeupsDefaultTypeInternal _iOSWakeups_default_instance_;
}  // namespace perfcat
PROTOBUF_NAMESPACE_OPEN
template<> ::perfcat::AppClosedNTF* Arena::CreateMaybeMessage<::perfcat::AppClosedNTF>(Arena*);
template<> ::perfcat::AppHelloReq* Arena::CreateMaybeMessage<::perfcat::AppHelloReq>(Arena*);
template<> ::perfcat::AppHelloRsp* Arena::CreateMaybeMessage<::perfcat::AppHelloRsp>(Arena*);
template<> ::perfcat::AppInfo* Arena::CreateMaybeMessage<::perfcat::AppInfo>(Arena*);
template<> ::perfcat::CheckDeviceReq* Arena::CreateMaybeMessage<::perfcat::CheckDeviceReq>(Arena*);
template<> ::perfcat::CheckDeviceRsp* Arena::CreateMaybeMessage<::perfcat::CheckDeviceRsp>(Arena*);
template<> ::perfcat::CheckOverlayPermissionReq* Arena::CreateMaybeMessage<::perfcat::CheckOverlayPermissionReq>(Arena*);
template<> ::perfcat::CheckOverlayPermissionRsp* Arena::CreateMaybeMessage<::perfcat::CheckOverlayPermissionRsp>(Arena*);
template<> ::perfcat::CoreUsage* Arena::CreateMaybeMessage<::perfcat::CoreUsage>(Arena*);
template<> ::perfcat::CpuFreq* Arena::CreateMaybeMessage<::perfcat::CpuFreq>(Arena*);
template<> ::perfcat::CpuUsage* Arena::CreateMaybeMessage<::perfcat::CpuUsage>(Arena*);
template<> ::perfcat::EmptyRsp* Arena::CreateMaybeMessage<::perfcat::EmptyRsp>(Arena*);
template<> ::perfcat::EnableFloatingWindowReq* Arena::CreateMaybeMessage<::perfcat::EnableFloatingWindowReq>(Arena*);
template<> ::perfcat::ExecuteShellCommandReq* Arena::CreateMaybeMessage<::perfcat::ExecuteShellCommandReq>(Arena*);
template<> ::perfcat::ExecuteShellCommandRsp* Arena::CreateMaybeMessage<::perfcat::ExecuteShellCommandRsp>(Arena*);
template<> ::perfcat::FPS* Arena::CreateMaybeMessage<::perfcat::FPS>(Arena*);
template<> ::perfcat::FrameTime* Arena::CreateMaybeMessage<::perfcat::FrameTime>(Arena*);
template<> ::perfcat::GetAppInfoReq* Arena::CreateMaybeMessage<::perfcat::GetAppInfoReq>(Arena*);
template<> ::perfcat::GetAppInfoRsp* Arena::CreateMaybeMessage<::perfcat::GetAppInfoRsp>(Arena*);
template<> ::perfcat::GetBatteryInfoReq* Arena::CreateMaybeMessage<::perfcat::GetBatteryInfoReq>(Arena*);
template<> ::perfcat::GetBatteryInfoRsp* Arena::CreateMaybeMessage<::perfcat::GetBatteryInfoRsp>(Arena*);
template<> ::perfcat::GetCpuMaxFreqReq* Arena::CreateMaybeMessage<::perfcat::GetCpuMaxFreqReq>(Arena*);
template<> ::perfcat::GetCpuMaxFreqRsp* Arena::CreateMaybeMessage<::perfcat::GetCpuMaxFreqRsp>(Arena*);
template<> ::perfcat::GetDataFromAppReq* Arena::CreateMaybeMessage<::perfcat::GetDataFromAppReq>(Arena*);
template<> ::perfcat::GetDataFromAppRsp* Arena::CreateMaybeMessage<::perfcat::GetDataFromAppRsp>(Arena*);
template<> ::perfcat::GetLMKThresholdReq* Arena::CreateMaybeMessage<::perfcat::GetLMKThresholdReq>(Arena*);
template<> ::perfcat::GetLMKThresholdRsp* Arena::CreateMaybeMessage<::perfcat::GetLMKThresholdRsp>(Arena*);
template<> ::perfcat::GetMemoryUsageReq* Arena::CreateMaybeMessage<::perfcat::GetMemoryUsageReq>(Arena*);
template<> ::perfcat::GetMemoryUsageRsp* Arena::CreateMaybeMessage<::perfcat::GetMemoryUsageRsp>(Arena*);
template<> ::perfcat::GetScreenInfoReq* Arena::CreateMaybeMessage<::perfcat::GetScreenInfoReq>(Arena*);
template<> ::perfcat::GetScreenInfoRsp* Arena::CreateMaybeMessage<::perfcat::GetScreenInfoRsp>(Arena*);
template<> ::perfcat::GpuFreq* Arena::CreateMaybeMessage<::perfcat::GpuFreq>(Arena*);
template<> ::perfcat::GpuUsage* Arena::CreateMaybeMessage<::perfcat::GpuUsage>(Arena*);
template<> ::perfcat::HelloReq* Arena::CreateMaybeMessage<::perfcat::HelloReq>(Arena*);
template<> ::perfcat::Memory* Arena::CreateMaybeMessage<::perfcat::Memory>(Arena*);
template<> ::perfcat::MemoryDetail* Arena::CreateMaybeMessage<::perfcat::MemoryDetail>(Arena*);
template<> ::perfcat::Network* Arena::CreateMaybeMessage<::perfcat::Network>(Arena*);
template<> ::perfcat::PerfcatAppProtocol* Arena::CreateMaybeMessage<::perfcat::PerfcatAppProtocol>(Arena*);
template<> ::perfcat::PerfcatServerProtocol* Arena::CreateMaybeMessage<::perfcat::PerfcatServerProtocol>(Arena*);
template<> ::perfcat::Power* Arena::CreateMaybeMessage<::perfcat::Power>(Arena*);
template<> ::perfcat::PrepareWifiProfileNTF* Arena::CreateMaybeMessage<::perfcat::PrepareWifiProfileNTF>(Arena*);
template<> ::perfcat::ProcessFoundNTF* Arena::CreateMaybeMessage<::perfcat::ProcessFoundNTF>(Arena*);
template<> ::perfcat::ProcessNotFoundNTF* Arena::CreateMaybeMessage<::perfcat::ProcessNotFoundNTF>(Arena*);
template<> ::perfcat::ProfileApp* Arena::CreateMaybeMessage<::perfcat::ProfileApp>(Arena*);
template<> ::perfcat::ProfileAppInfo* Arena::CreateMaybeMessage<::perfcat::ProfileAppInfo>(Arena*);
template<> ::perfcat::ProfileAppPidName* Arena::CreateMaybeMessage<::perfcat::ProfileAppPidName>(Arena*);
template<> ::perfcat::ProfileIOSNtf* Arena::CreateMaybeMessage<::perfcat::ProfileIOSNtf>(Arena*);
template<> ::perfcat::ProfileNTFACK* Arena::CreateMaybeMessage<::perfcat::ProfileNTFACK>(Arena*);
template<> ::perfcat::ProfileNtf* Arena::CreateMaybeMessage<::perfcat::ProfileNtf>(Arena*);
template<> ::perfcat::ProfileReq* Arena::CreateMaybeMessage<::perfcat::ProfileReq>(Arena*);
template<> ::perfcat::ProfileRsp* Arena::CreateMaybeMessage<::perfcat::ProfileRsp>(Arena*);
template<> ::perfcat::ProfileStartedNTF* Arena::CreateMaybeMessage<::perfcat::ProfileStartedNTF>(Arena*);
template<> ::perfcat::ProfileStoppedNTF* Arena::CreateMaybeMessage<::perfcat::ProfileStoppedNTF>(Arena*);
template<> ::perfcat::RegisterAppReq* Arena::CreateMaybeMessage<::perfcat::RegisterAppReq>(Arena*);
template<> ::perfcat::ResumeProfileReq* Arena::CreateMaybeMessage<::perfcat::ResumeProfileReq>(Arena*);
template<> ::perfcat::ResumeProfileRsp* Arena::CreateMaybeMessage<::perfcat::ResumeProfileRsp>(Arena*);
template<> ::perfcat::Screenshot* Arena::CreateMaybeMessage<::perfcat::Screenshot>(Arena*);
template<> ::perfcat::SetScreenshotIntervalReq* Arena::CreateMaybeMessage<::perfcat::SetScreenshotIntervalReq>(Arena*);
template<> ::perfcat::StopProfileReq* Arena::CreateMaybeMessage<::perfcat::StopProfileReq>(Arena*);
template<> ::perfcat::StopProfileRsp* Arena::CreateMaybeMessage<::perfcat::StopProfileRsp>(Arena*);
template<> ::perfcat::Temp* Arena::CreateMaybeMessage<::perfcat::Temp>(Arena*);
template<> ::perfcat::ToggleInterestingFiledNTF* Arena::CreateMaybeMessage<::perfcat::ToggleInterestingFiledNTF>(Arena*);
template<> ::perfcat::VirtualMemory* Arena::CreateMaybeMessage<::perfcat::VirtualMemory>(Arena*);
template<> ::perfcat::iOSContextSwitch* Arena::CreateMaybeMessage<::perfcat::iOSContextSwitch>(Arena*);
template<> ::perfcat::iOSEnergyUsage* Arena::CreateMaybeMessage<::perfcat::iOSEnergyUsage>(Arena*);
template<> ::perfcat::iOSFrameRecord* Arena::CreateMaybeMessage<::perfcat::iOSFrameRecord>(Arena*);
template<> ::perfcat::iOSFrameTime* Arena::CreateMaybeMessage<::perfcat::iOSFrameTime>(Arena*);
template<> ::perfcat::iOSGpuUsage* Arena::CreateMaybeMessage<::perfcat::iOSGpuUsage>(Arena*);
template<> ::perfcat::iOSMemory* Arena::CreateMaybeMessage<::perfcat::iOSMemory>(Arena*);
template<> ::perfcat::iOSWakeups* Arena::CreateMaybeMessage<::perfcat::iOSWakeups>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfcat {

enum ProfileReq_DataType : int {
  ProfileReq_DataType_DATAID_NONE = 0,
  ProfileReq_DataType_CPU_USAGE = 1,
  ProfileReq_DataType_CORE_FREQUENCY = 2,
  ProfileReq_DataType_GPU_USAGE = 3,
  ProfileReq_DataType_GPU_FREQ = 4,
  ProfileReq_DataType_FPS = 5,
  ProfileReq_DataType_NETWORK_USAGE = 6,
  ProfileReq_DataType_SCREEN_SHOT = 8,
  ProfileReq_DataType_MEMORY = 9,
  ProfileReq_DataType_BATTERY = 10,
  ProfileReq_DataType_CPU_TEMPERATURE = 11,
  ProfileReq_DataType_FRAME_TIME = 12,
  ProfileReq_DataType_ANDROID_MEMORY_DETAIL = 13,
  ProfileReq_DataType_CORE_USAGE = 14,
  ProfileReq_DataType_CTX_SWITCH = 15,
  ProfileReq_DataType_WAKEUP = 16,
  ProfileReq_DataType_IOS_GPU_USAGE = 17,
  ProfileReq_DataType_IOS_ENERGY_USAGE = 18,
  ProfileReq_DataType_ProfileReq_DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ProfileReq_DataType_ProfileReq_DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ProfileReq_DataType_IsValid(int value);
constexpr ProfileReq_DataType ProfileReq_DataType_DataType_MIN = ProfileReq_DataType_DATAID_NONE;
constexpr ProfileReq_DataType ProfileReq_DataType_DataType_MAX = ProfileReq_DataType_IOS_ENERGY_USAGE;
constexpr int ProfileReq_DataType_DataType_ARRAYSIZE = ProfileReq_DataType_DataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProfileReq_DataType_descriptor();
template<typename T>
inline const std::string& ProfileReq_DataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProfileReq_DataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProfileReq_DataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProfileReq_DataType_descriptor(), enum_t_value);
}
inline bool ProfileReq_DataType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProfileReq_DataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProfileReq_DataType>(
    ProfileReq_DataType_descriptor(), name, value);
}
enum Screenshot_Orientation : int {
  Screenshot_Orientation_none = 0,
  Screenshot_Orientation_landscape_left = 1,
  Screenshot_Orientation_landscape_right = 2,
  Screenshot_Orientation_portrait = 3,
  Screenshot_Orientation_Screenshot_Orientation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Screenshot_Orientation_Screenshot_Orientation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Screenshot_Orientation_IsValid(int value);
constexpr Screenshot_Orientation Screenshot_Orientation_Orientation_MIN = Screenshot_Orientation_none;
constexpr Screenshot_Orientation Screenshot_Orientation_Orientation_MAX = Screenshot_Orientation_portrait;
constexpr int Screenshot_Orientation_Orientation_ARRAYSIZE = Screenshot_Orientation_Orientation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Screenshot_Orientation_descriptor();
template<typename T>
inline const std::string& Screenshot_Orientation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Screenshot_Orientation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Screenshot_Orientation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Screenshot_Orientation_descriptor(), enum_t_value);
}
inline bool Screenshot_Orientation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Screenshot_Orientation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Screenshot_Orientation>(
    Screenshot_Orientation_descriptor(), name, value);
}
// ===================================================================

class PerfcatAppProtocol PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.PerfcatAppProtocol) */ {
 public:
  inline PerfcatAppProtocol() : PerfcatAppProtocol(nullptr) {}
  virtual ~PerfcatAppProtocol();

  PerfcatAppProtocol(const PerfcatAppProtocol& from);
  PerfcatAppProtocol(PerfcatAppProtocol&& from) noexcept
    : PerfcatAppProtocol() {
    *this = ::std::move(from);
  }

  inline PerfcatAppProtocol& operator=(const PerfcatAppProtocol& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfcatAppProtocol& operator=(PerfcatAppProtocol&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PerfcatAppProtocol& default_instance();

  enum ProtocolCase {
    kGetAppInfoReq = 1,
    kGetAppInfoRsp = 2,
    kGetScreenInfoReq = 3,
    kGetScreenInfoRsp = 4,
    kGetLMKThresholdReq = 5,
    kGetLMKThresholdRsp = 6,
    kCheckOverlayPermissionReq = 7,
    kCheckOverlayPermissionRsp = 8,
    kAppHelloReq = 9,
    kAppHelloRsp = 10,
    PROTOCOL_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerfcatAppProtocol* internal_default_instance() {
    return reinterpret_cast<const PerfcatAppProtocol*>(
               &_PerfcatAppProtocol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PerfcatAppProtocol& a, PerfcatAppProtocol& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfcatAppProtocol* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerfcatAppProtocol* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerfcatAppProtocol* New() const final {
    return CreateMaybeMessage<PerfcatAppProtocol>(nullptr);
  }

  PerfcatAppProtocol* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerfcatAppProtocol>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PerfcatAppProtocol& from);
  void MergeFrom(const PerfcatAppProtocol& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerfcatAppProtocol* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.PerfcatAppProtocol";
  }
  protected:
  explicit PerfcatAppProtocol(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGetAppInfoReqFieldNumber = 1,
    kGetAppInfoRspFieldNumber = 2,
    kGetScreenInfoReqFieldNumber = 3,
    kGetScreenInfoRspFieldNumber = 4,
    kGetLMKThresholdReqFieldNumber = 5,
    kGetLMKThresholdRspFieldNumber = 6,
    kCheckOverlayPermissionReqFieldNumber = 7,
    kCheckOverlayPermissionRspFieldNumber = 8,
    kAppHelloReqFieldNumber = 9,
    kAppHelloRspFieldNumber = 10,
  };
  // .perfcat.GetAppInfoReq getAppInfoReq = 1;
  bool has_getappinforeq() const;
  private:
  bool _internal_has_getappinforeq() const;
  public:
  void clear_getappinforeq();
  const ::perfcat::GetAppInfoReq& getappinforeq() const;
  ::perfcat::GetAppInfoReq* release_getappinforeq();
  ::perfcat::GetAppInfoReq* mutable_getappinforeq();
  void set_allocated_getappinforeq(::perfcat::GetAppInfoReq* getappinforeq);
  private:
  const ::perfcat::GetAppInfoReq& _internal_getappinforeq() const;
  ::perfcat::GetAppInfoReq* _internal_mutable_getappinforeq();
  public:
  void unsafe_arena_set_allocated_getappinforeq(
      ::perfcat::GetAppInfoReq* getappinforeq);
  ::perfcat::GetAppInfoReq* unsafe_arena_release_getappinforeq();

  // .perfcat.GetAppInfoRsp getAppInfoRsp = 2;
  bool has_getappinforsp() const;
  private:
  bool _internal_has_getappinforsp() const;
  public:
  void clear_getappinforsp();
  const ::perfcat::GetAppInfoRsp& getappinforsp() const;
  ::perfcat::GetAppInfoRsp* release_getappinforsp();
  ::perfcat::GetAppInfoRsp* mutable_getappinforsp();
  void set_allocated_getappinforsp(::perfcat::GetAppInfoRsp* getappinforsp);
  private:
  const ::perfcat::GetAppInfoRsp& _internal_getappinforsp() const;
  ::perfcat::GetAppInfoRsp* _internal_mutable_getappinforsp();
  public:
  void unsafe_arena_set_allocated_getappinforsp(
      ::perfcat::GetAppInfoRsp* getappinforsp);
  ::perfcat::GetAppInfoRsp* unsafe_arena_release_getappinforsp();

  // .perfcat.GetScreenInfoReq getScreenInfoReq = 3;
  bool has_getscreeninforeq() const;
  private:
  bool _internal_has_getscreeninforeq() const;
  public:
  void clear_getscreeninforeq();
  const ::perfcat::GetScreenInfoReq& getscreeninforeq() const;
  ::perfcat::GetScreenInfoReq* release_getscreeninforeq();
  ::perfcat::GetScreenInfoReq* mutable_getscreeninforeq();
  void set_allocated_getscreeninforeq(::perfcat::GetScreenInfoReq* getscreeninforeq);
  private:
  const ::perfcat::GetScreenInfoReq& _internal_getscreeninforeq() const;
  ::perfcat::GetScreenInfoReq* _internal_mutable_getscreeninforeq();
  public:
  void unsafe_arena_set_allocated_getscreeninforeq(
      ::perfcat::GetScreenInfoReq* getscreeninforeq);
  ::perfcat::GetScreenInfoReq* unsafe_arena_release_getscreeninforeq();

  // .perfcat.GetScreenInfoRsp getScreenInfoRsp = 4;
  bool has_getscreeninforsp() const;
  private:
  bool _internal_has_getscreeninforsp() const;
  public:
  void clear_getscreeninforsp();
  const ::perfcat::GetScreenInfoRsp& getscreeninforsp() const;
  ::perfcat::GetScreenInfoRsp* release_getscreeninforsp();
  ::perfcat::GetScreenInfoRsp* mutable_getscreeninforsp();
  void set_allocated_getscreeninforsp(::perfcat::GetScreenInfoRsp* getscreeninforsp);
  private:
  const ::perfcat::GetScreenInfoRsp& _internal_getscreeninforsp() const;
  ::perfcat::GetScreenInfoRsp* _internal_mutable_getscreeninforsp();
  public:
  void unsafe_arena_set_allocated_getscreeninforsp(
      ::perfcat::GetScreenInfoRsp* getscreeninforsp);
  ::perfcat::GetScreenInfoRsp* unsafe_arena_release_getscreeninforsp();

  // .perfcat.GetLMKThresholdReq getLMKThresholdReq = 5;
  bool has_getlmkthresholdreq() const;
  private:
  bool _internal_has_getlmkthresholdreq() const;
  public:
  void clear_getlmkthresholdreq();
  const ::perfcat::GetLMKThresholdReq& getlmkthresholdreq() const;
  ::perfcat::GetLMKThresholdReq* release_getlmkthresholdreq();
  ::perfcat::GetLMKThresholdReq* mutable_getlmkthresholdreq();
  void set_allocated_getlmkthresholdreq(::perfcat::GetLMKThresholdReq* getlmkthresholdreq);
  private:
  const ::perfcat::GetLMKThresholdReq& _internal_getlmkthresholdreq() const;
  ::perfcat::GetLMKThresholdReq* _internal_mutable_getlmkthresholdreq();
  public:
  void unsafe_arena_set_allocated_getlmkthresholdreq(
      ::perfcat::GetLMKThresholdReq* getlmkthresholdreq);
  ::perfcat::GetLMKThresholdReq* unsafe_arena_release_getlmkthresholdreq();

  // .perfcat.GetLMKThresholdRsp getLMKThresholdRsp = 6;
  bool has_getlmkthresholdrsp() const;
  private:
  bool _internal_has_getlmkthresholdrsp() const;
  public:
  void clear_getlmkthresholdrsp();
  const ::perfcat::GetLMKThresholdRsp& getlmkthresholdrsp() const;
  ::perfcat::GetLMKThresholdRsp* release_getlmkthresholdrsp();
  ::perfcat::GetLMKThresholdRsp* mutable_getlmkthresholdrsp();
  void set_allocated_getlmkthresholdrsp(::perfcat::GetLMKThresholdRsp* getlmkthresholdrsp);
  private:
  const ::perfcat::GetLMKThresholdRsp& _internal_getlmkthresholdrsp() const;
  ::perfcat::GetLMKThresholdRsp* _internal_mutable_getlmkthresholdrsp();
  public:
  void unsafe_arena_set_allocated_getlmkthresholdrsp(
      ::perfcat::GetLMKThresholdRsp* getlmkthresholdrsp);
  ::perfcat::GetLMKThresholdRsp* unsafe_arena_release_getlmkthresholdrsp();

  // .perfcat.CheckOverlayPermissionReq checkOverlayPermissionReq = 7;
  bool has_checkoverlaypermissionreq() const;
  private:
  bool _internal_has_checkoverlaypermissionreq() const;
  public:
  void clear_checkoverlaypermissionreq();
  const ::perfcat::CheckOverlayPermissionReq& checkoverlaypermissionreq() const;
  ::perfcat::CheckOverlayPermissionReq* release_checkoverlaypermissionreq();
  ::perfcat::CheckOverlayPermissionReq* mutable_checkoverlaypermissionreq();
  void set_allocated_checkoverlaypermissionreq(::perfcat::CheckOverlayPermissionReq* checkoverlaypermissionreq);
  private:
  const ::perfcat::CheckOverlayPermissionReq& _internal_checkoverlaypermissionreq() const;
  ::perfcat::CheckOverlayPermissionReq* _internal_mutable_checkoverlaypermissionreq();
  public:
  void unsafe_arena_set_allocated_checkoverlaypermissionreq(
      ::perfcat::CheckOverlayPermissionReq* checkoverlaypermissionreq);
  ::perfcat::CheckOverlayPermissionReq* unsafe_arena_release_checkoverlaypermissionreq();

  // .perfcat.CheckOverlayPermissionRsp checkOverlayPermissionRsp = 8;
  bool has_checkoverlaypermissionrsp() const;
  private:
  bool _internal_has_checkoverlaypermissionrsp() const;
  public:
  void clear_checkoverlaypermissionrsp();
  const ::perfcat::CheckOverlayPermissionRsp& checkoverlaypermissionrsp() const;
  ::perfcat::CheckOverlayPermissionRsp* release_checkoverlaypermissionrsp();
  ::perfcat::CheckOverlayPermissionRsp* mutable_checkoverlaypermissionrsp();
  void set_allocated_checkoverlaypermissionrsp(::perfcat::CheckOverlayPermissionRsp* checkoverlaypermissionrsp);
  private:
  const ::perfcat::CheckOverlayPermissionRsp& _internal_checkoverlaypermissionrsp() const;
  ::perfcat::CheckOverlayPermissionRsp* _internal_mutable_checkoverlaypermissionrsp();
  public:
  void unsafe_arena_set_allocated_checkoverlaypermissionrsp(
      ::perfcat::CheckOverlayPermissionRsp* checkoverlaypermissionrsp);
  ::perfcat::CheckOverlayPermissionRsp* unsafe_arena_release_checkoverlaypermissionrsp();

  // .perfcat.AppHelloReq AppHelloReq = 9;
  bool has_apphelloreq() const;
  private:
  bool _internal_has_apphelloreq() const;
  public:
  void clear_apphelloreq();
  const ::perfcat::AppHelloReq& apphelloreq() const;
  ::perfcat::AppHelloReq* release_apphelloreq();
  ::perfcat::AppHelloReq* mutable_apphelloreq();
  void set_allocated_apphelloreq(::perfcat::AppHelloReq* apphelloreq);
  private:
  const ::perfcat::AppHelloReq& _internal_apphelloreq() const;
  ::perfcat::AppHelloReq* _internal_mutable_apphelloreq();
  public:
  void unsafe_arena_set_allocated_apphelloreq(
      ::perfcat::AppHelloReq* apphelloreq);
  ::perfcat::AppHelloReq* unsafe_arena_release_apphelloreq();

  // .perfcat.AppHelloRsp appHelloRsp = 10;
  bool has_apphellorsp() const;
  private:
  bool _internal_has_apphellorsp() const;
  public:
  void clear_apphellorsp();
  const ::perfcat::AppHelloRsp& apphellorsp() const;
  ::perfcat::AppHelloRsp* release_apphellorsp();
  ::perfcat::AppHelloRsp* mutable_apphellorsp();
  void set_allocated_apphellorsp(::perfcat::AppHelloRsp* apphellorsp);
  private:
  const ::perfcat::AppHelloRsp& _internal_apphellorsp() const;
  ::perfcat::AppHelloRsp* _internal_mutable_apphellorsp();
  public:
  void unsafe_arena_set_allocated_apphellorsp(
      ::perfcat::AppHelloRsp* apphellorsp);
  ::perfcat::AppHelloRsp* unsafe_arena_release_apphellorsp();

  void clear_protocol();
  ProtocolCase protocol_case() const;
  // @@protoc_insertion_point(class_scope:perfcat.PerfcatAppProtocol)
 private:
  class _Internal;
  void set_has_getappinforeq();
  void set_has_getappinforsp();
  void set_has_getscreeninforeq();
  void set_has_getscreeninforsp();
  void set_has_getlmkthresholdreq();
  void set_has_getlmkthresholdrsp();
  void set_has_checkoverlaypermissionreq();
  void set_has_checkoverlaypermissionrsp();
  void set_has_apphelloreq();
  void set_has_apphellorsp();

  inline bool has_protocol() const;
  inline void clear_has_protocol();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ProtocolUnion {
    ProtocolUnion() {}
    ::perfcat::GetAppInfoReq* getappinforeq_;
    ::perfcat::GetAppInfoRsp* getappinforsp_;
    ::perfcat::GetScreenInfoReq* getscreeninforeq_;
    ::perfcat::GetScreenInfoRsp* getscreeninforsp_;
    ::perfcat::GetLMKThresholdReq* getlmkthresholdreq_;
    ::perfcat::GetLMKThresholdRsp* getlmkthresholdrsp_;
    ::perfcat::CheckOverlayPermissionReq* checkoverlaypermissionreq_;
    ::perfcat::CheckOverlayPermissionRsp* checkoverlaypermissionrsp_;
    ::perfcat::AppHelloReq* apphelloreq_;
    ::perfcat::AppHelloRsp* apphellorsp_;
  } protocol_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class PerfcatServerProtocol PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.PerfcatServerProtocol) */ {
 public:
  inline PerfcatServerProtocol() : PerfcatServerProtocol(nullptr) {}
  virtual ~PerfcatServerProtocol();

  PerfcatServerProtocol(const PerfcatServerProtocol& from);
  PerfcatServerProtocol(PerfcatServerProtocol&& from) noexcept
    : PerfcatServerProtocol() {
    *this = ::std::move(from);
  }

  inline PerfcatServerProtocol& operator=(const PerfcatServerProtocol& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfcatServerProtocol& operator=(PerfcatServerProtocol&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PerfcatServerProtocol& default_instance();

  enum ProtocolCase {
    kProfileReq = 1,
    kProfileRsp = 2,
    kGetMemoryUsageReq = 3,
    kGetMemoryUsageRsp = 4,
    kStopProfileReq = 5,
    kStopProfileRsp = 6,
    kCheckDeviceReq = 7,
    kCheckDeviceRsp = 8,
    kProfileNtf = 9,
    kGetCpuMaxFreqReq = 10,
    kGetCpuMaxFreqRsp = 11,
    kToggleInterestingFiledNTF = 12,
    kProfileStartedNTF = 13,
    kProfileStoppedNTF = 14,
    kProcessNotFoundNTF = 15,
    kProcessFoundNTF = 16,
    kGetBatteryInfoReq = 17,
    kGetBatteryInfoRsp = 18,
    kAppClosedNTF = 19,
    kProfileNTFACK = 20,
    kPrepareWifiProfileNTF = 21,
    kGetAppInfoReq = 22,
    kGetAppInfoRsp = 23,
    kEmptyRsp = 24,
    kHelloReq = 25,
    kExecuteShellCommandReq = 26,
    kExecuteShellCommandRsp = 27,
    kRegisterAppReq = 28,
    kResumeProfileReq = 29,
    kResumeProfileRsp = 30,
    kGetDataFromAppReq = 31,
    kGetDataFromAppRsp = 32,
    kSetScreenshotIntervalReq = 33,
    kEnableFloatingWindowReq = 34,
    kProfileIOSNtf = 10001,
    PROTOCOL_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerfcatServerProtocol* internal_default_instance() {
    return reinterpret_cast<const PerfcatServerProtocol*>(
               &_PerfcatServerProtocol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PerfcatServerProtocol& a, PerfcatServerProtocol& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfcatServerProtocol* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerfcatServerProtocol* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerfcatServerProtocol* New() const final {
    return CreateMaybeMessage<PerfcatServerProtocol>(nullptr);
  }

  PerfcatServerProtocol* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerfcatServerProtocol>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PerfcatServerProtocol& from);
  void MergeFrom(const PerfcatServerProtocol& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerfcatServerProtocol* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.PerfcatServerProtocol";
  }
  protected:
  explicit PerfcatServerProtocol(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProfileReqFieldNumber = 1,
    kProfileRspFieldNumber = 2,
    kGetMemoryUsageReqFieldNumber = 3,
    kGetMemoryUsageRspFieldNumber = 4,
    kStopProfileReqFieldNumber = 5,
    kStopProfileRspFieldNumber = 6,
    kCheckDeviceReqFieldNumber = 7,
    kCheckDeviceRspFieldNumber = 8,
    kProfileNtfFieldNumber = 9,
    kGetCpuMaxFreqReqFieldNumber = 10,
    kGetCpuMaxFreqRspFieldNumber = 11,
    kToggleInterestingFiledNTFFieldNumber = 12,
    kProfileStartedNTFFieldNumber = 13,
    kProfileStoppedNTFFieldNumber = 14,
    kProcessNotFoundNTFFieldNumber = 15,
    kProcessFoundNTFFieldNumber = 16,
    kGetBatteryInfoReqFieldNumber = 17,
    kGetBatteryInfoRspFieldNumber = 18,
    kAppClosedNTFFieldNumber = 19,
    kProfileNTFACKFieldNumber = 20,
    kPrepareWifiProfileNTFFieldNumber = 21,
    kGetAppInfoReqFieldNumber = 22,
    kGetAppInfoRspFieldNumber = 23,
    kEmptyRspFieldNumber = 24,
    kHelloReqFieldNumber = 25,
    kExecuteShellCommandReqFieldNumber = 26,
    kExecuteShellCommandRspFieldNumber = 27,
    kRegisterAppReqFieldNumber = 28,
    kResumeProfileReqFieldNumber = 29,
    kResumeProfileRspFieldNumber = 30,
    kGetDataFromAppReqFieldNumber = 31,
    kGetDataFromAppRspFieldNumber = 32,
    kSetScreenshotIntervalReqFieldNumber = 33,
    kEnableFloatingWindowReqFieldNumber = 34,
    kProfileIOSNtfFieldNumber = 10001,
  };
  // .perfcat.ProfileReq profileReq = 1;
  bool has_profilereq() const;
  private:
  bool _internal_has_profilereq() const;
  public:
  void clear_profilereq();
  const ::perfcat::ProfileReq& profilereq() const;
  ::perfcat::ProfileReq* release_profilereq();
  ::perfcat::ProfileReq* mutable_profilereq();
  void set_allocated_profilereq(::perfcat::ProfileReq* profilereq);
  private:
  const ::perfcat::ProfileReq& _internal_profilereq() const;
  ::perfcat::ProfileReq* _internal_mutable_profilereq();
  public:
  void unsafe_arena_set_allocated_profilereq(
      ::perfcat::ProfileReq* profilereq);
  ::perfcat::ProfileReq* unsafe_arena_release_profilereq();

  // .perfcat.ProfileRsp profileRsp = 2;
  bool has_profilersp() const;
  private:
  bool _internal_has_profilersp() const;
  public:
  void clear_profilersp();
  const ::perfcat::ProfileRsp& profilersp() const;
  ::perfcat::ProfileRsp* release_profilersp();
  ::perfcat::ProfileRsp* mutable_profilersp();
  void set_allocated_profilersp(::perfcat::ProfileRsp* profilersp);
  private:
  const ::perfcat::ProfileRsp& _internal_profilersp() const;
  ::perfcat::ProfileRsp* _internal_mutable_profilersp();
  public:
  void unsafe_arena_set_allocated_profilersp(
      ::perfcat::ProfileRsp* profilersp);
  ::perfcat::ProfileRsp* unsafe_arena_release_profilersp();

  // .perfcat.GetMemoryUsageReq getMemoryUsageReq = 3;
  bool has_getmemoryusagereq() const;
  private:
  bool _internal_has_getmemoryusagereq() const;
  public:
  void clear_getmemoryusagereq();
  const ::perfcat::GetMemoryUsageReq& getmemoryusagereq() const;
  ::perfcat::GetMemoryUsageReq* release_getmemoryusagereq();
  ::perfcat::GetMemoryUsageReq* mutable_getmemoryusagereq();
  void set_allocated_getmemoryusagereq(::perfcat::GetMemoryUsageReq* getmemoryusagereq);
  private:
  const ::perfcat::GetMemoryUsageReq& _internal_getmemoryusagereq() const;
  ::perfcat::GetMemoryUsageReq* _internal_mutable_getmemoryusagereq();
  public:
  void unsafe_arena_set_allocated_getmemoryusagereq(
      ::perfcat::GetMemoryUsageReq* getmemoryusagereq);
  ::perfcat::GetMemoryUsageReq* unsafe_arena_release_getmemoryusagereq();

  // .perfcat.GetMemoryUsageRsp getMemoryUsageRsp = 4;
  bool has_getmemoryusagersp() const;
  private:
  bool _internal_has_getmemoryusagersp() const;
  public:
  void clear_getmemoryusagersp();
  const ::perfcat::GetMemoryUsageRsp& getmemoryusagersp() const;
  ::perfcat::GetMemoryUsageRsp* release_getmemoryusagersp();
  ::perfcat::GetMemoryUsageRsp* mutable_getmemoryusagersp();
  void set_allocated_getmemoryusagersp(::perfcat::GetMemoryUsageRsp* getmemoryusagersp);
  private:
  const ::perfcat::GetMemoryUsageRsp& _internal_getmemoryusagersp() const;
  ::perfcat::GetMemoryUsageRsp* _internal_mutable_getmemoryusagersp();
  public:
  void unsafe_arena_set_allocated_getmemoryusagersp(
      ::perfcat::GetMemoryUsageRsp* getmemoryusagersp);
  ::perfcat::GetMemoryUsageRsp* unsafe_arena_release_getmemoryusagersp();

  // .perfcat.StopProfileReq stopProfileReq = 5;
  bool has_stopprofilereq() const;
  private:
  bool _internal_has_stopprofilereq() const;
  public:
  void clear_stopprofilereq();
  const ::perfcat::StopProfileReq& stopprofilereq() const;
  ::perfcat::StopProfileReq* release_stopprofilereq();
  ::perfcat::StopProfileReq* mutable_stopprofilereq();
  void set_allocated_stopprofilereq(::perfcat::StopProfileReq* stopprofilereq);
  private:
  const ::perfcat::StopProfileReq& _internal_stopprofilereq() const;
  ::perfcat::StopProfileReq* _internal_mutable_stopprofilereq();
  public:
  void unsafe_arena_set_allocated_stopprofilereq(
      ::perfcat::StopProfileReq* stopprofilereq);
  ::perfcat::StopProfileReq* unsafe_arena_release_stopprofilereq();

  // .perfcat.StopProfileRsp stopProfileRsp = 6;
  bool has_stopprofilersp() const;
  private:
  bool _internal_has_stopprofilersp() const;
  public:
  void clear_stopprofilersp();
  const ::perfcat::StopProfileRsp& stopprofilersp() const;
  ::perfcat::StopProfileRsp* release_stopprofilersp();
  ::perfcat::StopProfileRsp* mutable_stopprofilersp();
  void set_allocated_stopprofilersp(::perfcat::StopProfileRsp* stopprofilersp);
  private:
  const ::perfcat::StopProfileRsp& _internal_stopprofilersp() const;
  ::perfcat::StopProfileRsp* _internal_mutable_stopprofilersp();
  public:
  void unsafe_arena_set_allocated_stopprofilersp(
      ::perfcat::StopProfileRsp* stopprofilersp);
  ::perfcat::StopProfileRsp* unsafe_arena_release_stopprofilersp();

  // .perfcat.CheckDeviceReq checkDeviceReq = 7;
  bool has_checkdevicereq() const;
  private:
  bool _internal_has_checkdevicereq() const;
  public:
  void clear_checkdevicereq();
  const ::perfcat::CheckDeviceReq& checkdevicereq() const;
  ::perfcat::CheckDeviceReq* release_checkdevicereq();
  ::perfcat::CheckDeviceReq* mutable_checkdevicereq();
  void set_allocated_checkdevicereq(::perfcat::CheckDeviceReq* checkdevicereq);
  private:
  const ::perfcat::CheckDeviceReq& _internal_checkdevicereq() const;
  ::perfcat::CheckDeviceReq* _internal_mutable_checkdevicereq();
  public:
  void unsafe_arena_set_allocated_checkdevicereq(
      ::perfcat::CheckDeviceReq* checkdevicereq);
  ::perfcat::CheckDeviceReq* unsafe_arena_release_checkdevicereq();

  // .perfcat.CheckDeviceRsp checkDeviceRsp = 8;
  bool has_checkdevicersp() const;
  private:
  bool _internal_has_checkdevicersp() const;
  public:
  void clear_checkdevicersp();
  const ::perfcat::CheckDeviceRsp& checkdevicersp() const;
  ::perfcat::CheckDeviceRsp* release_checkdevicersp();
  ::perfcat::CheckDeviceRsp* mutable_checkdevicersp();
  void set_allocated_checkdevicersp(::perfcat::CheckDeviceRsp* checkdevicersp);
  private:
  const ::perfcat::CheckDeviceRsp& _internal_checkdevicersp() const;
  ::perfcat::CheckDeviceRsp* _internal_mutable_checkdevicersp();
  public:
  void unsafe_arena_set_allocated_checkdevicersp(
      ::perfcat::CheckDeviceRsp* checkdevicersp);
  ::perfcat::CheckDeviceRsp* unsafe_arena_release_checkdevicersp();

  // .perfcat.ProfileNtf profileNtf = 9;
  bool has_profilentf() const;
  private:
  bool _internal_has_profilentf() const;
  public:
  void clear_profilentf();
  const ::perfcat::ProfileNtf& profilentf() const;
  ::perfcat::ProfileNtf* release_profilentf();
  ::perfcat::ProfileNtf* mutable_profilentf();
  void set_allocated_profilentf(::perfcat::ProfileNtf* profilentf);
  private:
  const ::perfcat::ProfileNtf& _internal_profilentf() const;
  ::perfcat::ProfileNtf* _internal_mutable_profilentf();
  public:
  void unsafe_arena_set_allocated_profilentf(
      ::perfcat::ProfileNtf* profilentf);
  ::perfcat::ProfileNtf* unsafe_arena_release_profilentf();

  // .perfcat.GetCpuMaxFreqReq getCpuMaxFreqReq = 10;
  bool has_getcpumaxfreqreq() const;
  private:
  bool _internal_has_getcpumaxfreqreq() const;
  public:
  void clear_getcpumaxfreqreq();
  const ::perfcat::GetCpuMaxFreqReq& getcpumaxfreqreq() const;
  ::perfcat::GetCpuMaxFreqReq* release_getcpumaxfreqreq();
  ::perfcat::GetCpuMaxFreqReq* mutable_getcpumaxfreqreq();
  void set_allocated_getcpumaxfreqreq(::perfcat::GetCpuMaxFreqReq* getcpumaxfreqreq);
  private:
  const ::perfcat::GetCpuMaxFreqReq& _internal_getcpumaxfreqreq() const;
  ::perfcat::GetCpuMaxFreqReq* _internal_mutable_getcpumaxfreqreq();
  public:
  void unsafe_arena_set_allocated_getcpumaxfreqreq(
      ::perfcat::GetCpuMaxFreqReq* getcpumaxfreqreq);
  ::perfcat::GetCpuMaxFreqReq* unsafe_arena_release_getcpumaxfreqreq();

  // .perfcat.GetCpuMaxFreqRsp getCpuMaxFreqRsp = 11;
  bool has_getcpumaxfreqrsp() const;
  private:
  bool _internal_has_getcpumaxfreqrsp() const;
  public:
  void clear_getcpumaxfreqrsp();
  const ::perfcat::GetCpuMaxFreqRsp& getcpumaxfreqrsp() const;
  ::perfcat::GetCpuMaxFreqRsp* release_getcpumaxfreqrsp();
  ::perfcat::GetCpuMaxFreqRsp* mutable_getcpumaxfreqrsp();
  void set_allocated_getcpumaxfreqrsp(::perfcat::GetCpuMaxFreqRsp* getcpumaxfreqrsp);
  private:
  const ::perfcat::GetCpuMaxFreqRsp& _internal_getcpumaxfreqrsp() const;
  ::perfcat::GetCpuMaxFreqRsp* _internal_mutable_getcpumaxfreqrsp();
  public:
  void unsafe_arena_set_allocated_getcpumaxfreqrsp(
      ::perfcat::GetCpuMaxFreqRsp* getcpumaxfreqrsp);
  ::perfcat::GetCpuMaxFreqRsp* unsafe_arena_release_getcpumaxfreqrsp();

  // .perfcat.ToggleInterestingFiledNTF toggleInterestingFiledNTF = 12;
  bool has_toggleinterestingfiledntf() const;
  private:
  bool _internal_has_toggleinterestingfiledntf() const;
  public:
  void clear_toggleinterestingfiledntf();
  const ::perfcat::ToggleInterestingFiledNTF& toggleinterestingfiledntf() const;
  ::perfcat::ToggleInterestingFiledNTF* release_toggleinterestingfiledntf();
  ::perfcat::ToggleInterestingFiledNTF* mutable_toggleinterestingfiledntf();
  void set_allocated_toggleinterestingfiledntf(::perfcat::ToggleInterestingFiledNTF* toggleinterestingfiledntf);
  private:
  const ::perfcat::ToggleInterestingFiledNTF& _internal_toggleinterestingfiledntf() const;
  ::perfcat::ToggleInterestingFiledNTF* _internal_mutable_toggleinterestingfiledntf();
  public:
  void unsafe_arena_set_allocated_toggleinterestingfiledntf(
      ::perfcat::ToggleInterestingFiledNTF* toggleinterestingfiledntf);
  ::perfcat::ToggleInterestingFiledNTF* unsafe_arena_release_toggleinterestingfiledntf();

  // .perfcat.ProfileStartedNTF profileStartedNTF = 13;
  bool has_profilestartedntf() const;
  private:
  bool _internal_has_profilestartedntf() const;
  public:
  void clear_profilestartedntf();
  const ::perfcat::ProfileStartedNTF& profilestartedntf() const;
  ::perfcat::ProfileStartedNTF* release_profilestartedntf();
  ::perfcat::ProfileStartedNTF* mutable_profilestartedntf();
  void set_allocated_profilestartedntf(::perfcat::ProfileStartedNTF* profilestartedntf);
  private:
  const ::perfcat::ProfileStartedNTF& _internal_profilestartedntf() const;
  ::perfcat::ProfileStartedNTF* _internal_mutable_profilestartedntf();
  public:
  void unsafe_arena_set_allocated_profilestartedntf(
      ::perfcat::ProfileStartedNTF* profilestartedntf);
  ::perfcat::ProfileStartedNTF* unsafe_arena_release_profilestartedntf();

  // .perfcat.ProfileStoppedNTF profileStoppedNTF = 14;
  bool has_profilestoppedntf() const;
  private:
  bool _internal_has_profilestoppedntf() const;
  public:
  void clear_profilestoppedntf();
  const ::perfcat::ProfileStoppedNTF& profilestoppedntf() const;
  ::perfcat::ProfileStoppedNTF* release_profilestoppedntf();
  ::perfcat::ProfileStoppedNTF* mutable_profilestoppedntf();
  void set_allocated_profilestoppedntf(::perfcat::ProfileStoppedNTF* profilestoppedntf);
  private:
  const ::perfcat::ProfileStoppedNTF& _internal_profilestoppedntf() const;
  ::perfcat::ProfileStoppedNTF* _internal_mutable_profilestoppedntf();
  public:
  void unsafe_arena_set_allocated_profilestoppedntf(
      ::perfcat::ProfileStoppedNTF* profilestoppedntf);
  ::perfcat::ProfileStoppedNTF* unsafe_arena_release_profilestoppedntf();

  // .perfcat.ProcessNotFoundNTF processNotFoundNTF = 15;
  bool has_processnotfoundntf() const;
  private:
  bool _internal_has_processnotfoundntf() const;
  public:
  void clear_processnotfoundntf();
  const ::perfcat::ProcessNotFoundNTF& processnotfoundntf() const;
  ::perfcat::ProcessNotFoundNTF* release_processnotfoundntf();
  ::perfcat::ProcessNotFoundNTF* mutable_processnotfoundntf();
  void set_allocated_processnotfoundntf(::perfcat::ProcessNotFoundNTF* processnotfoundntf);
  private:
  const ::perfcat::ProcessNotFoundNTF& _internal_processnotfoundntf() const;
  ::perfcat::ProcessNotFoundNTF* _internal_mutable_processnotfoundntf();
  public:
  void unsafe_arena_set_allocated_processnotfoundntf(
      ::perfcat::ProcessNotFoundNTF* processnotfoundntf);
  ::perfcat::ProcessNotFoundNTF* unsafe_arena_release_processnotfoundntf();

  // .perfcat.ProcessFoundNTF processFoundNTF = 16;
  bool has_processfoundntf() const;
  private:
  bool _internal_has_processfoundntf() const;
  public:
  void clear_processfoundntf();
  const ::perfcat::ProcessFoundNTF& processfoundntf() const;
  ::perfcat::ProcessFoundNTF* release_processfoundntf();
  ::perfcat::ProcessFoundNTF* mutable_processfoundntf();
  void set_allocated_processfoundntf(::perfcat::ProcessFoundNTF* processfoundntf);
  private:
  const ::perfcat::ProcessFoundNTF& _internal_processfoundntf() const;
  ::perfcat::ProcessFoundNTF* _internal_mutable_processfoundntf();
  public:
  void unsafe_arena_set_allocated_processfoundntf(
      ::perfcat::ProcessFoundNTF* processfoundntf);
  ::perfcat::ProcessFoundNTF* unsafe_arena_release_processfoundntf();

  // .perfcat.GetBatteryInfoReq getBatteryInfoReq = 17;
  bool has_getbatteryinforeq() const;
  private:
  bool _internal_has_getbatteryinforeq() const;
  public:
  void clear_getbatteryinforeq();
  const ::perfcat::GetBatteryInfoReq& getbatteryinforeq() const;
  ::perfcat::GetBatteryInfoReq* release_getbatteryinforeq();
  ::perfcat::GetBatteryInfoReq* mutable_getbatteryinforeq();
  void set_allocated_getbatteryinforeq(::perfcat::GetBatteryInfoReq* getbatteryinforeq);
  private:
  const ::perfcat::GetBatteryInfoReq& _internal_getbatteryinforeq() const;
  ::perfcat::GetBatteryInfoReq* _internal_mutable_getbatteryinforeq();
  public:
  void unsafe_arena_set_allocated_getbatteryinforeq(
      ::perfcat::GetBatteryInfoReq* getbatteryinforeq);
  ::perfcat::GetBatteryInfoReq* unsafe_arena_release_getbatteryinforeq();

  // .perfcat.GetBatteryInfoRsp getBatteryInfoRsp = 18;
  bool has_getbatteryinforsp() const;
  private:
  bool _internal_has_getbatteryinforsp() const;
  public:
  void clear_getbatteryinforsp();
  const ::perfcat::GetBatteryInfoRsp& getbatteryinforsp() const;
  ::perfcat::GetBatteryInfoRsp* release_getbatteryinforsp();
  ::perfcat::GetBatteryInfoRsp* mutable_getbatteryinforsp();
  void set_allocated_getbatteryinforsp(::perfcat::GetBatteryInfoRsp* getbatteryinforsp);
  private:
  const ::perfcat::GetBatteryInfoRsp& _internal_getbatteryinforsp() const;
  ::perfcat::GetBatteryInfoRsp* _internal_mutable_getbatteryinforsp();
  public:
  void unsafe_arena_set_allocated_getbatteryinforsp(
      ::perfcat::GetBatteryInfoRsp* getbatteryinforsp);
  ::perfcat::GetBatteryInfoRsp* unsafe_arena_release_getbatteryinforsp();

  // .perfcat.AppClosedNTF appClosedNTF = 19;
  bool has_appclosedntf() const;
  private:
  bool _internal_has_appclosedntf() const;
  public:
  void clear_appclosedntf();
  const ::perfcat::AppClosedNTF& appclosedntf() const;
  ::perfcat::AppClosedNTF* release_appclosedntf();
  ::perfcat::AppClosedNTF* mutable_appclosedntf();
  void set_allocated_appclosedntf(::perfcat::AppClosedNTF* appclosedntf);
  private:
  const ::perfcat::AppClosedNTF& _internal_appclosedntf() const;
  ::perfcat::AppClosedNTF* _internal_mutable_appclosedntf();
  public:
  void unsafe_arena_set_allocated_appclosedntf(
      ::perfcat::AppClosedNTF* appclosedntf);
  ::perfcat::AppClosedNTF* unsafe_arena_release_appclosedntf();

  // .perfcat.ProfileNTFACK profileNTFACK = 20;
  bool has_profilentfack() const;
  private:
  bool _internal_has_profilentfack() const;
  public:
  void clear_profilentfack();
  const ::perfcat::ProfileNTFACK& profilentfack() const;
  ::perfcat::ProfileNTFACK* release_profilentfack();
  ::perfcat::ProfileNTFACK* mutable_profilentfack();
  void set_allocated_profilentfack(::perfcat::ProfileNTFACK* profilentfack);
  private:
  const ::perfcat::ProfileNTFACK& _internal_profilentfack() const;
  ::perfcat::ProfileNTFACK* _internal_mutable_profilentfack();
  public:
  void unsafe_arena_set_allocated_profilentfack(
      ::perfcat::ProfileNTFACK* profilentfack);
  ::perfcat::ProfileNTFACK* unsafe_arena_release_profilentfack();

  // .perfcat.PrepareWifiProfileNTF prepareWifiProfileNTF = 21;
  bool has_preparewifiprofilentf() const;
  private:
  bool _internal_has_preparewifiprofilentf() const;
  public:
  void clear_preparewifiprofilentf();
  const ::perfcat::PrepareWifiProfileNTF& preparewifiprofilentf() const;
  ::perfcat::PrepareWifiProfileNTF* release_preparewifiprofilentf();
  ::perfcat::PrepareWifiProfileNTF* mutable_preparewifiprofilentf();
  void set_allocated_preparewifiprofilentf(::perfcat::PrepareWifiProfileNTF* preparewifiprofilentf);
  private:
  const ::perfcat::PrepareWifiProfileNTF& _internal_preparewifiprofilentf() const;
  ::perfcat::PrepareWifiProfileNTF* _internal_mutable_preparewifiprofilentf();
  public:
  void unsafe_arena_set_allocated_preparewifiprofilentf(
      ::perfcat::PrepareWifiProfileNTF* preparewifiprofilentf);
  ::perfcat::PrepareWifiProfileNTF* unsafe_arena_release_preparewifiprofilentf();

  // .perfcat.GetAppInfoReq getAppInfoReq = 22;
  bool has_getappinforeq() const;
  private:
  bool _internal_has_getappinforeq() const;
  public:
  void clear_getappinforeq();
  const ::perfcat::GetAppInfoReq& getappinforeq() const;
  ::perfcat::GetAppInfoReq* release_getappinforeq();
  ::perfcat::GetAppInfoReq* mutable_getappinforeq();
  void set_allocated_getappinforeq(::perfcat::GetAppInfoReq* getappinforeq);
  private:
  const ::perfcat::GetAppInfoReq& _internal_getappinforeq() const;
  ::perfcat::GetAppInfoReq* _internal_mutable_getappinforeq();
  public:
  void unsafe_arena_set_allocated_getappinforeq(
      ::perfcat::GetAppInfoReq* getappinforeq);
  ::perfcat::GetAppInfoReq* unsafe_arena_release_getappinforeq();

  // .perfcat.GetAppInfoRsp getAppInfoRsp = 23;
  bool has_getappinforsp() const;
  private:
  bool _internal_has_getappinforsp() const;
  public:
  void clear_getappinforsp();
  const ::perfcat::GetAppInfoRsp& getappinforsp() const;
  ::perfcat::GetAppInfoRsp* release_getappinforsp();
  ::perfcat::GetAppInfoRsp* mutable_getappinforsp();
  void set_allocated_getappinforsp(::perfcat::GetAppInfoRsp* getappinforsp);
  private:
  const ::perfcat::GetAppInfoRsp& _internal_getappinforsp() const;
  ::perfcat::GetAppInfoRsp* _internal_mutable_getappinforsp();
  public:
  void unsafe_arena_set_allocated_getappinforsp(
      ::perfcat::GetAppInfoRsp* getappinforsp);
  ::perfcat::GetAppInfoRsp* unsafe_arena_release_getappinforsp();

  // .perfcat.EmptyRsp emptyRsp = 24;
  bool has_emptyrsp() const;
  private:
  bool _internal_has_emptyrsp() const;
  public:
  void clear_emptyrsp();
  const ::perfcat::EmptyRsp& emptyrsp() const;
  ::perfcat::EmptyRsp* release_emptyrsp();
  ::perfcat::EmptyRsp* mutable_emptyrsp();
  void set_allocated_emptyrsp(::perfcat::EmptyRsp* emptyrsp);
  private:
  const ::perfcat::EmptyRsp& _internal_emptyrsp() const;
  ::perfcat::EmptyRsp* _internal_mutable_emptyrsp();
  public:
  void unsafe_arena_set_allocated_emptyrsp(
      ::perfcat::EmptyRsp* emptyrsp);
  ::perfcat::EmptyRsp* unsafe_arena_release_emptyrsp();

  // .perfcat.HelloReq helloReq = 25;
  bool has_helloreq() const;
  private:
  bool _internal_has_helloreq() const;
  public:
  void clear_helloreq();
  const ::perfcat::HelloReq& helloreq() const;
  ::perfcat::HelloReq* release_helloreq();
  ::perfcat::HelloReq* mutable_helloreq();
  void set_allocated_helloreq(::perfcat::HelloReq* helloreq);
  private:
  const ::perfcat::HelloReq& _internal_helloreq() const;
  ::perfcat::HelloReq* _internal_mutable_helloreq();
  public:
  void unsafe_arena_set_allocated_helloreq(
      ::perfcat::HelloReq* helloreq);
  ::perfcat::HelloReq* unsafe_arena_release_helloreq();

  // .perfcat.ExecuteShellCommandReq executeShellCommandReq = 26;
  bool has_executeshellcommandreq() const;
  private:
  bool _internal_has_executeshellcommandreq() const;
  public:
  void clear_executeshellcommandreq();
  const ::perfcat::ExecuteShellCommandReq& executeshellcommandreq() const;
  ::perfcat::ExecuteShellCommandReq* release_executeshellcommandreq();
  ::perfcat::ExecuteShellCommandReq* mutable_executeshellcommandreq();
  void set_allocated_executeshellcommandreq(::perfcat::ExecuteShellCommandReq* executeshellcommandreq);
  private:
  const ::perfcat::ExecuteShellCommandReq& _internal_executeshellcommandreq() const;
  ::perfcat::ExecuteShellCommandReq* _internal_mutable_executeshellcommandreq();
  public:
  void unsafe_arena_set_allocated_executeshellcommandreq(
      ::perfcat::ExecuteShellCommandReq* executeshellcommandreq);
  ::perfcat::ExecuteShellCommandReq* unsafe_arena_release_executeshellcommandreq();

  // .perfcat.ExecuteShellCommandRsp executeShellCommandRsp = 27;
  bool has_executeshellcommandrsp() const;
  private:
  bool _internal_has_executeshellcommandrsp() const;
  public:
  void clear_executeshellcommandrsp();
  const ::perfcat::ExecuteShellCommandRsp& executeshellcommandrsp() const;
  ::perfcat::ExecuteShellCommandRsp* release_executeshellcommandrsp();
  ::perfcat::ExecuteShellCommandRsp* mutable_executeshellcommandrsp();
  void set_allocated_executeshellcommandrsp(::perfcat::ExecuteShellCommandRsp* executeshellcommandrsp);
  private:
  const ::perfcat::ExecuteShellCommandRsp& _internal_executeshellcommandrsp() const;
  ::perfcat::ExecuteShellCommandRsp* _internal_mutable_executeshellcommandrsp();
  public:
  void unsafe_arena_set_allocated_executeshellcommandrsp(
      ::perfcat::ExecuteShellCommandRsp* executeshellcommandrsp);
  ::perfcat::ExecuteShellCommandRsp* unsafe_arena_release_executeshellcommandrsp();

  // .perfcat.RegisterAppReq registerAppReq = 28;
  bool has_registerappreq() const;
  private:
  bool _internal_has_registerappreq() const;
  public:
  void clear_registerappreq();
  const ::perfcat::RegisterAppReq& registerappreq() const;
  ::perfcat::RegisterAppReq* release_registerappreq();
  ::perfcat::RegisterAppReq* mutable_registerappreq();
  void set_allocated_registerappreq(::perfcat::RegisterAppReq* registerappreq);
  private:
  const ::perfcat::RegisterAppReq& _internal_registerappreq() const;
  ::perfcat::RegisterAppReq* _internal_mutable_registerappreq();
  public:
  void unsafe_arena_set_allocated_registerappreq(
      ::perfcat::RegisterAppReq* registerappreq);
  ::perfcat::RegisterAppReq* unsafe_arena_release_registerappreq();

  // .perfcat.ResumeProfileReq resumeProfileReq = 29;
  bool has_resumeprofilereq() const;
  private:
  bool _internal_has_resumeprofilereq() const;
  public:
  void clear_resumeprofilereq();
  const ::perfcat::ResumeProfileReq& resumeprofilereq() const;
  ::perfcat::ResumeProfileReq* release_resumeprofilereq();
  ::perfcat::ResumeProfileReq* mutable_resumeprofilereq();
  void set_allocated_resumeprofilereq(::perfcat::ResumeProfileReq* resumeprofilereq);
  private:
  const ::perfcat::ResumeProfileReq& _internal_resumeprofilereq() const;
  ::perfcat::ResumeProfileReq* _internal_mutable_resumeprofilereq();
  public:
  void unsafe_arena_set_allocated_resumeprofilereq(
      ::perfcat::ResumeProfileReq* resumeprofilereq);
  ::perfcat::ResumeProfileReq* unsafe_arena_release_resumeprofilereq();

  // .perfcat.ResumeProfileRsp resumeProfileRsp = 30;
  bool has_resumeprofilersp() const;
  private:
  bool _internal_has_resumeprofilersp() const;
  public:
  void clear_resumeprofilersp();
  const ::perfcat::ResumeProfileRsp& resumeprofilersp() const;
  ::perfcat::ResumeProfileRsp* release_resumeprofilersp();
  ::perfcat::ResumeProfileRsp* mutable_resumeprofilersp();
  void set_allocated_resumeprofilersp(::perfcat::ResumeProfileRsp* resumeprofilersp);
  private:
  const ::perfcat::ResumeProfileRsp& _internal_resumeprofilersp() const;
  ::perfcat::ResumeProfileRsp* _internal_mutable_resumeprofilersp();
  public:
  void unsafe_arena_set_allocated_resumeprofilersp(
      ::perfcat::ResumeProfileRsp* resumeprofilersp);
  ::perfcat::ResumeProfileRsp* unsafe_arena_release_resumeprofilersp();

  // .perfcat.GetDataFromAppReq getDataFromAppReq = 31;
  bool has_getdatafromappreq() const;
  private:
  bool _internal_has_getdatafromappreq() const;
  public:
  void clear_getdatafromappreq();
  const ::perfcat::GetDataFromAppReq& getdatafromappreq() const;
  ::perfcat::GetDataFromAppReq* release_getdatafromappreq();
  ::perfcat::GetDataFromAppReq* mutable_getdatafromappreq();
  void set_allocated_getdatafromappreq(::perfcat::GetDataFromAppReq* getdatafromappreq);
  private:
  const ::perfcat::GetDataFromAppReq& _internal_getdatafromappreq() const;
  ::perfcat::GetDataFromAppReq* _internal_mutable_getdatafromappreq();
  public:
  void unsafe_arena_set_allocated_getdatafromappreq(
      ::perfcat::GetDataFromAppReq* getdatafromappreq);
  ::perfcat::GetDataFromAppReq* unsafe_arena_release_getdatafromappreq();

  // .perfcat.GetDataFromAppRsp getDataFromAppRsp = 32;
  bool has_getdatafromapprsp() const;
  private:
  bool _internal_has_getdatafromapprsp() const;
  public:
  void clear_getdatafromapprsp();
  const ::perfcat::GetDataFromAppRsp& getdatafromapprsp() const;
  ::perfcat::GetDataFromAppRsp* release_getdatafromapprsp();
  ::perfcat::GetDataFromAppRsp* mutable_getdatafromapprsp();
  void set_allocated_getdatafromapprsp(::perfcat::GetDataFromAppRsp* getdatafromapprsp);
  private:
  const ::perfcat::GetDataFromAppRsp& _internal_getdatafromapprsp() const;
  ::perfcat::GetDataFromAppRsp* _internal_mutable_getdatafromapprsp();
  public:
  void unsafe_arena_set_allocated_getdatafromapprsp(
      ::perfcat::GetDataFromAppRsp* getdatafromapprsp);
  ::perfcat::GetDataFromAppRsp* unsafe_arena_release_getdatafromapprsp();

  // .perfcat.SetScreenshotIntervalReq setScreenshotIntervalReq = 33;
  bool has_setscreenshotintervalreq() const;
  private:
  bool _internal_has_setscreenshotintervalreq() const;
  public:
  void clear_setscreenshotintervalreq();
  const ::perfcat::SetScreenshotIntervalReq& setscreenshotintervalreq() const;
  ::perfcat::SetScreenshotIntervalReq* release_setscreenshotintervalreq();
  ::perfcat::SetScreenshotIntervalReq* mutable_setscreenshotintervalreq();
  void set_allocated_setscreenshotintervalreq(::perfcat::SetScreenshotIntervalReq* setscreenshotintervalreq);
  private:
  const ::perfcat::SetScreenshotIntervalReq& _internal_setscreenshotintervalreq() const;
  ::perfcat::SetScreenshotIntervalReq* _internal_mutable_setscreenshotintervalreq();
  public:
  void unsafe_arena_set_allocated_setscreenshotintervalreq(
      ::perfcat::SetScreenshotIntervalReq* setscreenshotintervalreq);
  ::perfcat::SetScreenshotIntervalReq* unsafe_arena_release_setscreenshotintervalreq();

  // .perfcat.EnableFloatingWindowReq enableFloatingWindowReq = 34;
  bool has_enablefloatingwindowreq() const;
  private:
  bool _internal_has_enablefloatingwindowreq() const;
  public:
  void clear_enablefloatingwindowreq();
  const ::perfcat::EnableFloatingWindowReq& enablefloatingwindowreq() const;
  ::perfcat::EnableFloatingWindowReq* release_enablefloatingwindowreq();
  ::perfcat::EnableFloatingWindowReq* mutable_enablefloatingwindowreq();
  void set_allocated_enablefloatingwindowreq(::perfcat::EnableFloatingWindowReq* enablefloatingwindowreq);
  private:
  const ::perfcat::EnableFloatingWindowReq& _internal_enablefloatingwindowreq() const;
  ::perfcat::EnableFloatingWindowReq* _internal_mutable_enablefloatingwindowreq();
  public:
  void unsafe_arena_set_allocated_enablefloatingwindowreq(
      ::perfcat::EnableFloatingWindowReq* enablefloatingwindowreq);
  ::perfcat::EnableFloatingWindowReq* unsafe_arena_release_enablefloatingwindowreq();

  // .perfcat.ProfileIOSNtf profileIOSNtf = 10001;
  bool has_profileiosntf() const;
  private:
  bool _internal_has_profileiosntf() const;
  public:
  void clear_profileiosntf();
  const ::perfcat::ProfileIOSNtf& profileiosntf() const;
  ::perfcat::ProfileIOSNtf* release_profileiosntf();
  ::perfcat::ProfileIOSNtf* mutable_profileiosntf();
  void set_allocated_profileiosntf(::perfcat::ProfileIOSNtf* profileiosntf);
  private:
  const ::perfcat::ProfileIOSNtf& _internal_profileiosntf() const;
  ::perfcat::ProfileIOSNtf* _internal_mutable_profileiosntf();
  public:
  void unsafe_arena_set_allocated_profileiosntf(
      ::perfcat::ProfileIOSNtf* profileiosntf);
  ::perfcat::ProfileIOSNtf* unsafe_arena_release_profileiosntf();

  void clear_protocol();
  ProtocolCase protocol_case() const;
  // @@protoc_insertion_point(class_scope:perfcat.PerfcatServerProtocol)
 private:
  class _Internal;
  void set_has_profilereq();
  void set_has_profilersp();
  void set_has_getmemoryusagereq();
  void set_has_getmemoryusagersp();
  void set_has_stopprofilereq();
  void set_has_stopprofilersp();
  void set_has_checkdevicereq();
  void set_has_checkdevicersp();
  void set_has_profilentf();
  void set_has_getcpumaxfreqreq();
  void set_has_getcpumaxfreqrsp();
  void set_has_toggleinterestingfiledntf();
  void set_has_profilestartedntf();
  void set_has_profilestoppedntf();
  void set_has_processnotfoundntf();
  void set_has_processfoundntf();
  void set_has_getbatteryinforeq();
  void set_has_getbatteryinforsp();
  void set_has_appclosedntf();
  void set_has_profilentfack();
  void set_has_preparewifiprofilentf();
  void set_has_getappinforeq();
  void set_has_getappinforsp();
  void set_has_emptyrsp();
  void set_has_helloreq();
  void set_has_executeshellcommandreq();
  void set_has_executeshellcommandrsp();
  void set_has_registerappreq();
  void set_has_resumeprofilereq();
  void set_has_resumeprofilersp();
  void set_has_getdatafromappreq();
  void set_has_getdatafromapprsp();
  void set_has_setscreenshotintervalreq();
  void set_has_enablefloatingwindowreq();
  void set_has_profileiosntf();

  inline bool has_protocol() const;
  inline void clear_has_protocol();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ProtocolUnion {
    ProtocolUnion() {}
    ::perfcat::ProfileReq* profilereq_;
    ::perfcat::ProfileRsp* profilersp_;
    ::perfcat::GetMemoryUsageReq* getmemoryusagereq_;
    ::perfcat::GetMemoryUsageRsp* getmemoryusagersp_;
    ::perfcat::StopProfileReq* stopprofilereq_;
    ::perfcat::StopProfileRsp* stopprofilersp_;
    ::perfcat::CheckDeviceReq* checkdevicereq_;
    ::perfcat::CheckDeviceRsp* checkdevicersp_;
    ::perfcat::ProfileNtf* profilentf_;
    ::perfcat::GetCpuMaxFreqReq* getcpumaxfreqreq_;
    ::perfcat::GetCpuMaxFreqRsp* getcpumaxfreqrsp_;
    ::perfcat::ToggleInterestingFiledNTF* toggleinterestingfiledntf_;
    ::perfcat::ProfileStartedNTF* profilestartedntf_;
    ::perfcat::ProfileStoppedNTF* profilestoppedntf_;
    ::perfcat::ProcessNotFoundNTF* processnotfoundntf_;
    ::perfcat::ProcessFoundNTF* processfoundntf_;
    ::perfcat::GetBatteryInfoReq* getbatteryinforeq_;
    ::perfcat::GetBatteryInfoRsp* getbatteryinforsp_;
    ::perfcat::AppClosedNTF* appclosedntf_;
    ::perfcat::ProfileNTFACK* profilentfack_;
    ::perfcat::PrepareWifiProfileNTF* preparewifiprofilentf_;
    ::perfcat::GetAppInfoReq* getappinforeq_;
    ::perfcat::GetAppInfoRsp* getappinforsp_;
    ::perfcat::EmptyRsp* emptyrsp_;
    ::perfcat::HelloReq* helloreq_;
    ::perfcat::ExecuteShellCommandReq* executeshellcommandreq_;
    ::perfcat::ExecuteShellCommandRsp* executeshellcommandrsp_;
    ::perfcat::RegisterAppReq* registerappreq_;
    ::perfcat::ResumeProfileReq* resumeprofilereq_;
    ::perfcat::ResumeProfileRsp* resumeprofilersp_;
    ::perfcat::GetDataFromAppReq* getdatafromappreq_;
    ::perfcat::GetDataFromAppRsp* getdatafromapprsp_;
    ::perfcat::SetScreenshotIntervalReq* setscreenshotintervalreq_;
    ::perfcat::EnableFloatingWindowReq* enablefloatingwindowreq_;
    ::perfcat::ProfileIOSNtf* profileiosntf_;
  } protocol_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class ProfileReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.ProfileReq) */ {
 public:
  inline ProfileReq() : ProfileReq(nullptr) {}
  virtual ~ProfileReq();

  ProfileReq(const ProfileReq& from);
  ProfileReq(ProfileReq&& from) noexcept
    : ProfileReq() {
    *this = ::std::move(from);
  }

  inline ProfileReq& operator=(const ProfileReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfileReq& operator=(ProfileReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfileReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfileReq* internal_default_instance() {
    return reinterpret_cast<const ProfileReq*>(
               &_ProfileReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProfileReq& a, ProfileReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfileReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfileReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfileReq* New() const final {
    return CreateMaybeMessage<ProfileReq>(nullptr);
  }

  ProfileReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfileReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfileReq& from);
  void MergeFrom(const ProfileReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfileReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.ProfileReq";
  }
  protected:
  explicit ProfileReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ProfileReq_DataType DataType;
  static constexpr DataType DATAID_NONE =
    ProfileReq_DataType_DATAID_NONE;
  static constexpr DataType CPU_USAGE =
    ProfileReq_DataType_CPU_USAGE;
  static constexpr DataType CORE_FREQUENCY =
    ProfileReq_DataType_CORE_FREQUENCY;
  static constexpr DataType GPU_USAGE =
    ProfileReq_DataType_GPU_USAGE;
  static constexpr DataType GPU_FREQ =
    ProfileReq_DataType_GPU_FREQ;
  static constexpr DataType FPS =
    ProfileReq_DataType_FPS;
  static constexpr DataType NETWORK_USAGE =
    ProfileReq_DataType_NETWORK_USAGE;
  static constexpr DataType SCREEN_SHOT =
    ProfileReq_DataType_SCREEN_SHOT;
  static constexpr DataType MEMORY =
    ProfileReq_DataType_MEMORY;
  static constexpr DataType BATTERY =
    ProfileReq_DataType_BATTERY;
  static constexpr DataType CPU_TEMPERATURE =
    ProfileReq_DataType_CPU_TEMPERATURE;
  static constexpr DataType FRAME_TIME =
    ProfileReq_DataType_FRAME_TIME;
  static constexpr DataType ANDROID_MEMORY_DETAIL =
    ProfileReq_DataType_ANDROID_MEMORY_DETAIL;
  static constexpr DataType CORE_USAGE =
    ProfileReq_DataType_CORE_USAGE;
  static constexpr DataType CTX_SWITCH =
    ProfileReq_DataType_CTX_SWITCH;
  static constexpr DataType WAKEUP =
    ProfileReq_DataType_WAKEUP;
  static constexpr DataType IOS_GPU_USAGE =
    ProfileReq_DataType_IOS_GPU_USAGE;
  static constexpr DataType IOS_ENERGY_USAGE =
    ProfileReq_DataType_IOS_ENERGY_USAGE;
  static inline bool DataType_IsValid(int value) {
    return ProfileReq_DataType_IsValid(value);
  }
  static constexpr DataType DataType_MIN =
    ProfileReq_DataType_DataType_MIN;
  static constexpr DataType DataType_MAX =
    ProfileReq_DataType_DataType_MAX;
  static constexpr int DataType_ARRAYSIZE =
    ProfileReq_DataType_DataType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DataType_descriptor() {
    return ProfileReq_DataType_descriptor();
  }
  template<typename T>
  static inline const std::string& DataType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DataType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DataType_Name.");
    return ProfileReq_DataType_Name(enum_t_value);
  }
  static inline bool DataType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DataType* value) {
    return ProfileReq_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDataTypesFieldNumber = 2,
    kProfileAppFieldNumber = 3,
    kE2FieldNumber = 1,
    kIsUSBFieldNumber = 4,
  };
  // repeated .perfcat.ProfileReq.DataType dataTypes = 2;
  int datatypes_size() const;
  private:
  int _internal_datatypes_size() const;
  public:
  void clear_datatypes();
  private:
  ::perfcat::ProfileReq_DataType _internal_datatypes(int index) const;
  void _internal_add_datatypes(::perfcat::ProfileReq_DataType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_datatypes();
  public:
  ::perfcat::ProfileReq_DataType datatypes(int index) const;
  void set_datatypes(int index, ::perfcat::ProfileReq_DataType value);
  void add_datatypes(::perfcat::ProfileReq_DataType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& datatypes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_datatypes();

  // .perfcat.ProfileApp profileApp = 3;
  bool has_profileapp() const;
  private:
  bool _internal_has_profileapp() const;
  public:
  void clear_profileapp();
  const ::perfcat::ProfileApp& profileapp() const;
  ::perfcat::ProfileApp* release_profileapp();
  ::perfcat::ProfileApp* mutable_profileapp();
  void set_allocated_profileapp(::perfcat::ProfileApp* profileapp);
  private:
  const ::perfcat::ProfileApp& _internal_profileapp() const;
  ::perfcat::ProfileApp* _internal_mutable_profileapp();
  public:
  void unsafe_arena_set_allocated_profileapp(
      ::perfcat::ProfileApp* profileapp);
  ::perfcat::ProfileApp* unsafe_arena_release_profileapp();

  // int32 e2 = 1;
  void clear_e2();
  ::PROTOBUF_NAMESPACE_ID::int32 e2() const;
  void set_e2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_e2() const;
  void _internal_set_e2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isUSB = 4;
  void clear_isusb();
  bool isusb() const;
  void set_isusb(bool value);
  private:
  bool _internal_isusb() const;
  void _internal_set_isusb(bool value);
  public:

  // @@protoc_insertion_point(class_scope:perfcat.ProfileReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> datatypes_;
  mutable std::atomic<int> _datatypes_cached_byte_size_;
  ::perfcat::ProfileApp* profileapp_;
  ::PROTOBUF_NAMESPACE_ID::int32 e2_;
  bool isusb_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class ProfileApp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.ProfileApp) */ {
 public:
  inline ProfileApp() : ProfileApp(nullptr) {}
  virtual ~ProfileApp();

  ProfileApp(const ProfileApp& from);
  ProfileApp(ProfileApp&& from) noexcept
    : ProfileApp() {
    *this = ::std::move(from);
  }

  inline ProfileApp& operator=(const ProfileApp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfileApp& operator=(ProfileApp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfileApp& default_instance();

  enum TargetCase {
    kAppInfo = 1,
    kPidName = 2,
    TARGET_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfileApp* internal_default_instance() {
    return reinterpret_cast<const ProfileApp*>(
               &_ProfileApp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProfileApp& a, ProfileApp& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfileApp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfileApp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfileApp* New() const final {
    return CreateMaybeMessage<ProfileApp>(nullptr);
  }

  ProfileApp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfileApp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfileApp& from);
  void MergeFrom(const ProfileApp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfileApp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.ProfileApp";
  }
  protected:
  explicit ProfileApp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppInfoFieldNumber = 1,
    kPidNameFieldNumber = 2,
  };
  // .perfcat.ProfileAppInfo appInfo = 1;
  bool has_appinfo() const;
  private:
  bool _internal_has_appinfo() const;
  public:
  void clear_appinfo();
  const ::perfcat::ProfileAppInfo& appinfo() const;
  ::perfcat::ProfileAppInfo* release_appinfo();
  ::perfcat::ProfileAppInfo* mutable_appinfo();
  void set_allocated_appinfo(::perfcat::ProfileAppInfo* appinfo);
  private:
  const ::perfcat::ProfileAppInfo& _internal_appinfo() const;
  ::perfcat::ProfileAppInfo* _internal_mutable_appinfo();
  public:
  void unsafe_arena_set_allocated_appinfo(
      ::perfcat::ProfileAppInfo* appinfo);
  ::perfcat::ProfileAppInfo* unsafe_arena_release_appinfo();

  // .perfcat.ProfileAppPidName pidName = 2;
  bool has_pidname() const;
  private:
  bool _internal_has_pidname() const;
  public:
  void clear_pidname();
  const ::perfcat::ProfileAppPidName& pidname() const;
  ::perfcat::ProfileAppPidName* release_pidname();
  ::perfcat::ProfileAppPidName* mutable_pidname();
  void set_allocated_pidname(::perfcat::ProfileAppPidName* pidname);
  private:
  const ::perfcat::ProfileAppPidName& _internal_pidname() const;
  ::perfcat::ProfileAppPidName* _internal_mutable_pidname();
  public:
  void unsafe_arena_set_allocated_pidname(
      ::perfcat::ProfileAppPidName* pidname);
  ::perfcat::ProfileAppPidName* unsafe_arena_release_pidname();

  void clear_target();
  TargetCase target_case() const;
  // @@protoc_insertion_point(class_scope:perfcat.ProfileApp)
 private:
  class _Internal;
  void set_has_appinfo();
  void set_has_pidname();

  inline bool has_target() const;
  inline void clear_has_target();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TargetUnion {
    TargetUnion() {}
    ::perfcat::ProfileAppInfo* appinfo_;
    ::perfcat::ProfileAppPidName* pidname_;
  } target_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class ProfileAppPidName PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.ProfileAppPidName) */ {
 public:
  inline ProfileAppPidName() : ProfileAppPidName(nullptr) {}
  virtual ~ProfileAppPidName();

  ProfileAppPidName(const ProfileAppPidName& from);
  ProfileAppPidName(ProfileAppPidName&& from) noexcept
    : ProfileAppPidName() {
    *this = ::std::move(from);
  }

  inline ProfileAppPidName& operator=(const ProfileAppPidName& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfileAppPidName& operator=(ProfileAppPidName&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfileAppPidName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfileAppPidName* internal_default_instance() {
    return reinterpret_cast<const ProfileAppPidName*>(
               &_ProfileAppPidName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ProfileAppPidName& a, ProfileAppPidName& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfileAppPidName* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfileAppPidName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfileAppPidName* New() const final {
    return CreateMaybeMessage<ProfileAppPidName>(nullptr);
  }

  ProfileAppPidName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfileAppPidName>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfileAppPidName& from);
  void MergeFrom(const ProfileAppPidName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfileAppPidName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.ProfileAppPidName";
  }
  protected:
  explicit ProfileAppPidName(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPidFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 pid = 1;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perfcat.ProfileAppPidName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class ProfileAppInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.ProfileAppInfo) */ {
 public:
  inline ProfileAppInfo() : ProfileAppInfo(nullptr) {}
  virtual ~ProfileAppInfo();

  ProfileAppInfo(const ProfileAppInfo& from);
  ProfileAppInfo(ProfileAppInfo&& from) noexcept
    : ProfileAppInfo() {
    *this = ::std::move(from);
  }

  inline ProfileAppInfo& operator=(const ProfileAppInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfileAppInfo& operator=(ProfileAppInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfileAppInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfileAppInfo* internal_default_instance() {
    return reinterpret_cast<const ProfileAppInfo*>(
               &_ProfileAppInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ProfileAppInfo& a, ProfileAppInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfileAppInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfileAppInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfileAppInfo* New() const final {
    return CreateMaybeMessage<ProfileAppInfo>(nullptr);
  }

  ProfileAppInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfileAppInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfileAppInfo& from);
  void MergeFrom(const ProfileAppInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfileAppInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.ProfileAppInfo";
  }
  protected:
  explicit ProfileAppInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessNameFieldNumber = 1,
    kPackageNameFieldNumber = 3,
    kUserIdFieldNumber = 2,
  };
  // string processName = 1;
  void clear_processname();
  const std::string& processname() const;
  void set_processname(const std::string& value);
  void set_processname(std::string&& value);
  void set_processname(const char* value);
  void set_processname(const char* value, size_t size);
  std::string* mutable_processname();
  std::string* release_processname();
  void set_allocated_processname(std::string* processname);
  private:
  const std::string& _internal_processname() const;
  void _internal_set_processname(const std::string& value);
  std::string* _internal_mutable_processname();
  public:

  // string packageName = 3;
  void clear_packagename();
  const std::string& packagename() const;
  void set_packagename(const std::string& value);
  void set_packagename(std::string&& value);
  void set_packagename(const char* value);
  void set_packagename(const char* value, size_t size);
  std::string* mutable_packagename();
  std::string* release_packagename();
  void set_allocated_packagename(std::string* packagename);
  private:
  const std::string& _internal_packagename() const;
  void _internal_set_packagename(const std::string& value);
  std::string* _internal_mutable_packagename();
  public:

  // int32 userId = 2;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perfcat.ProfileAppInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr processname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr packagename_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class ProfileRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.ProfileRsp) */ {
 public:
  inline ProfileRsp() : ProfileRsp(nullptr) {}
  virtual ~ProfileRsp();

  ProfileRsp(const ProfileRsp& from);
  ProfileRsp(ProfileRsp&& from) noexcept
    : ProfileRsp() {
    *this = ::std::move(from);
  }

  inline ProfileRsp& operator=(const ProfileRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfileRsp& operator=(ProfileRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfileRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfileRsp* internal_default_instance() {
    return reinterpret_cast<const ProfileRsp*>(
               &_ProfileRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ProfileRsp& a, ProfileRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfileRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfileRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfileRsp* New() const final {
    return CreateMaybeMessage<ProfileRsp>(nullptr);
  }

  ProfileRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfileRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfileRsp& from);
  void MergeFrom(const ProfileRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfileRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.ProfileRsp";
  }
  protected:
  explicit ProfileRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kErrorCodeFieldNumber = 2,
    kSessionIdFieldNumber = 3,
  };
  // int64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 errorCode = 2;
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sessionId = 3;
  void clear_sessionid();
  ::PROTOBUF_NAMESPACE_ID::int32 sessionid() const;
  void set_sessionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sessionid() const;
  void _internal_set_sessionid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perfcat.ProfileRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode_;
  ::PROTOBUF_NAMESPACE_ID::int32 sessionid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class GetMemoryUsageReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.GetMemoryUsageReq) */ {
 public:
  inline GetMemoryUsageReq() : GetMemoryUsageReq(nullptr) {}
  virtual ~GetMemoryUsageReq();

  GetMemoryUsageReq(const GetMemoryUsageReq& from);
  GetMemoryUsageReq(GetMemoryUsageReq&& from) noexcept
    : GetMemoryUsageReq() {
    *this = ::std::move(from);
  }

  inline GetMemoryUsageReq& operator=(const GetMemoryUsageReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMemoryUsageReq& operator=(GetMemoryUsageReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMemoryUsageReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMemoryUsageReq* internal_default_instance() {
    return reinterpret_cast<const GetMemoryUsageReq*>(
               &_GetMemoryUsageReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetMemoryUsageReq& a, GetMemoryUsageReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMemoryUsageReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMemoryUsageReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMemoryUsageReq* New() const final {
    return CreateMaybeMessage<GetMemoryUsageReq>(nullptr);
  }

  GetMemoryUsageReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMemoryUsageReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMemoryUsageReq& from);
  void MergeFrom(const GetMemoryUsageReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMemoryUsageReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.GetMemoryUsageReq";
  }
  protected:
  explicit GetMemoryUsageReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnknowFieldNumber = 2,
    kPidFieldNumber = 1,
  };
  // int64 unknow = 2;
  void clear_unknow();
  ::PROTOBUF_NAMESPACE_ID::int64 unknow() const;
  void set_unknow(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_unknow() const;
  void _internal_set_unknow(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 pid = 1;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perfcat.GetMemoryUsageReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 unknow_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class GetMemoryUsageRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.GetMemoryUsageRsp) */ {
 public:
  inline GetMemoryUsageRsp() : GetMemoryUsageRsp(nullptr) {}
  virtual ~GetMemoryUsageRsp();

  GetMemoryUsageRsp(const GetMemoryUsageRsp& from);
  GetMemoryUsageRsp(GetMemoryUsageRsp&& from) noexcept
    : GetMemoryUsageRsp() {
    *this = ::std::move(from);
  }

  inline GetMemoryUsageRsp& operator=(const GetMemoryUsageRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMemoryUsageRsp& operator=(GetMemoryUsageRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMemoryUsageRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMemoryUsageRsp* internal_default_instance() {
    return reinterpret_cast<const GetMemoryUsageRsp*>(
               &_GetMemoryUsageRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetMemoryUsageRsp& a, GetMemoryUsageRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMemoryUsageRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMemoryUsageRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMemoryUsageRsp* New() const final {
    return CreateMaybeMessage<GetMemoryUsageRsp>(nullptr);
  }

  GetMemoryUsageRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMemoryUsageRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMemoryUsageRsp& from);
  void MergeFrom(const GetMemoryUsageRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMemoryUsageRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.GetMemoryUsageRsp";
  }
  protected:
  explicit GetMemoryUsageRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemoryFieldNumber = 1,
  };
  // .perfcat.Memory memory = 1;
  bool has_memory() const;
  private:
  bool _internal_has_memory() const;
  public:
  void clear_memory();
  const ::perfcat::Memory& memory() const;
  ::perfcat::Memory* release_memory();
  ::perfcat::Memory* mutable_memory();
  void set_allocated_memory(::perfcat::Memory* memory);
  private:
  const ::perfcat::Memory& _internal_memory() const;
  ::perfcat::Memory* _internal_mutable_memory();
  public:
  void unsafe_arena_set_allocated_memory(
      ::perfcat::Memory* memory);
  ::perfcat::Memory* unsafe_arena_release_memory();

  // @@protoc_insertion_point(class_scope:perfcat.GetMemoryUsageRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::perfcat::Memory* memory_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class StopProfileReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.StopProfileReq) */ {
 public:
  inline StopProfileReq() : StopProfileReq(nullptr) {}
  virtual ~StopProfileReq();

  StopProfileReq(const StopProfileReq& from);
  StopProfileReq(StopProfileReq&& from) noexcept
    : StopProfileReq() {
    *this = ::std::move(from);
  }

  inline StopProfileReq& operator=(const StopProfileReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopProfileReq& operator=(StopProfileReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopProfileReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopProfileReq* internal_default_instance() {
    return reinterpret_cast<const StopProfileReq*>(
               &_StopProfileReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(StopProfileReq& a, StopProfileReq& b) {
    a.Swap(&b);
  }
  inline void Swap(StopProfileReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopProfileReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopProfileReq* New() const final {
    return CreateMaybeMessage<StopProfileReq>(nullptr);
  }

  StopProfileReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopProfileReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopProfileReq& from);
  void MergeFrom(const StopProfileReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopProfileReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.StopProfileReq";
  }
  protected:
  explicit StopProfileReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:perfcat.StopProfileReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class StopProfileRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.StopProfileRsp) */ {
 public:
  inline StopProfileRsp() : StopProfileRsp(nullptr) {}
  virtual ~StopProfileRsp();

  StopProfileRsp(const StopProfileRsp& from);
  StopProfileRsp(StopProfileRsp&& from) noexcept
    : StopProfileRsp() {
    *this = ::std::move(from);
  }

  inline StopProfileRsp& operator=(const StopProfileRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopProfileRsp& operator=(StopProfileRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopProfileRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopProfileRsp* internal_default_instance() {
    return reinterpret_cast<const StopProfileRsp*>(
               &_StopProfileRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(StopProfileRsp& a, StopProfileRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(StopProfileRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopProfileRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopProfileRsp* New() const final {
    return CreateMaybeMessage<StopProfileRsp>(nullptr);
  }

  StopProfileRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopProfileRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopProfileRsp& from);
  void MergeFrom(const StopProfileRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopProfileRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.StopProfileRsp";
  }
  protected:
  explicit StopProfileRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:perfcat.StopProfileRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class CheckDeviceReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.CheckDeviceReq) */ {
 public:
  inline CheckDeviceReq() : CheckDeviceReq(nullptr) {}
  virtual ~CheckDeviceReq();

  CheckDeviceReq(const CheckDeviceReq& from);
  CheckDeviceReq(CheckDeviceReq&& from) noexcept
    : CheckDeviceReq() {
    *this = ::std::move(from);
  }

  inline CheckDeviceReq& operator=(const CheckDeviceReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckDeviceReq& operator=(CheckDeviceReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckDeviceReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckDeviceReq* internal_default_instance() {
    return reinterpret_cast<const CheckDeviceReq*>(
               &_CheckDeviceReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CheckDeviceReq& a, CheckDeviceReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckDeviceReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckDeviceReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckDeviceReq* New() const final {
    return CreateMaybeMessage<CheckDeviceReq>(nullptr);
  }

  CheckDeviceReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckDeviceReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckDeviceReq& from);
  void MergeFrom(const CheckDeviceReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckDeviceReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.CheckDeviceReq";
  }
  protected:
  explicit CheckDeviceReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:perfcat.CheckDeviceReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class CheckDeviceRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.CheckDeviceRsp) */ {
 public:
  inline CheckDeviceRsp() : CheckDeviceRsp(nullptr) {}
  virtual ~CheckDeviceRsp();

  CheckDeviceRsp(const CheckDeviceRsp& from);
  CheckDeviceRsp(CheckDeviceRsp&& from) noexcept
    : CheckDeviceRsp() {
    *this = ::std::move(from);
  }

  inline CheckDeviceRsp& operator=(const CheckDeviceRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckDeviceRsp& operator=(CheckDeviceRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckDeviceRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckDeviceRsp* internal_default_instance() {
    return reinterpret_cast<const CheckDeviceRsp*>(
               &_CheckDeviceRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CheckDeviceRsp& a, CheckDeviceRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckDeviceRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckDeviceRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckDeviceRsp* New() const final {
    return CreateMaybeMessage<CheckDeviceRsp>(nullptr);
  }

  CheckDeviceRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckDeviceRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckDeviceRsp& from);
  void MergeFrom(const CheckDeviceRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckDeviceRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.CheckDeviceRsp";
  }
  protected:
  explicit CheckDeviceRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kE2FieldNumber = 1,
    kGpuFreqFieldNumber = 2,
    kGpuUsageFieldNumber = 3,
    kSw0FieldNumber = 4,
    kCpuTemperatureFieldNumber = 5,
  };
  // bool e2 = 1;
  void clear_e2();
  bool e2() const;
  void set_e2(bool value);
  private:
  bool _internal_e2() const;
  void _internal_set_e2(bool value);
  public:

  // bool gpuFreq = 2;
  void clear_gpufreq();
  bool gpufreq() const;
  void set_gpufreq(bool value);
  private:
  bool _internal_gpufreq() const;
  void _internal_set_gpufreq(bool value);
  public:

  // bool gpuUsage = 3;
  void clear_gpuusage();
  bool gpuusage() const;
  void set_gpuusage(bool value);
  private:
  bool _internal_gpuusage() const;
  void _internal_set_gpuusage(bool value);
  public:

  // bool sw0 = 4;
  void clear_sw0();
  bool sw0() const;
  void set_sw0(bool value);
  private:
  bool _internal_sw0() const;
  void _internal_set_sw0(bool value);
  public:

  // bool cpuTemperature = 5;
  void clear_cputemperature();
  bool cputemperature() const;
  void set_cputemperature(bool value);
  private:
  bool _internal_cputemperature() const;
  void _internal_set_cputemperature(bool value);
  public:

  // @@protoc_insertion_point(class_scope:perfcat.CheckDeviceRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool e2_;
  bool gpufreq_;
  bool gpuusage_;
  bool sw0_;
  bool cputemperature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class ProfileNtf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.ProfileNtf) */ {
 public:
  inline ProfileNtf() : ProfileNtf(nullptr) {}
  virtual ~ProfileNtf();

  ProfileNtf(const ProfileNtf& from);
  ProfileNtf(ProfileNtf&& from) noexcept
    : ProfileNtf() {
    *this = ::std::move(from);
  }

  inline ProfileNtf& operator=(const ProfileNtf& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfileNtf& operator=(ProfileNtf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfileNtf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfileNtf* internal_default_instance() {
    return reinterpret_cast<const ProfileNtf*>(
               &_ProfileNtf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ProfileNtf& a, ProfileNtf& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfileNtf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfileNtf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfileNtf* New() const final {
    return CreateMaybeMessage<ProfileNtf>(nullptr);
  }

  ProfileNtf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfileNtf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfileNtf& from);
  void MergeFrom(const ProfileNtf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfileNtf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.ProfileNtf";
  }
  protected:
  explicit ProfileNtf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpuUsageFieldNumber = 2,
    kCpuFreqFieldNumber = 3,
    kGpuUsageFieldNumber = 4,
    kGpuFreqFieldNumber = 5,
    kFpsFieldNumber = 6,
    kScreenshotFieldNumber = 9,
    kMemoryFieldNumber = 10,
    kNetworkFieldNumber = 11,
    kPowerFieldNumber = 12,
    kTempFieldNumber = 14,
    kFrameTimeFieldNumber = 15,
    kCoreUsageFieldNumber = 16,
    kVirtualMemoryFieldNumber = 17,
    kTimestampFieldNumber = 13,
    kIndexFieldNumber = 1,
  };
  // .perfcat.CpuUsage cpuUsage = 2;
  bool has_cpuusage() const;
  private:
  bool _internal_has_cpuusage() const;
  public:
  void clear_cpuusage();
  const ::perfcat::CpuUsage& cpuusage() const;
  ::perfcat::CpuUsage* release_cpuusage();
  ::perfcat::CpuUsage* mutable_cpuusage();
  void set_allocated_cpuusage(::perfcat::CpuUsage* cpuusage);
  private:
  const ::perfcat::CpuUsage& _internal_cpuusage() const;
  ::perfcat::CpuUsage* _internal_mutable_cpuusage();
  public:
  void unsafe_arena_set_allocated_cpuusage(
      ::perfcat::CpuUsage* cpuusage);
  ::perfcat::CpuUsage* unsafe_arena_release_cpuusage();

  // .perfcat.CpuFreq cpuFreq = 3;
  bool has_cpufreq() const;
  private:
  bool _internal_has_cpufreq() const;
  public:
  void clear_cpufreq();
  const ::perfcat::CpuFreq& cpufreq() const;
  ::perfcat::CpuFreq* release_cpufreq();
  ::perfcat::CpuFreq* mutable_cpufreq();
  void set_allocated_cpufreq(::perfcat::CpuFreq* cpufreq);
  private:
  const ::perfcat::CpuFreq& _internal_cpufreq() const;
  ::perfcat::CpuFreq* _internal_mutable_cpufreq();
  public:
  void unsafe_arena_set_allocated_cpufreq(
      ::perfcat::CpuFreq* cpufreq);
  ::perfcat::CpuFreq* unsafe_arena_release_cpufreq();

  // .perfcat.GpuUsage gpuUsage = 4;
  bool has_gpuusage() const;
  private:
  bool _internal_has_gpuusage() const;
  public:
  void clear_gpuusage();
  const ::perfcat::GpuUsage& gpuusage() const;
  ::perfcat::GpuUsage* release_gpuusage();
  ::perfcat::GpuUsage* mutable_gpuusage();
  void set_allocated_gpuusage(::perfcat::GpuUsage* gpuusage);
  private:
  const ::perfcat::GpuUsage& _internal_gpuusage() const;
  ::perfcat::GpuUsage* _internal_mutable_gpuusage();
  public:
  void unsafe_arena_set_allocated_gpuusage(
      ::perfcat::GpuUsage* gpuusage);
  ::perfcat::GpuUsage* unsafe_arena_release_gpuusage();

  // .perfcat.GpuFreq gpuFreq = 5;
  bool has_gpufreq() const;
  private:
  bool _internal_has_gpufreq() const;
  public:
  void clear_gpufreq();
  const ::perfcat::GpuFreq& gpufreq() const;
  ::perfcat::GpuFreq* release_gpufreq();
  ::perfcat::GpuFreq* mutable_gpufreq();
  void set_allocated_gpufreq(::perfcat::GpuFreq* gpufreq);
  private:
  const ::perfcat::GpuFreq& _internal_gpufreq() const;
  ::perfcat::GpuFreq* _internal_mutable_gpufreq();
  public:
  void unsafe_arena_set_allocated_gpufreq(
      ::perfcat::GpuFreq* gpufreq);
  ::perfcat::GpuFreq* unsafe_arena_release_gpufreq();

  // .perfcat.FPS fps = 6;
  bool has_fps() const;
  private:
  bool _internal_has_fps() const;
  public:
  void clear_fps();
  const ::perfcat::FPS& fps() const;
  ::perfcat::FPS* release_fps();
  ::perfcat::FPS* mutable_fps();
  void set_allocated_fps(::perfcat::FPS* fps);
  private:
  const ::perfcat::FPS& _internal_fps() const;
  ::perfcat::FPS* _internal_mutable_fps();
  public:
  void unsafe_arena_set_allocated_fps(
      ::perfcat::FPS* fps);
  ::perfcat::FPS* unsafe_arena_release_fps();

  // .perfcat.Screenshot screenshot = 9;
  bool has_screenshot() const;
  private:
  bool _internal_has_screenshot() const;
  public:
  void clear_screenshot();
  const ::perfcat::Screenshot& screenshot() const;
  ::perfcat::Screenshot* release_screenshot();
  ::perfcat::Screenshot* mutable_screenshot();
  void set_allocated_screenshot(::perfcat::Screenshot* screenshot);
  private:
  const ::perfcat::Screenshot& _internal_screenshot() const;
  ::perfcat::Screenshot* _internal_mutable_screenshot();
  public:
  void unsafe_arena_set_allocated_screenshot(
      ::perfcat::Screenshot* screenshot);
  ::perfcat::Screenshot* unsafe_arena_release_screenshot();

  // .perfcat.Memory memory = 10;
  bool has_memory() const;
  private:
  bool _internal_has_memory() const;
  public:
  void clear_memory();
  const ::perfcat::Memory& memory() const;
  ::perfcat::Memory* release_memory();
  ::perfcat::Memory* mutable_memory();
  void set_allocated_memory(::perfcat::Memory* memory);
  private:
  const ::perfcat::Memory& _internal_memory() const;
  ::perfcat::Memory* _internal_mutable_memory();
  public:
  void unsafe_arena_set_allocated_memory(
      ::perfcat::Memory* memory);
  ::perfcat::Memory* unsafe_arena_release_memory();

  // .perfcat.Network network = 11;
  bool has_network() const;
  private:
  bool _internal_has_network() const;
  public:
  void clear_network();
  const ::perfcat::Network& network() const;
  ::perfcat::Network* release_network();
  ::perfcat::Network* mutable_network();
  void set_allocated_network(::perfcat::Network* network);
  private:
  const ::perfcat::Network& _internal_network() const;
  ::perfcat::Network* _internal_mutable_network();
  public:
  void unsafe_arena_set_allocated_network(
      ::perfcat::Network* network);
  ::perfcat::Network* unsafe_arena_release_network();

  // .perfcat.Power power = 12;
  bool has_power() const;
  private:
  bool _internal_has_power() const;
  public:
  void clear_power();
  const ::perfcat::Power& power() const;
  ::perfcat::Power* release_power();
  ::perfcat::Power* mutable_power();
  void set_allocated_power(::perfcat::Power* power);
  private:
  const ::perfcat::Power& _internal_power() const;
  ::perfcat::Power* _internal_mutable_power();
  public:
  void unsafe_arena_set_allocated_power(
      ::perfcat::Power* power);
  ::perfcat::Power* unsafe_arena_release_power();

  // .perfcat.Temp temp = 14;
  bool has_temp() const;
  private:
  bool _internal_has_temp() const;
  public:
  void clear_temp();
  const ::perfcat::Temp& temp() const;
  ::perfcat::Temp* release_temp();
  ::perfcat::Temp* mutable_temp();
  void set_allocated_temp(::perfcat::Temp* temp);
  private:
  const ::perfcat::Temp& _internal_temp() const;
  ::perfcat::Temp* _internal_mutable_temp();
  public:
  void unsafe_arena_set_allocated_temp(
      ::perfcat::Temp* temp);
  ::perfcat::Temp* unsafe_arena_release_temp();

  // .perfcat.FrameTime frameTime = 15;
  bool has_frametime() const;
  private:
  bool _internal_has_frametime() const;
  public:
  void clear_frametime();
  const ::perfcat::FrameTime& frametime() const;
  ::perfcat::FrameTime* release_frametime();
  ::perfcat::FrameTime* mutable_frametime();
  void set_allocated_frametime(::perfcat::FrameTime* frametime);
  private:
  const ::perfcat::FrameTime& _internal_frametime() const;
  ::perfcat::FrameTime* _internal_mutable_frametime();
  public:
  void unsafe_arena_set_allocated_frametime(
      ::perfcat::FrameTime* frametime);
  ::perfcat::FrameTime* unsafe_arena_release_frametime();

  // .perfcat.CoreUsage coreUsage = 16;
  bool has_coreusage() const;
  private:
  bool _internal_has_coreusage() const;
  public:
  void clear_coreusage();
  const ::perfcat::CoreUsage& coreusage() const;
  ::perfcat::CoreUsage* release_coreusage();
  ::perfcat::CoreUsage* mutable_coreusage();
  void set_allocated_coreusage(::perfcat::CoreUsage* coreusage);
  private:
  const ::perfcat::CoreUsage& _internal_coreusage() const;
  ::perfcat::CoreUsage* _internal_mutable_coreusage();
  public:
  void unsafe_arena_set_allocated_coreusage(
      ::perfcat::CoreUsage* coreusage);
  ::perfcat::CoreUsage* unsafe_arena_release_coreusage();

  // .perfcat.VirtualMemory virtualMemory = 17;
  bool has_virtualmemory() const;
  private:
  bool _internal_has_virtualmemory() const;
  public:
  void clear_virtualmemory();
  const ::perfcat::VirtualMemory& virtualmemory() const;
  ::perfcat::VirtualMemory* release_virtualmemory();
  ::perfcat::VirtualMemory* mutable_virtualmemory();
  void set_allocated_virtualmemory(::perfcat::VirtualMemory* virtualmemory);
  private:
  const ::perfcat::VirtualMemory& _internal_virtualmemory() const;
  ::perfcat::VirtualMemory* _internal_mutable_virtualmemory();
  public:
  void unsafe_arena_set_allocated_virtualmemory(
      ::perfcat::VirtualMemory* virtualmemory);
  ::perfcat::VirtualMemory* unsafe_arena_release_virtualmemory();

  // int64 timestamp = 13;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perfcat.ProfileNtf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::perfcat::CpuUsage* cpuusage_;
  ::perfcat::CpuFreq* cpufreq_;
  ::perfcat::GpuUsage* gpuusage_;
  ::perfcat::GpuFreq* gpufreq_;
  ::perfcat::FPS* fps_;
  ::perfcat::Screenshot* screenshot_;
  ::perfcat::Memory* memory_;
  ::perfcat::Network* network_;
  ::perfcat::Power* power_;
  ::perfcat::Temp* temp_;
  ::perfcat::FrameTime* frametime_;
  ::perfcat::CoreUsage* coreusage_;
  ::perfcat::VirtualMemory* virtualmemory_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class Screenshot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.Screenshot) */ {
 public:
  inline Screenshot() : Screenshot(nullptr) {}
  virtual ~Screenshot();

  Screenshot(const Screenshot& from);
  Screenshot(Screenshot&& from) noexcept
    : Screenshot() {
    *this = ::std::move(from);
  }

  inline Screenshot& operator=(const Screenshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline Screenshot& operator=(Screenshot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Screenshot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Screenshot* internal_default_instance() {
    return reinterpret_cast<const Screenshot*>(
               &_Screenshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Screenshot& a, Screenshot& b) {
    a.Swap(&b);
  }
  inline void Swap(Screenshot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Screenshot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Screenshot* New() const final {
    return CreateMaybeMessage<Screenshot>(nullptr);
  }

  Screenshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Screenshot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Screenshot& from);
  void MergeFrom(const Screenshot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Screenshot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.Screenshot";
  }
  protected:
  explicit Screenshot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Screenshot_Orientation Orientation;
  static constexpr Orientation none =
    Screenshot_Orientation_none;
  static constexpr Orientation landscape_left =
    Screenshot_Orientation_landscape_left;
  static constexpr Orientation landscape_right =
    Screenshot_Orientation_landscape_right;
  static constexpr Orientation portrait =
    Screenshot_Orientation_portrait;
  static inline bool Orientation_IsValid(int value) {
    return Screenshot_Orientation_IsValid(value);
  }
  static constexpr Orientation Orientation_MIN =
    Screenshot_Orientation_Orientation_MIN;
  static constexpr Orientation Orientation_MAX =
    Screenshot_Orientation_Orientation_MAX;
  static constexpr int Orientation_ARRAYSIZE =
    Screenshot_Orientation_Orientation_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Orientation_descriptor() {
    return Screenshot_Orientation_descriptor();
  }
  template<typename T>
  static inline const std::string& Orientation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Orientation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Orientation_Name.");
    return Screenshot_Orientation_Name(enum_t_value);
  }
  static inline bool Orientation_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Orientation* value) {
    return Screenshot_Orientation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kOrientationFieldNumber = 3,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .perfcat.Screenshot.Orientation orientation = 3;
  void clear_orientation();
  ::perfcat::Screenshot_Orientation orientation() const;
  void set_orientation(::perfcat::Screenshot_Orientation value);
  private:
  ::perfcat::Screenshot_Orientation _internal_orientation() const;
  void _internal_set_orientation(::perfcat::Screenshot_Orientation value);
  public:

  // @@protoc_insertion_point(class_scope:perfcat.Screenshot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int orientation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class VirtualMemory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.VirtualMemory) */ {
 public:
  inline VirtualMemory() : VirtualMemory(nullptr) {}
  virtual ~VirtualMemory();

  VirtualMemory(const VirtualMemory& from);
  VirtualMemory(VirtualMemory&& from) noexcept
    : VirtualMemory() {
    *this = ::std::move(from);
  }

  inline VirtualMemory& operator=(const VirtualMemory& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtualMemory& operator=(VirtualMemory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VirtualMemory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VirtualMemory* internal_default_instance() {
    return reinterpret_cast<const VirtualMemory*>(
               &_VirtualMemory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(VirtualMemory& a, VirtualMemory& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtualMemory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtualMemory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VirtualMemory* New() const final {
    return CreateMaybeMessage<VirtualMemory>(nullptr);
  }

  VirtualMemory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VirtualMemory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VirtualMemory& from);
  void MergeFrom(const VirtualMemory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtualMemory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.VirtualMemory";
  }
  protected:
  explicit VirtualMemory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtualMemoryFieldNumber = 1,
  };
  // int32 virtualMemory = 1;
  void clear_virtualmemory();
  ::PROTOBUF_NAMESPACE_ID::int32 virtualmemory() const;
  void set_virtualmemory(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_virtualmemory() const;
  void _internal_set_virtualmemory(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perfcat.VirtualMemory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 virtualmemory_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class Power PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.Power) */ {
 public:
  inline Power() : Power(nullptr) {}
  virtual ~Power();

  Power(const Power& from);
  Power(Power&& from) noexcept
    : Power() {
    *this = ::std::move(from);
  }

  inline Power& operator=(const Power& from) {
    CopyFrom(from);
    return *this;
  }
  inline Power& operator=(Power&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Power& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Power* internal_default_instance() {
    return reinterpret_cast<const Power*>(
               &_Power_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Power& a, Power& b) {
    a.Swap(&b);
  }
  inline void Swap(Power* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Power* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Power* New() const final {
    return CreateMaybeMessage<Power>(nullptr);
  }

  Power* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Power>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Power& from);
  void MergeFrom(const Power& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Power* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.Power";
  }
  protected:
  explicit Power(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentFieldNumber = 1,
    kVoltageFieldNumber = 2,
  };
  // int32 current = 1;
  void clear_current();
  ::PROTOBUF_NAMESPACE_ID::int32 current() const;
  void set_current(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_current() const;
  void _internal_set_current(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 voltage = 2;
  void clear_voltage();
  ::PROTOBUF_NAMESPACE_ID::int32 voltage() const;
  void set_voltage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_voltage() const;
  void _internal_set_voltage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perfcat.Power)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 current_;
  ::PROTOBUF_NAMESPACE_ID::int32 voltage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class Temp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.Temp) */ {
 public:
  inline Temp() : Temp(nullptr) {}
  virtual ~Temp();

  Temp(const Temp& from);
  Temp(Temp&& from) noexcept
    : Temp() {
    *this = ::std::move(from);
  }

  inline Temp& operator=(const Temp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Temp& operator=(Temp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Temp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Temp* internal_default_instance() {
    return reinterpret_cast<const Temp*>(
               &_Temp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Temp& a, Temp& b) {
    a.Swap(&b);
  }
  inline void Swap(Temp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Temp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Temp* New() const final {
    return CreateMaybeMessage<Temp>(nullptr);
  }

  Temp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Temp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Temp& from);
  void MergeFrom(const Temp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Temp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.Temp";
  }
  protected:
  explicit Temp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTempFieldNumber = 1,
  };
  // int32 temp = 1;
  void clear_temp();
  ::PROTOBUF_NAMESPACE_ID::int32 temp() const;
  void set_temp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_temp() const;
  void _internal_set_temp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perfcat.Temp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 temp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class CpuUsage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.CpuUsage) */ {
 public:
  inline CpuUsage() : CpuUsage(nullptr) {}
  virtual ~CpuUsage();

  CpuUsage(const CpuUsage& from);
  CpuUsage(CpuUsage&& from) noexcept
    : CpuUsage() {
    *this = ::std::move(from);
  }

  inline CpuUsage& operator=(const CpuUsage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuUsage& operator=(CpuUsage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CpuUsage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CpuUsage* internal_default_instance() {
    return reinterpret_cast<const CpuUsage*>(
               &_CpuUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CpuUsage& a, CpuUsage& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuUsage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CpuUsage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CpuUsage* New() const final {
    return CreateMaybeMessage<CpuUsage>(nullptr);
  }

  CpuUsage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CpuUsage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CpuUsage& from);
  void MergeFrom(const CpuUsage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CpuUsage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.CpuUsage";
  }
  protected:
  explicit CpuUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppUsageFieldNumber = 1,
    kTotalUsageFieldNumber = 2,
  };
  // float appUsage = 1;
  void clear_appusage();
  float appusage() const;
  void set_appusage(float value);
  private:
  float _internal_appusage() const;
  void _internal_set_appusage(float value);
  public:

  // float totalUsage = 2;
  void clear_totalusage();
  float totalusage() const;
  void set_totalusage(float value);
  private:
  float _internal_totalusage() const;
  void _internal_set_totalusage(float value);
  public:

  // @@protoc_insertion_point(class_scope:perfcat.CpuUsage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float appusage_;
  float totalusage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class FPS PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.FPS) */ {
 public:
  inline FPS() : FPS(nullptr) {}
  virtual ~FPS();

  FPS(const FPS& from);
  FPS(FPS&& from) noexcept
    : FPS() {
    *this = ::std::move(from);
  }

  inline FPS& operator=(const FPS& from) {
    CopyFrom(from);
    return *this;
  }
  inline FPS& operator=(FPS&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FPS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FPS* internal_default_instance() {
    return reinterpret_cast<const FPS*>(
               &_FPS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(FPS& a, FPS& b) {
    a.Swap(&b);
  }
  inline void Swap(FPS* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FPS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FPS* New() const final {
    return CreateMaybeMessage<FPS>(nullptr);
  }

  FPS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FPS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FPS& from);
  void MergeFrom(const FPS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FPS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.FPS";
  }
  protected:
  explicit FPS(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFpsFieldNumber = 1,
    kJankFieldNumber = 3,
    kBigJankFieldNumber = 4,
  };
  // float fps = 1;
  void clear_fps();
  float fps() const;
  void set_fps(float value);
  private:
  float _internal_fps() const;
  void _internal_set_fps(float value);
  public:

  // int32 jank = 3;
  void clear_jank();
  ::PROTOBUF_NAMESPACE_ID::int32 jank() const;
  void set_jank(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_jank() const;
  void _internal_set_jank(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bigJank = 4;
  void clear_bigjank();
  ::PROTOBUF_NAMESPACE_ID::int32 bigjank() const;
  void set_bigjank(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bigjank() const;
  void _internal_set_bigjank(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perfcat.FPS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float fps_;
  ::PROTOBUF_NAMESPACE_ID::int32 jank_;
  ::PROTOBUF_NAMESPACE_ID::int32 bigjank_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class CoreUsage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.CoreUsage) */ {
 public:
  inline CoreUsage() : CoreUsage(nullptr) {}
  virtual ~CoreUsage();

  CoreUsage(const CoreUsage& from);
  CoreUsage(CoreUsage&& from) noexcept
    : CoreUsage() {
    *this = ::std::move(from);
  }

  inline CoreUsage& operator=(const CoreUsage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CoreUsage& operator=(CoreUsage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CoreUsage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CoreUsage* internal_default_instance() {
    return reinterpret_cast<const CoreUsage*>(
               &_CoreUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CoreUsage& a, CoreUsage& b) {
    a.Swap(&b);
  }
  inline void Swap(CoreUsage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CoreUsage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CoreUsage* New() const final {
    return CreateMaybeMessage<CoreUsage>(nullptr);
  }

  CoreUsage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CoreUsage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CoreUsage& from);
  void MergeFrom(const CoreUsage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CoreUsage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.CoreUsage";
  }
  protected:
  explicit CoreUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoreUsageFieldNumber = 1,
  };
  // repeated float coreUsage = 1;
  int coreusage_size() const;
  private:
  int _internal_coreusage_size() const;
  public:
  void clear_coreusage();
  private:
  float _internal_coreusage(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_coreusage() const;
  void _internal_add_coreusage(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_coreusage();
  public:
  float coreusage(int index) const;
  void set_coreusage(int index, float value);
  void add_coreusage(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      coreusage() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_coreusage();

  // @@protoc_insertion_point(class_scope:perfcat.CoreUsage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > coreusage_;
  mutable std::atomic<int> _coreusage_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class FrameTime PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.FrameTime) */ {
 public:
  inline FrameTime() : FrameTime(nullptr) {}
  virtual ~FrameTime();

  FrameTime(const FrameTime& from);
  FrameTime(FrameTime&& from) noexcept
    : FrameTime() {
    *this = ::std::move(from);
  }

  inline FrameTime& operator=(const FrameTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameTime& operator=(FrameTime&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrameTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameTime* internal_default_instance() {
    return reinterpret_cast<const FrameTime*>(
               &_FrameTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(FrameTime& a, FrameTime& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameTime* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrameTime* New() const final {
    return CreateMaybeMessage<FrameTime>(nullptr);
  }

  FrameTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrameTime>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrameTime& from);
  void MergeFrom(const FrameTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.FrameTime";
  }
  protected:
  explicit FrameTime(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameTimeFieldNumber = 1,
  };
  // repeated int64 frameTime = 1;
  int frametime_size() const;
  private:
  int _internal_frametime_size() const;
  public:
  void clear_frametime();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_frametime(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_frametime() const;
  void _internal_add_frametime(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_frametime();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 frametime(int index) const;
  void set_frametime(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_frametime(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      frametime() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_frametime();

  // @@protoc_insertion_point(class_scope:perfcat.FrameTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > frametime_;
  mutable std::atomic<int> _frametime_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class Network PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.Network) */ {
 public:
  inline Network() : Network(nullptr) {}
  virtual ~Network();

  Network(const Network& from);
  Network(Network&& from) noexcept
    : Network() {
    *this = ::std::move(from);
  }

  inline Network& operator=(const Network& from) {
    CopyFrom(from);
    return *this;
  }
  inline Network& operator=(Network&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Network& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Network* internal_default_instance() {
    return reinterpret_cast<const Network*>(
               &_Network_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Network& a, Network& b) {
    a.Swap(&b);
  }
  inline void Swap(Network* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Network* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Network* New() const final {
    return CreateMaybeMessage<Network>(nullptr);
  }

  Network* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Network>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Network& from);
  void MergeFrom(const Network& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Network* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.Network";
  }
  protected:
  explicit Network(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUploadFieldNumber = 1,
    kDownloadFieldNumber = 2,
  };
  // int32 upload = 1;
  void clear_upload();
  ::PROTOBUF_NAMESPACE_ID::int32 upload() const;
  void set_upload(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_upload() const;
  void _internal_set_upload(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 download = 2;
  void clear_download();
  ::PROTOBUF_NAMESPACE_ID::int32 download() const;
  void set_download(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_download() const;
  void _internal_set_download(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perfcat.Network)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 upload_;
  ::PROTOBUF_NAMESPACE_ID::int32 download_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class Memory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.Memory) */ {
 public:
  inline Memory() : Memory(nullptr) {}
  virtual ~Memory();

  Memory(const Memory& from);
  Memory(Memory&& from) noexcept
    : Memory() {
    *this = ::std::move(from);
  }

  inline Memory& operator=(const Memory& from) {
    CopyFrom(from);
    return *this;
  }
  inline Memory& operator=(Memory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Memory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Memory* internal_default_instance() {
    return reinterpret_cast<const Memory*>(
               &_Memory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Memory& a, Memory& b) {
    a.Swap(&b);
  }
  inline void Swap(Memory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Memory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Memory* New() const final {
    return CreateMaybeMessage<Memory>(nullptr);
  }

  Memory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Memory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Memory& from);
  void MergeFrom(const Memory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Memory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.Memory";
  }
  protected:
  explicit Memory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemoryDetailFieldNumber = 5,
    kPssFieldNumber = 1,
    kSwapFieldNumber = 2,
    kVirtualMemoryFieldNumber = 3,
  };
  // .perfcat.MemoryDetail memoryDetail = 5;
  bool has_memorydetail() const;
  private:
  bool _internal_has_memorydetail() const;
  public:
  void clear_memorydetail();
  const ::perfcat::MemoryDetail& memorydetail() const;
  ::perfcat::MemoryDetail* release_memorydetail();
  ::perfcat::MemoryDetail* mutable_memorydetail();
  void set_allocated_memorydetail(::perfcat::MemoryDetail* memorydetail);
  private:
  const ::perfcat::MemoryDetail& _internal_memorydetail() const;
  ::perfcat::MemoryDetail* _internal_mutable_memorydetail();
  public:
  void unsafe_arena_set_allocated_memorydetail(
      ::perfcat::MemoryDetail* memorydetail);
  ::perfcat::MemoryDetail* unsafe_arena_release_memorydetail();

  // int32 pss = 1;
  void clear_pss();
  ::PROTOBUF_NAMESPACE_ID::int32 pss() const;
  void set_pss(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pss() const;
  void _internal_set_pss(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 swap = 2;
  void clear_swap();
  ::PROTOBUF_NAMESPACE_ID::int32 swap() const;
  void set_swap(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_swap() const;
  void _internal_set_swap(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 virtualMemory = 3;
  void clear_virtualmemory();
  ::PROTOBUF_NAMESPACE_ID::int32 virtualmemory() const;
  void set_virtualmemory(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_virtualmemory() const;
  void _internal_set_virtualmemory(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perfcat.Memory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::perfcat::MemoryDetail* memorydetail_;
  ::PROTOBUF_NAMESPACE_ID::int32 pss_;
  ::PROTOBUF_NAMESPACE_ID::int32 swap_;
  ::PROTOBUF_NAMESPACE_ID::int32 virtualmemory_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class MemoryDetail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.MemoryDetail) */ {
 public:
  inline MemoryDetail() : MemoryDetail(nullptr) {}
  virtual ~MemoryDetail();

  MemoryDetail(const MemoryDetail& from);
  MemoryDetail(MemoryDetail&& from) noexcept
    : MemoryDetail() {
    *this = ::std::move(from);
  }

  inline MemoryDetail& operator=(const MemoryDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryDetail& operator=(MemoryDetail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemoryDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemoryDetail* internal_default_instance() {
    return reinterpret_cast<const MemoryDetail*>(
               &_MemoryDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(MemoryDetail& a, MemoryDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryDetail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemoryDetail* New() const final {
    return CreateMaybeMessage<MemoryDetail>(nullptr);
  }

  MemoryDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemoryDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemoryDetail& from);
  void MergeFrom(const MemoryDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.MemoryDetail";
  }
  protected:
  explicit MemoryDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGfxFieldNumber = 1,
    kGlFieldNumber = 2,
    kNativePssFieldNumber = 3,
    kUnknownFieldNumber = 4,
  };
  // int32 gfx = 1;
  void clear_gfx();
  ::PROTOBUF_NAMESPACE_ID::int32 gfx() const;
  void set_gfx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gfx() const;
  void _internal_set_gfx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gl = 2;
  void clear_gl();
  ::PROTOBUF_NAMESPACE_ID::int32 gl() const;
  void set_gl(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gl() const;
  void _internal_set_gl(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nativePss = 3;
  void clear_nativepss();
  ::PROTOBUF_NAMESPACE_ID::int32 nativepss() const;
  void set_nativepss(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nativepss() const;
  void _internal_set_nativepss(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 unknown = 4;
  void clear_unknown();
  ::PROTOBUF_NAMESPACE_ID::int32 unknown() const;
  void set_unknown(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_unknown() const;
  void _internal_set_unknown(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perfcat.MemoryDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 gfx_;
  ::PROTOBUF_NAMESPACE_ID::int32 gl_;
  ::PROTOBUF_NAMESPACE_ID::int32 nativepss_;
  ::PROTOBUF_NAMESPACE_ID::int32 unknown_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class GpuFreq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.GpuFreq) */ {
 public:
  inline GpuFreq() : GpuFreq(nullptr) {}
  virtual ~GpuFreq();

  GpuFreq(const GpuFreq& from);
  GpuFreq(GpuFreq&& from) noexcept
    : GpuFreq() {
    *this = ::std::move(from);
  }

  inline GpuFreq& operator=(const GpuFreq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpuFreq& operator=(GpuFreq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GpuFreq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GpuFreq* internal_default_instance() {
    return reinterpret_cast<const GpuFreq*>(
               &_GpuFreq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GpuFreq& a, GpuFreq& b) {
    a.Swap(&b);
  }
  inline void Swap(GpuFreq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GpuFreq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GpuFreq* New() const final {
    return CreateMaybeMessage<GpuFreq>(nullptr);
  }

  GpuFreq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GpuFreq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GpuFreq& from);
  void MergeFrom(const GpuFreq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GpuFreq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.GpuFreq";
  }
  protected:
  explicit GpuFreq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGpuFreqFieldNumber = 1,
  };
  // int32 gpuFreq = 1;
  void clear_gpufreq();
  ::PROTOBUF_NAMESPACE_ID::int32 gpufreq() const;
  void set_gpufreq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gpufreq() const;
  void _internal_set_gpufreq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perfcat.GpuFreq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 gpufreq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class GpuUsage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.GpuUsage) */ {
 public:
  inline GpuUsage() : GpuUsage(nullptr) {}
  virtual ~GpuUsage();

  GpuUsage(const GpuUsage& from);
  GpuUsage(GpuUsage&& from) noexcept
    : GpuUsage() {
    *this = ::std::move(from);
  }

  inline GpuUsage& operator=(const GpuUsage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpuUsage& operator=(GpuUsage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GpuUsage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GpuUsage* internal_default_instance() {
    return reinterpret_cast<const GpuUsage*>(
               &_GpuUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(GpuUsage& a, GpuUsage& b) {
    a.Swap(&b);
  }
  inline void Swap(GpuUsage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GpuUsage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GpuUsage* New() const final {
    return CreateMaybeMessage<GpuUsage>(nullptr);
  }

  GpuUsage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GpuUsage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GpuUsage& from);
  void MergeFrom(const GpuUsage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GpuUsage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.GpuUsage";
  }
  protected:
  explicit GpuUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGpuUsageFieldNumber = 1,
  };
  // float gpuUsage = 1;
  void clear_gpuusage();
  float gpuusage() const;
  void set_gpuusage(float value);
  private:
  float _internal_gpuusage() const;
  void _internal_set_gpuusage(float value);
  public:

  // @@protoc_insertion_point(class_scope:perfcat.GpuUsage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float gpuusage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class CpuFreq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.CpuFreq) */ {
 public:
  inline CpuFreq() : CpuFreq(nullptr) {}
  virtual ~CpuFreq();

  CpuFreq(const CpuFreq& from);
  CpuFreq(CpuFreq&& from) noexcept
    : CpuFreq() {
    *this = ::std::move(from);
  }

  inline CpuFreq& operator=(const CpuFreq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuFreq& operator=(CpuFreq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CpuFreq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CpuFreq* internal_default_instance() {
    return reinterpret_cast<const CpuFreq*>(
               &_CpuFreq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CpuFreq& a, CpuFreq& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuFreq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CpuFreq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CpuFreq* New() const final {
    return CreateMaybeMessage<CpuFreq>(nullptr);
  }

  CpuFreq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CpuFreq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CpuFreq& from);
  void MergeFrom(const CpuFreq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CpuFreq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.CpuFreq";
  }
  protected:
  explicit CpuFreq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpuFreqFieldNumber = 1,
  };
  // repeated int32 cpuFreq = 1;
  int cpufreq_size() const;
  private:
  int _internal_cpufreq_size() const;
  public:
  void clear_cpufreq();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cpufreq(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_cpufreq() const;
  void _internal_add_cpufreq(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_cpufreq();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 cpufreq(int index) const;
  void set_cpufreq(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_cpufreq(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      cpufreq() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_cpufreq();

  // @@protoc_insertion_point(class_scope:perfcat.CpuFreq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > cpufreq_;
  mutable std::atomic<int> _cpufreq_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class GetCpuMaxFreqReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.GetCpuMaxFreqReq) */ {
 public:
  inline GetCpuMaxFreqReq() : GetCpuMaxFreqReq(nullptr) {}
  virtual ~GetCpuMaxFreqReq();

  GetCpuMaxFreqReq(const GetCpuMaxFreqReq& from);
  GetCpuMaxFreqReq(GetCpuMaxFreqReq&& from) noexcept
    : GetCpuMaxFreqReq() {
    *this = ::std::move(from);
  }

  inline GetCpuMaxFreqReq& operator=(const GetCpuMaxFreqReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCpuMaxFreqReq& operator=(GetCpuMaxFreqReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCpuMaxFreqReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCpuMaxFreqReq* internal_default_instance() {
    return reinterpret_cast<const GetCpuMaxFreqReq*>(
               &_GetCpuMaxFreqReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(GetCpuMaxFreqReq& a, GetCpuMaxFreqReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCpuMaxFreqReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCpuMaxFreqReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCpuMaxFreqReq* New() const final {
    return CreateMaybeMessage<GetCpuMaxFreqReq>(nullptr);
  }

  GetCpuMaxFreqReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCpuMaxFreqReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCpuMaxFreqReq& from);
  void MergeFrom(const GetCpuMaxFreqReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCpuMaxFreqReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.GetCpuMaxFreqReq";
  }
  protected:
  explicit GetCpuMaxFreqReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:perfcat.GetCpuMaxFreqReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class GetCpuMaxFreqRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.GetCpuMaxFreqRsp) */ {
 public:
  inline GetCpuMaxFreqRsp() : GetCpuMaxFreqRsp(nullptr) {}
  virtual ~GetCpuMaxFreqRsp();

  GetCpuMaxFreqRsp(const GetCpuMaxFreqRsp& from);
  GetCpuMaxFreqRsp(GetCpuMaxFreqRsp&& from) noexcept
    : GetCpuMaxFreqRsp() {
    *this = ::std::move(from);
  }

  inline GetCpuMaxFreqRsp& operator=(const GetCpuMaxFreqRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCpuMaxFreqRsp& operator=(GetCpuMaxFreqRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCpuMaxFreqRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCpuMaxFreqRsp* internal_default_instance() {
    return reinterpret_cast<const GetCpuMaxFreqRsp*>(
               &_GetCpuMaxFreqRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(GetCpuMaxFreqRsp& a, GetCpuMaxFreqRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCpuMaxFreqRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCpuMaxFreqRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCpuMaxFreqRsp* New() const final {
    return CreateMaybeMessage<GetCpuMaxFreqRsp>(nullptr);
  }

  GetCpuMaxFreqRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCpuMaxFreqRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCpuMaxFreqRsp& from);
  void MergeFrom(const GetCpuMaxFreqRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCpuMaxFreqRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.GetCpuMaxFreqRsp";
  }
  protected:
  explicit GetCpuMaxFreqRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinFreqFieldNumber = 1,
    kMaxFreqFieldNumber = 2,
  };
  // repeated int32 minFreq = 1;
  int minfreq_size() const;
  private:
  int _internal_minfreq_size() const;
  public:
  void clear_minfreq();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_minfreq(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_minfreq() const;
  void _internal_add_minfreq(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_minfreq();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 minfreq(int index) const;
  void set_minfreq(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_minfreq(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      minfreq() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_minfreq();

  // repeated int32 maxFreq = 2;
  int maxfreq_size() const;
  private:
  int _internal_maxfreq_size() const;
  public:
  void clear_maxfreq();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxfreq(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_maxfreq() const;
  void _internal_add_maxfreq(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_maxfreq();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 maxfreq(int index) const;
  void set_maxfreq(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_maxfreq(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      maxfreq() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_maxfreq();

  // @@protoc_insertion_point(class_scope:perfcat.GetCpuMaxFreqRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > minfreq_;
  mutable std::atomic<int> _minfreq_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > maxfreq_;
  mutable std::atomic<int> _maxfreq_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class ToggleInterestingFiledNTF PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.ToggleInterestingFiledNTF) */ {
 public:
  inline ToggleInterestingFiledNTF() : ToggleInterestingFiledNTF(nullptr) {}
  virtual ~ToggleInterestingFiledNTF();

  ToggleInterestingFiledNTF(const ToggleInterestingFiledNTF& from);
  ToggleInterestingFiledNTF(ToggleInterestingFiledNTF&& from) noexcept
    : ToggleInterestingFiledNTF() {
    *this = ::std::move(from);
  }

  inline ToggleInterestingFiledNTF& operator=(const ToggleInterestingFiledNTF& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToggleInterestingFiledNTF& operator=(ToggleInterestingFiledNTF&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ToggleInterestingFiledNTF& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ToggleInterestingFiledNTF* internal_default_instance() {
    return reinterpret_cast<const ToggleInterestingFiledNTF*>(
               &_ToggleInterestingFiledNTF_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ToggleInterestingFiledNTF& a, ToggleInterestingFiledNTF& b) {
    a.Swap(&b);
  }
  inline void Swap(ToggleInterestingFiledNTF* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ToggleInterestingFiledNTF* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ToggleInterestingFiledNTF* New() const final {
    return CreateMaybeMessage<ToggleInterestingFiledNTF>(nullptr);
  }

  ToggleInterestingFiledNTF* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ToggleInterestingFiledNTF>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ToggleInterestingFiledNTF& from);
  void MergeFrom(const ToggleInterestingFiledNTF& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToggleInterestingFiledNTF* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.ToggleInterestingFiledNTF";
  }
  protected:
  explicit ToggleInterestingFiledNTF(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataTypeFieldNumber = 1,
  };
  // int32 dataType = 1;
  void clear_datatype();
  ::PROTOBUF_NAMESPACE_ID::int32 datatype() const;
  void set_datatype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_datatype() const;
  void _internal_set_datatype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perfcat.ToggleInterestingFiledNTF)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 datatype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class ProfileStartedNTF PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.ProfileStartedNTF) */ {
 public:
  inline ProfileStartedNTF() : ProfileStartedNTF(nullptr) {}
  virtual ~ProfileStartedNTF();

  ProfileStartedNTF(const ProfileStartedNTF& from);
  ProfileStartedNTF(ProfileStartedNTF&& from) noexcept
    : ProfileStartedNTF() {
    *this = ::std::move(from);
  }

  inline ProfileStartedNTF& operator=(const ProfileStartedNTF& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfileStartedNTF& operator=(ProfileStartedNTF&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfileStartedNTF& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfileStartedNTF* internal_default_instance() {
    return reinterpret_cast<const ProfileStartedNTF*>(
               &_ProfileStartedNTF_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ProfileStartedNTF& a, ProfileStartedNTF& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfileStartedNTF* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfileStartedNTF* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfileStartedNTF* New() const final {
    return CreateMaybeMessage<ProfileStartedNTF>(nullptr);
  }

  ProfileStartedNTF* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfileStartedNTF>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfileStartedNTF& from);
  void MergeFrom(const ProfileStartedNTF& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfileStartedNTF* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.ProfileStartedNTF";
  }
  protected:
  explicit ProfileStartedNTF(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:perfcat.ProfileStartedNTF)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class ProfileStoppedNTF PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.ProfileStoppedNTF) */ {
 public:
  inline ProfileStoppedNTF() : ProfileStoppedNTF(nullptr) {}
  virtual ~ProfileStoppedNTF();

  ProfileStoppedNTF(const ProfileStoppedNTF& from);
  ProfileStoppedNTF(ProfileStoppedNTF&& from) noexcept
    : ProfileStoppedNTF() {
    *this = ::std::move(from);
  }

  inline ProfileStoppedNTF& operator=(const ProfileStoppedNTF& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfileStoppedNTF& operator=(ProfileStoppedNTF&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfileStoppedNTF& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfileStoppedNTF* internal_default_instance() {
    return reinterpret_cast<const ProfileStoppedNTF*>(
               &_ProfileStoppedNTF_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(ProfileStoppedNTF& a, ProfileStoppedNTF& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfileStoppedNTF* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfileStoppedNTF* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfileStoppedNTF* New() const final {
    return CreateMaybeMessage<ProfileStoppedNTF>(nullptr);
  }

  ProfileStoppedNTF* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfileStoppedNTF>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfileStoppedNTF& from);
  void MergeFrom(const ProfileStoppedNTF& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfileStoppedNTF* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.ProfileStoppedNTF";
  }
  protected:
  explicit ProfileStoppedNTF(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:perfcat.ProfileStoppedNTF)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class ProcessNotFoundNTF PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.ProcessNotFoundNTF) */ {
 public:
  inline ProcessNotFoundNTF() : ProcessNotFoundNTF(nullptr) {}
  virtual ~ProcessNotFoundNTF();

  ProcessNotFoundNTF(const ProcessNotFoundNTF& from);
  ProcessNotFoundNTF(ProcessNotFoundNTF&& from) noexcept
    : ProcessNotFoundNTF() {
    *this = ::std::move(from);
  }

  inline ProcessNotFoundNTF& operator=(const ProcessNotFoundNTF& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessNotFoundNTF& operator=(ProcessNotFoundNTF&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessNotFoundNTF& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessNotFoundNTF* internal_default_instance() {
    return reinterpret_cast<const ProcessNotFoundNTF*>(
               &_ProcessNotFoundNTF_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(ProcessNotFoundNTF& a, ProcessNotFoundNTF& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessNotFoundNTF* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessNotFoundNTF* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessNotFoundNTF* New() const final {
    return CreateMaybeMessage<ProcessNotFoundNTF>(nullptr);
  }

  ProcessNotFoundNTF* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessNotFoundNTF>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessNotFoundNTF& from);
  void MergeFrom(const ProcessNotFoundNTF& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessNotFoundNTF* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.ProcessNotFoundNTF";
  }
  protected:
  explicit ProcessNotFoundNTF(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:perfcat.ProcessNotFoundNTF)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class ProcessFoundNTF PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.ProcessFoundNTF) */ {
 public:
  inline ProcessFoundNTF() : ProcessFoundNTF(nullptr) {}
  virtual ~ProcessFoundNTF();

  ProcessFoundNTF(const ProcessFoundNTF& from);
  ProcessFoundNTF(ProcessFoundNTF&& from) noexcept
    : ProcessFoundNTF() {
    *this = ::std::move(from);
  }

  inline ProcessFoundNTF& operator=(const ProcessFoundNTF& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessFoundNTF& operator=(ProcessFoundNTF&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessFoundNTF& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessFoundNTF* internal_default_instance() {
    return reinterpret_cast<const ProcessFoundNTF*>(
               &_ProcessFoundNTF_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(ProcessFoundNTF& a, ProcessFoundNTF& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessFoundNTF* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessFoundNTF* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessFoundNTF* New() const final {
    return CreateMaybeMessage<ProcessFoundNTF>(nullptr);
  }

  ProcessFoundNTF* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessFoundNTF>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessFoundNTF& from);
  void MergeFrom(const ProcessFoundNTF& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessFoundNTF* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.ProcessFoundNTF";
  }
  protected:
  explicit ProcessFoundNTF(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:perfcat.ProcessFoundNTF)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class GetBatteryInfoReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.GetBatteryInfoReq) */ {
 public:
  inline GetBatteryInfoReq() : GetBatteryInfoReq(nullptr) {}
  virtual ~GetBatteryInfoReq();

  GetBatteryInfoReq(const GetBatteryInfoReq& from);
  GetBatteryInfoReq(GetBatteryInfoReq&& from) noexcept
    : GetBatteryInfoReq() {
    *this = ::std::move(from);
  }

  inline GetBatteryInfoReq& operator=(const GetBatteryInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBatteryInfoReq& operator=(GetBatteryInfoReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBatteryInfoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBatteryInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetBatteryInfoReq*>(
               &_GetBatteryInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(GetBatteryInfoReq& a, GetBatteryInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBatteryInfoReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBatteryInfoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBatteryInfoReq* New() const final {
    return CreateMaybeMessage<GetBatteryInfoReq>(nullptr);
  }

  GetBatteryInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBatteryInfoReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBatteryInfoReq& from);
  void MergeFrom(const GetBatteryInfoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBatteryInfoReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.GetBatteryInfoReq";
  }
  protected:
  explicit GetBatteryInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:perfcat.GetBatteryInfoReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class GetBatteryInfoRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.GetBatteryInfoRsp) */ {
 public:
  inline GetBatteryInfoRsp() : GetBatteryInfoRsp(nullptr) {}
  virtual ~GetBatteryInfoRsp();

  GetBatteryInfoRsp(const GetBatteryInfoRsp& from);
  GetBatteryInfoRsp(GetBatteryInfoRsp&& from) noexcept
    : GetBatteryInfoRsp() {
    *this = ::std::move(from);
  }

  inline GetBatteryInfoRsp& operator=(const GetBatteryInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBatteryInfoRsp& operator=(GetBatteryInfoRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBatteryInfoRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBatteryInfoRsp* internal_default_instance() {
    return reinterpret_cast<const GetBatteryInfoRsp*>(
               &_GetBatteryInfoRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(GetBatteryInfoRsp& a, GetBatteryInfoRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBatteryInfoRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBatteryInfoRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBatteryInfoRsp* New() const final {
    return CreateMaybeMessage<GetBatteryInfoRsp>(nullptr);
  }

  GetBatteryInfoRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBatteryInfoRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBatteryInfoRsp& from);
  void MergeFrom(const GetBatteryInfoRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBatteryInfoRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.GetBatteryInfoRsp";
  }
  protected:
  explicit GetBatteryInfoRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPowerFieldNumber = 1,
  };
  // .perfcat.Power power = 1;
  bool has_power() const;
  private:
  bool _internal_has_power() const;
  public:
  void clear_power();
  const ::perfcat::Power& power() const;
  ::perfcat::Power* release_power();
  ::perfcat::Power* mutable_power();
  void set_allocated_power(::perfcat::Power* power);
  private:
  const ::perfcat::Power& _internal_power() const;
  ::perfcat::Power* _internal_mutable_power();
  public:
  void unsafe_arena_set_allocated_power(
      ::perfcat::Power* power);
  ::perfcat::Power* unsafe_arena_release_power();

  // @@protoc_insertion_point(class_scope:perfcat.GetBatteryInfoRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::perfcat::Power* power_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class AppClosedNTF PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.AppClosedNTF) */ {
 public:
  inline AppClosedNTF() : AppClosedNTF(nullptr) {}
  virtual ~AppClosedNTF();

  AppClosedNTF(const AppClosedNTF& from);
  AppClosedNTF(AppClosedNTF&& from) noexcept
    : AppClosedNTF() {
    *this = ::std::move(from);
  }

  inline AppClosedNTF& operator=(const AppClosedNTF& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppClosedNTF& operator=(AppClosedNTF&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppClosedNTF& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppClosedNTF* internal_default_instance() {
    return reinterpret_cast<const AppClosedNTF*>(
               &_AppClosedNTF_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(AppClosedNTF& a, AppClosedNTF& b) {
    a.Swap(&b);
  }
  inline void Swap(AppClosedNTF* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppClosedNTF* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppClosedNTF* New() const final {
    return CreateMaybeMessage<AppClosedNTF>(nullptr);
  }

  AppClosedNTF* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppClosedNTF>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppClosedNTF& from);
  void MergeFrom(const AppClosedNTF& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppClosedNTF* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.AppClosedNTF";
  }
  protected:
  explicit AppClosedNTF(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:perfcat.AppClosedNTF)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class ProfileNTFACK PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.ProfileNTFACK) */ {
 public:
  inline ProfileNTFACK() : ProfileNTFACK(nullptr) {}
  virtual ~ProfileNTFACK();

  ProfileNTFACK(const ProfileNTFACK& from);
  ProfileNTFACK(ProfileNTFACK&& from) noexcept
    : ProfileNTFACK() {
    *this = ::std::move(from);
  }

  inline ProfileNTFACK& operator=(const ProfileNTFACK& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfileNTFACK& operator=(ProfileNTFACK&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfileNTFACK& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfileNTFACK* internal_default_instance() {
    return reinterpret_cast<const ProfileNTFACK*>(
               &_ProfileNTFACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(ProfileNTFACK& a, ProfileNTFACK& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfileNTFACK* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfileNTFACK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfileNTFACK* New() const final {
    return CreateMaybeMessage<ProfileNTFACK>(nullptr);
  }

  ProfileNTFACK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfileNTFACK>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfileNTFACK& from);
  void MergeFrom(const ProfileNTFACK& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfileNTFACK* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.ProfileNTFACK";
  }
  protected:
  explicit ProfileNTFACK(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
  };
  // int32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perfcat.ProfileNTFACK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class PrepareWifiProfileNTF PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.PrepareWifiProfileNTF) */ {
 public:
  inline PrepareWifiProfileNTF() : PrepareWifiProfileNTF(nullptr) {}
  virtual ~PrepareWifiProfileNTF();

  PrepareWifiProfileNTF(const PrepareWifiProfileNTF& from);
  PrepareWifiProfileNTF(PrepareWifiProfileNTF&& from) noexcept
    : PrepareWifiProfileNTF() {
    *this = ::std::move(from);
  }

  inline PrepareWifiProfileNTF& operator=(const PrepareWifiProfileNTF& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrepareWifiProfileNTF& operator=(PrepareWifiProfileNTF&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrepareWifiProfileNTF& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrepareWifiProfileNTF* internal_default_instance() {
    return reinterpret_cast<const PrepareWifiProfileNTF*>(
               &_PrepareWifiProfileNTF_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(PrepareWifiProfileNTF& a, PrepareWifiProfileNTF& b) {
    a.Swap(&b);
  }
  inline void Swap(PrepareWifiProfileNTF* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrepareWifiProfileNTF* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrepareWifiProfileNTF* New() const final {
    return CreateMaybeMessage<PrepareWifiProfileNTF>(nullptr);
  }

  PrepareWifiProfileNTF* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrepareWifiProfileNTF>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrepareWifiProfileNTF& from);
  void MergeFrom(const PrepareWifiProfileNTF& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrepareWifiProfileNTF* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.PrepareWifiProfileNTF";
  }
  protected:
  explicit PrepareWifiProfileNTF(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:perfcat.PrepareWifiProfileNTF)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class GetAppInfoReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.GetAppInfoReq) */ {
 public:
  inline GetAppInfoReq() : GetAppInfoReq(nullptr) {}
  virtual ~GetAppInfoReq();

  GetAppInfoReq(const GetAppInfoReq& from);
  GetAppInfoReq(GetAppInfoReq&& from) noexcept
    : GetAppInfoReq() {
    *this = ::std::move(from);
  }

  inline GetAppInfoReq& operator=(const GetAppInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAppInfoReq& operator=(GetAppInfoReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAppInfoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAppInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetAppInfoReq*>(
               &_GetAppInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(GetAppInfoReq& a, GetAppInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAppInfoReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAppInfoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAppInfoReq* New() const final {
    return CreateMaybeMessage<GetAppInfoReq>(nullptr);
  }

  GetAppInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAppInfoReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAppInfoReq& from);
  void MergeFrom(const GetAppInfoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAppInfoReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.GetAppInfoReq";
  }
  protected:
  explicit GetAppInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:perfcat.GetAppInfoReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class GetAppInfoRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.GetAppInfoRsp) */ {
 public:
  inline GetAppInfoRsp() : GetAppInfoRsp(nullptr) {}
  virtual ~GetAppInfoRsp();

  GetAppInfoRsp(const GetAppInfoRsp& from);
  GetAppInfoRsp(GetAppInfoRsp&& from) noexcept
    : GetAppInfoRsp() {
    *this = ::std::move(from);
  }

  inline GetAppInfoRsp& operator=(const GetAppInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAppInfoRsp& operator=(GetAppInfoRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAppInfoRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAppInfoRsp* internal_default_instance() {
    return reinterpret_cast<const GetAppInfoRsp*>(
               &_GetAppInfoRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(GetAppInfoRsp& a, GetAppInfoRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAppInfoRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAppInfoRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAppInfoRsp* New() const final {
    return CreateMaybeMessage<GetAppInfoRsp>(nullptr);
  }

  GetAppInfoRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAppInfoRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAppInfoRsp& from);
  void MergeFrom(const GetAppInfoRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAppInfoRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.GetAppInfoRsp";
  }
  protected:
  explicit GetAppInfoRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppInfoFieldNumber = 1,
  };
  // repeated .perfcat.AppInfo appInfo = 1;
  int appinfo_size() const;
  private:
  int _internal_appinfo_size() const;
  public:
  void clear_appinfo();
  ::perfcat::AppInfo* mutable_appinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfcat::AppInfo >*
      mutable_appinfo();
  private:
  const ::perfcat::AppInfo& _internal_appinfo(int index) const;
  ::perfcat::AppInfo* _internal_add_appinfo();
  public:
  const ::perfcat::AppInfo& appinfo(int index) const;
  ::perfcat::AppInfo* add_appinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfcat::AppInfo >&
      appinfo() const;

  // @@protoc_insertion_point(class_scope:perfcat.GetAppInfoRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfcat::AppInfo > appinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class AppInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.AppInfo) */ {
 public:
  inline AppInfo() : AppInfo(nullptr) {}
  virtual ~AppInfo();

  AppInfo(const AppInfo& from);
  AppInfo(AppInfo&& from) noexcept
    : AppInfo() {
    *this = ::std::move(from);
  }

  inline AppInfo& operator=(const AppInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppInfo& operator=(AppInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppInfo* internal_default_instance() {
    return reinterpret_cast<const AppInfo*>(
               &_AppInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(AppInfo& a, AppInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AppInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppInfo* New() const final {
    return CreateMaybeMessage<AppInfo>(nullptr);
  }

  AppInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppInfo& from);
  void MergeFrom(const AppInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.AppInfo";
  }
  protected:
  explicit AppInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessListFieldNumber = 6,
    kPackageNameFieldNumber = 1,
    kVersionFieldNumber = 2,
    kIconFieldNumber = 3,
    kLabelFieldNumber = 4,
    kPidFieldNumber = 5,
    kIsSystemAppFieldNumber = 7,
    kIsDebuggableFieldNumber = 8,
  };
  // repeated string processList = 6;
  int processlist_size() const;
  private:
  int _internal_processlist_size() const;
  public:
  void clear_processlist();
  const std::string& processlist(int index) const;
  std::string* mutable_processlist(int index);
  void set_processlist(int index, const std::string& value);
  void set_processlist(int index, std::string&& value);
  void set_processlist(int index, const char* value);
  void set_processlist(int index, const char* value, size_t size);
  std::string* add_processlist();
  void add_processlist(const std::string& value);
  void add_processlist(std::string&& value);
  void add_processlist(const char* value);
  void add_processlist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& processlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_processlist();
  private:
  const std::string& _internal_processlist(int index) const;
  std::string* _internal_add_processlist();
  public:

  // string packageName = 1;
  void clear_packagename();
  const std::string& packagename() const;
  void set_packagename(const std::string& value);
  void set_packagename(std::string&& value);
  void set_packagename(const char* value);
  void set_packagename(const char* value, size_t size);
  std::string* mutable_packagename();
  std::string* release_packagename();
  void set_allocated_packagename(std::string* packagename);
  private:
  const std::string& _internal_packagename() const;
  void _internal_set_packagename(const std::string& value);
  std::string* _internal_mutable_packagename();
  public:

  // string version = 2;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // bytes icon = 3;
  void clear_icon();
  const std::string& icon() const;
  void set_icon(const std::string& value);
  void set_icon(std::string&& value);
  void set_icon(const char* value);
  void set_icon(const void* value, size_t size);
  std::string* mutable_icon();
  std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // string label = 4;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // int32 pid = 5;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pid() const;
  void _internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isSystemApp = 7;
  void clear_issystemapp();
  bool issystemapp() const;
  void set_issystemapp(bool value);
  private:
  bool _internal_issystemapp() const;
  void _internal_set_issystemapp(bool value);
  public:

  // bool isDebuggable = 8;
  void clear_isdebuggable();
  bool isdebuggable() const;
  void set_isdebuggable(bool value);
  private:
  bool _internal_isdebuggable() const;
  void _internal_set_isdebuggable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:perfcat.AppInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> processlist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr packagename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::int32 pid_;
  bool issystemapp_;
  bool isdebuggable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class EmptyRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.EmptyRsp) */ {
 public:
  inline EmptyRsp() : EmptyRsp(nullptr) {}
  virtual ~EmptyRsp();

  EmptyRsp(const EmptyRsp& from);
  EmptyRsp(EmptyRsp&& from) noexcept
    : EmptyRsp() {
    *this = ::std::move(from);
  }

  inline EmptyRsp& operator=(const EmptyRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmptyRsp& operator=(EmptyRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EmptyRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmptyRsp* internal_default_instance() {
    return reinterpret_cast<const EmptyRsp*>(
               &_EmptyRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(EmptyRsp& a, EmptyRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(EmptyRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmptyRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EmptyRsp* New() const final {
    return CreateMaybeMessage<EmptyRsp>(nullptr);
  }

  EmptyRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmptyRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EmptyRsp& from);
  void MergeFrom(const EmptyRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmptyRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.EmptyRsp";
  }
  protected:
  explicit EmptyRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:perfcat.EmptyRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class HelloReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.HelloReq) */ {
 public:
  inline HelloReq() : HelloReq(nullptr) {}
  virtual ~HelloReq();

  HelloReq(const HelloReq& from);
  HelloReq(HelloReq&& from) noexcept
    : HelloReq() {
    *this = ::std::move(from);
  }

  inline HelloReq& operator=(const HelloReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloReq& operator=(HelloReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HelloReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HelloReq* internal_default_instance() {
    return reinterpret_cast<const HelloReq*>(
               &_HelloReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(HelloReq& a, HelloReq& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HelloReq* New() const final {
    return CreateMaybeMessage<HelloReq>(nullptr);
  }

  HelloReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HelloReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HelloReq& from);
  void MergeFrom(const HelloReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.HelloReq";
  }
  protected:
  explicit HelloReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:perfcat.HelloReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class ExecuteShellCommandReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.ExecuteShellCommandReq) */ {
 public:
  inline ExecuteShellCommandReq() : ExecuteShellCommandReq(nullptr) {}
  virtual ~ExecuteShellCommandReq();

  ExecuteShellCommandReq(const ExecuteShellCommandReq& from);
  ExecuteShellCommandReq(ExecuteShellCommandReq&& from) noexcept
    : ExecuteShellCommandReq() {
    *this = ::std::move(from);
  }

  inline ExecuteShellCommandReq& operator=(const ExecuteShellCommandReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteShellCommandReq& operator=(ExecuteShellCommandReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecuteShellCommandReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecuteShellCommandReq* internal_default_instance() {
    return reinterpret_cast<const ExecuteShellCommandReq*>(
               &_ExecuteShellCommandReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(ExecuteShellCommandReq& a, ExecuteShellCommandReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecuteShellCommandReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecuteShellCommandReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecuteShellCommandReq* New() const final {
    return CreateMaybeMessage<ExecuteShellCommandReq>(nullptr);
  }

  ExecuteShellCommandReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecuteShellCommandReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecuteShellCommandReq& from);
  void MergeFrom(const ExecuteShellCommandReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteShellCommandReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.ExecuteShellCommandReq";
  }
  protected:
  explicit ExecuteShellCommandReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:perfcat.ExecuteShellCommandReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class ExecuteShellCommandRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.ExecuteShellCommandRsp) */ {
 public:
  inline ExecuteShellCommandRsp() : ExecuteShellCommandRsp(nullptr) {}
  virtual ~ExecuteShellCommandRsp();

  ExecuteShellCommandRsp(const ExecuteShellCommandRsp& from);
  ExecuteShellCommandRsp(ExecuteShellCommandRsp&& from) noexcept
    : ExecuteShellCommandRsp() {
    *this = ::std::move(from);
  }

  inline ExecuteShellCommandRsp& operator=(const ExecuteShellCommandRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteShellCommandRsp& operator=(ExecuteShellCommandRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecuteShellCommandRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecuteShellCommandRsp* internal_default_instance() {
    return reinterpret_cast<const ExecuteShellCommandRsp*>(
               &_ExecuteShellCommandRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(ExecuteShellCommandRsp& a, ExecuteShellCommandRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecuteShellCommandRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecuteShellCommandRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecuteShellCommandRsp* New() const final {
    return CreateMaybeMessage<ExecuteShellCommandRsp>(nullptr);
  }

  ExecuteShellCommandRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecuteShellCommandRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecuteShellCommandRsp& from);
  void MergeFrom(const ExecuteShellCommandRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteShellCommandRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.ExecuteShellCommandRsp";
  }
  protected:
  explicit ExecuteShellCommandRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:perfcat.ExecuteShellCommandRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class RegisterAppReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.RegisterAppReq) */ {
 public:
  inline RegisterAppReq() : RegisterAppReq(nullptr) {}
  virtual ~RegisterAppReq();

  RegisterAppReq(const RegisterAppReq& from);
  RegisterAppReq(RegisterAppReq&& from) noexcept
    : RegisterAppReq() {
    *this = ::std::move(from);
  }

  inline RegisterAppReq& operator=(const RegisterAppReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterAppReq& operator=(RegisterAppReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterAppReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterAppReq* internal_default_instance() {
    return reinterpret_cast<const RegisterAppReq*>(
               &_RegisterAppReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(RegisterAppReq& a, RegisterAppReq& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterAppReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterAppReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterAppReq* New() const final {
    return CreateMaybeMessage<RegisterAppReq>(nullptr);
  }

  RegisterAppReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterAppReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterAppReq& from);
  void MergeFrom(const RegisterAppReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterAppReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.RegisterAppReq";
  }
  protected:
  explicit RegisterAppReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:perfcat.RegisterAppReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class ResumeProfileReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.ResumeProfileReq) */ {
 public:
  inline ResumeProfileReq() : ResumeProfileReq(nullptr) {}
  virtual ~ResumeProfileReq();

  ResumeProfileReq(const ResumeProfileReq& from);
  ResumeProfileReq(ResumeProfileReq&& from) noexcept
    : ResumeProfileReq() {
    *this = ::std::move(from);
  }

  inline ResumeProfileReq& operator=(const ResumeProfileReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResumeProfileReq& operator=(ResumeProfileReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResumeProfileReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResumeProfileReq* internal_default_instance() {
    return reinterpret_cast<const ResumeProfileReq*>(
               &_ResumeProfileReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(ResumeProfileReq& a, ResumeProfileReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ResumeProfileReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResumeProfileReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResumeProfileReq* New() const final {
    return CreateMaybeMessage<ResumeProfileReq>(nullptr);
  }

  ResumeProfileReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResumeProfileReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResumeProfileReq& from);
  void MergeFrom(const ResumeProfileReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResumeProfileReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.ResumeProfileReq";
  }
  protected:
  explicit ResumeProfileReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:perfcat.ResumeProfileReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class ResumeProfileRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.ResumeProfileRsp) */ {
 public:
  inline ResumeProfileRsp() : ResumeProfileRsp(nullptr) {}
  virtual ~ResumeProfileRsp();

  ResumeProfileRsp(const ResumeProfileRsp& from);
  ResumeProfileRsp(ResumeProfileRsp&& from) noexcept
    : ResumeProfileRsp() {
    *this = ::std::move(from);
  }

  inline ResumeProfileRsp& operator=(const ResumeProfileRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResumeProfileRsp& operator=(ResumeProfileRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResumeProfileRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResumeProfileRsp* internal_default_instance() {
    return reinterpret_cast<const ResumeProfileRsp*>(
               &_ResumeProfileRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(ResumeProfileRsp& a, ResumeProfileRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(ResumeProfileRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResumeProfileRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResumeProfileRsp* New() const final {
    return CreateMaybeMessage<ResumeProfileRsp>(nullptr);
  }

  ResumeProfileRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResumeProfileRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResumeProfileRsp& from);
  void MergeFrom(const ResumeProfileRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResumeProfileRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.ResumeProfileRsp";
  }
  protected:
  explicit ResumeProfileRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:perfcat.ResumeProfileRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class GetDataFromAppReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.GetDataFromAppReq) */ {
 public:
  inline GetDataFromAppReq() : GetDataFromAppReq(nullptr) {}
  virtual ~GetDataFromAppReq();

  GetDataFromAppReq(const GetDataFromAppReq& from);
  GetDataFromAppReq(GetDataFromAppReq&& from) noexcept
    : GetDataFromAppReq() {
    *this = ::std::move(from);
  }

  inline GetDataFromAppReq& operator=(const GetDataFromAppReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDataFromAppReq& operator=(GetDataFromAppReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDataFromAppReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDataFromAppReq* internal_default_instance() {
    return reinterpret_cast<const GetDataFromAppReq*>(
               &_GetDataFromAppReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(GetDataFromAppReq& a, GetDataFromAppReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDataFromAppReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDataFromAppReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDataFromAppReq* New() const final {
    return CreateMaybeMessage<GetDataFromAppReq>(nullptr);
  }

  GetDataFromAppReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDataFromAppReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDataFromAppReq& from);
  void MergeFrom(const GetDataFromAppReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDataFromAppReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.GetDataFromAppReq";
  }
  protected:
  explicit GetDataFromAppReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:perfcat.GetDataFromAppReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class GetDataFromAppRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.GetDataFromAppRsp) */ {
 public:
  inline GetDataFromAppRsp() : GetDataFromAppRsp(nullptr) {}
  virtual ~GetDataFromAppRsp();

  GetDataFromAppRsp(const GetDataFromAppRsp& from);
  GetDataFromAppRsp(GetDataFromAppRsp&& from) noexcept
    : GetDataFromAppRsp() {
    *this = ::std::move(from);
  }

  inline GetDataFromAppRsp& operator=(const GetDataFromAppRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDataFromAppRsp& operator=(GetDataFromAppRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDataFromAppRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDataFromAppRsp* internal_default_instance() {
    return reinterpret_cast<const GetDataFromAppRsp*>(
               &_GetDataFromAppRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(GetDataFromAppRsp& a, GetDataFromAppRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDataFromAppRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDataFromAppRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDataFromAppRsp* New() const final {
    return CreateMaybeMessage<GetDataFromAppRsp>(nullptr);
  }

  GetDataFromAppRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDataFromAppRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDataFromAppRsp& from);
  void MergeFrom(const GetDataFromAppRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDataFromAppRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.GetDataFromAppRsp";
  }
  protected:
  explicit GetDataFromAppRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:perfcat.GetDataFromAppRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class SetScreenshotIntervalReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.SetScreenshotIntervalReq) */ {
 public:
  inline SetScreenshotIntervalReq() : SetScreenshotIntervalReq(nullptr) {}
  virtual ~SetScreenshotIntervalReq();

  SetScreenshotIntervalReq(const SetScreenshotIntervalReq& from);
  SetScreenshotIntervalReq(SetScreenshotIntervalReq&& from) noexcept
    : SetScreenshotIntervalReq() {
    *this = ::std::move(from);
  }

  inline SetScreenshotIntervalReq& operator=(const SetScreenshotIntervalReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetScreenshotIntervalReq& operator=(SetScreenshotIntervalReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetScreenshotIntervalReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetScreenshotIntervalReq* internal_default_instance() {
    return reinterpret_cast<const SetScreenshotIntervalReq*>(
               &_SetScreenshotIntervalReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(SetScreenshotIntervalReq& a, SetScreenshotIntervalReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SetScreenshotIntervalReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetScreenshotIntervalReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetScreenshotIntervalReq* New() const final {
    return CreateMaybeMessage<SetScreenshotIntervalReq>(nullptr);
  }

  SetScreenshotIntervalReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetScreenshotIntervalReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetScreenshotIntervalReq& from);
  void MergeFrom(const SetScreenshotIntervalReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetScreenshotIntervalReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.SetScreenshotIntervalReq";
  }
  protected:
  explicit SetScreenshotIntervalReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:perfcat.SetScreenshotIntervalReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class EnableFloatingWindowReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.EnableFloatingWindowReq) */ {
 public:
  inline EnableFloatingWindowReq() : EnableFloatingWindowReq(nullptr) {}
  virtual ~EnableFloatingWindowReq();

  EnableFloatingWindowReq(const EnableFloatingWindowReq& from);
  EnableFloatingWindowReq(EnableFloatingWindowReq&& from) noexcept
    : EnableFloatingWindowReq() {
    *this = ::std::move(from);
  }

  inline EnableFloatingWindowReq& operator=(const EnableFloatingWindowReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableFloatingWindowReq& operator=(EnableFloatingWindowReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnableFloatingWindowReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnableFloatingWindowReq* internal_default_instance() {
    return reinterpret_cast<const EnableFloatingWindowReq*>(
               &_EnableFloatingWindowReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(EnableFloatingWindowReq& a, EnableFloatingWindowReq& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableFloatingWindowReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableFloatingWindowReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnableFloatingWindowReq* New() const final {
    return CreateMaybeMessage<EnableFloatingWindowReq>(nullptr);
  }

  EnableFloatingWindowReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnableFloatingWindowReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnableFloatingWindowReq& from);
  void MergeFrom(const EnableFloatingWindowReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnableFloatingWindowReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.EnableFloatingWindowReq";
  }
  protected:
  explicit EnableFloatingWindowReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:perfcat.EnableFloatingWindowReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class GetScreenInfoReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.GetScreenInfoReq) */ {
 public:
  inline GetScreenInfoReq() : GetScreenInfoReq(nullptr) {}
  virtual ~GetScreenInfoReq();

  GetScreenInfoReq(const GetScreenInfoReq& from);
  GetScreenInfoReq(GetScreenInfoReq&& from) noexcept
    : GetScreenInfoReq() {
    *this = ::std::move(from);
  }

  inline GetScreenInfoReq& operator=(const GetScreenInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetScreenInfoReq& operator=(GetScreenInfoReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetScreenInfoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetScreenInfoReq* internal_default_instance() {
    return reinterpret_cast<const GetScreenInfoReq*>(
               &_GetScreenInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(GetScreenInfoReq& a, GetScreenInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetScreenInfoReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetScreenInfoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetScreenInfoReq* New() const final {
    return CreateMaybeMessage<GetScreenInfoReq>(nullptr);
  }

  GetScreenInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetScreenInfoReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetScreenInfoReq& from);
  void MergeFrom(const GetScreenInfoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetScreenInfoReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.GetScreenInfoReq";
  }
  protected:
  explicit GetScreenInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:perfcat.GetScreenInfoReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class GetScreenInfoRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.GetScreenInfoRsp) */ {
 public:
  inline GetScreenInfoRsp() : GetScreenInfoRsp(nullptr) {}
  virtual ~GetScreenInfoRsp();

  GetScreenInfoRsp(const GetScreenInfoRsp& from);
  GetScreenInfoRsp(GetScreenInfoRsp&& from) noexcept
    : GetScreenInfoRsp() {
    *this = ::std::move(from);
  }

  inline GetScreenInfoRsp& operator=(const GetScreenInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetScreenInfoRsp& operator=(GetScreenInfoRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetScreenInfoRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetScreenInfoRsp* internal_default_instance() {
    return reinterpret_cast<const GetScreenInfoRsp*>(
               &_GetScreenInfoRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(GetScreenInfoRsp& a, GetScreenInfoRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetScreenInfoRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetScreenInfoRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetScreenInfoRsp* New() const final {
    return CreateMaybeMessage<GetScreenInfoRsp>(nullptr);
  }

  GetScreenInfoRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetScreenInfoRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetScreenInfoRsp& from);
  void MergeFrom(const GetScreenInfoRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetScreenInfoRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.GetScreenInfoRsp";
  }
  protected:
  explicit GetScreenInfoRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScreenSizeFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // float screenSize = 1;
  void clear_screensize();
  float screensize() const;
  void set_screensize(float value);
  private:
  float _internal_screensize() const;
  void _internal_set_screensize(float value);
  public:

  // int32 width = 2;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 3;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perfcat.GetScreenInfoRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float screensize_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class GetLMKThresholdReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.GetLMKThresholdReq) */ {
 public:
  inline GetLMKThresholdReq() : GetLMKThresholdReq(nullptr) {}
  virtual ~GetLMKThresholdReq();

  GetLMKThresholdReq(const GetLMKThresholdReq& from);
  GetLMKThresholdReq(GetLMKThresholdReq&& from) noexcept
    : GetLMKThresholdReq() {
    *this = ::std::move(from);
  }

  inline GetLMKThresholdReq& operator=(const GetLMKThresholdReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLMKThresholdReq& operator=(GetLMKThresholdReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLMKThresholdReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLMKThresholdReq* internal_default_instance() {
    return reinterpret_cast<const GetLMKThresholdReq*>(
               &_GetLMKThresholdReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(GetLMKThresholdReq& a, GetLMKThresholdReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLMKThresholdReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLMKThresholdReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLMKThresholdReq* New() const final {
    return CreateMaybeMessage<GetLMKThresholdReq>(nullptr);
  }

  GetLMKThresholdReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLMKThresholdReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLMKThresholdReq& from);
  void MergeFrom(const GetLMKThresholdReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLMKThresholdReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.GetLMKThresholdReq";
  }
  protected:
  explicit GetLMKThresholdReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:perfcat.GetLMKThresholdReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class GetLMKThresholdRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.GetLMKThresholdRsp) */ {
 public:
  inline GetLMKThresholdRsp() : GetLMKThresholdRsp(nullptr) {}
  virtual ~GetLMKThresholdRsp();

  GetLMKThresholdRsp(const GetLMKThresholdRsp& from);
  GetLMKThresholdRsp(GetLMKThresholdRsp&& from) noexcept
    : GetLMKThresholdRsp() {
    *this = ::std::move(from);
  }

  inline GetLMKThresholdRsp& operator=(const GetLMKThresholdRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLMKThresholdRsp& operator=(GetLMKThresholdRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLMKThresholdRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLMKThresholdRsp* internal_default_instance() {
    return reinterpret_cast<const GetLMKThresholdRsp*>(
               &_GetLMKThresholdRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(GetLMKThresholdRsp& a, GetLMKThresholdRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLMKThresholdRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLMKThresholdRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLMKThresholdRsp* New() const final {
    return CreateMaybeMessage<GetLMKThresholdRsp>(nullptr);
  }

  GetLMKThresholdRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLMKThresholdRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLMKThresholdRsp& from);
  void MergeFrom(const GetLMKThresholdRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLMKThresholdRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.GetLMKThresholdRsp";
  }
  protected:
  explicit GetLMKThresholdRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemoryThresholdFieldNumber = 1,
  };
  // int32 memoryThreshold = 1;
  void clear_memorythreshold();
  ::PROTOBUF_NAMESPACE_ID::int32 memorythreshold() const;
  void set_memorythreshold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_memorythreshold() const;
  void _internal_set_memorythreshold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perfcat.GetLMKThresholdRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 memorythreshold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class CheckOverlayPermissionReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.CheckOverlayPermissionReq) */ {
 public:
  inline CheckOverlayPermissionReq() : CheckOverlayPermissionReq(nullptr) {}
  virtual ~CheckOverlayPermissionReq();

  CheckOverlayPermissionReq(const CheckOverlayPermissionReq& from);
  CheckOverlayPermissionReq(CheckOverlayPermissionReq&& from) noexcept
    : CheckOverlayPermissionReq() {
    *this = ::std::move(from);
  }

  inline CheckOverlayPermissionReq& operator=(const CheckOverlayPermissionReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckOverlayPermissionReq& operator=(CheckOverlayPermissionReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckOverlayPermissionReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckOverlayPermissionReq* internal_default_instance() {
    return reinterpret_cast<const CheckOverlayPermissionReq*>(
               &_CheckOverlayPermissionReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(CheckOverlayPermissionReq& a, CheckOverlayPermissionReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckOverlayPermissionReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckOverlayPermissionReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckOverlayPermissionReq* New() const final {
    return CreateMaybeMessage<CheckOverlayPermissionReq>(nullptr);
  }

  CheckOverlayPermissionReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckOverlayPermissionReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckOverlayPermissionReq& from);
  void MergeFrom(const CheckOverlayPermissionReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckOverlayPermissionReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.CheckOverlayPermissionReq";
  }
  protected:
  explicit CheckOverlayPermissionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:perfcat.CheckOverlayPermissionReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class CheckOverlayPermissionRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.CheckOverlayPermissionRsp) */ {
 public:
  inline CheckOverlayPermissionRsp() : CheckOverlayPermissionRsp(nullptr) {}
  virtual ~CheckOverlayPermissionRsp();

  CheckOverlayPermissionRsp(const CheckOverlayPermissionRsp& from);
  CheckOverlayPermissionRsp(CheckOverlayPermissionRsp&& from) noexcept
    : CheckOverlayPermissionRsp() {
    *this = ::std::move(from);
  }

  inline CheckOverlayPermissionRsp& operator=(const CheckOverlayPermissionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckOverlayPermissionRsp& operator=(CheckOverlayPermissionRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckOverlayPermissionRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckOverlayPermissionRsp* internal_default_instance() {
    return reinterpret_cast<const CheckOverlayPermissionRsp*>(
               &_CheckOverlayPermissionRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(CheckOverlayPermissionRsp& a, CheckOverlayPermissionRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckOverlayPermissionRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckOverlayPermissionRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckOverlayPermissionRsp* New() const final {
    return CreateMaybeMessage<CheckOverlayPermissionRsp>(nullptr);
  }

  CheckOverlayPermissionRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckOverlayPermissionRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckOverlayPermissionRsp& from);
  void MergeFrom(const CheckOverlayPermissionRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckOverlayPermissionRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.CheckOverlayPermissionRsp";
  }
  protected:
  explicit CheckOverlayPermissionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOverLayPermissionFieldNumber = 1,
  };
  // bool overLayPermission = 1;
  void clear_overlaypermission();
  bool overlaypermission() const;
  void set_overlaypermission(bool value);
  private:
  bool _internal_overlaypermission() const;
  void _internal_set_overlaypermission(bool value);
  public:

  // @@protoc_insertion_point(class_scope:perfcat.CheckOverlayPermissionRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool overlaypermission_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class AppHelloReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.AppHelloReq) */ {
 public:
  inline AppHelloReq() : AppHelloReq(nullptr) {}
  virtual ~AppHelloReq();

  AppHelloReq(const AppHelloReq& from);
  AppHelloReq(AppHelloReq&& from) noexcept
    : AppHelloReq() {
    *this = ::std::move(from);
  }

  inline AppHelloReq& operator=(const AppHelloReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppHelloReq& operator=(AppHelloReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppHelloReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppHelloReq* internal_default_instance() {
    return reinterpret_cast<const AppHelloReq*>(
               &_AppHelloReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(AppHelloReq& a, AppHelloReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AppHelloReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppHelloReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppHelloReq* New() const final {
    return CreateMaybeMessage<AppHelloReq>(nullptr);
  }

  AppHelloReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppHelloReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppHelloReq& from);
  void MergeFrom(const AppHelloReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppHelloReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.AppHelloReq";
  }
  protected:
  explicit AppHelloReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:perfcat.AppHelloReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class AppHelloRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.AppHelloRsp) */ {
 public:
  inline AppHelloRsp() : AppHelloRsp(nullptr) {}
  virtual ~AppHelloRsp();

  AppHelloRsp(const AppHelloRsp& from);
  AppHelloRsp(AppHelloRsp&& from) noexcept
    : AppHelloRsp() {
    *this = ::std::move(from);
  }

  inline AppHelloRsp& operator=(const AppHelloRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppHelloRsp& operator=(AppHelloRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppHelloRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppHelloRsp* internal_default_instance() {
    return reinterpret_cast<const AppHelloRsp*>(
               &_AppHelloRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(AppHelloRsp& a, AppHelloRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(AppHelloRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppHelloRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppHelloRsp* New() const final {
    return CreateMaybeMessage<AppHelloRsp>(nullptr);
  }

  AppHelloRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppHelloRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppHelloRsp& from);
  void MergeFrom(const AppHelloRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppHelloRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.AppHelloRsp";
  }
  protected:
  explicit AppHelloRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:perfcat.AppHelloRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class ProfileIOSNtf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.ProfileIOSNtf) */ {
 public:
  inline ProfileIOSNtf() : ProfileIOSNtf(nullptr) {}
  virtual ~ProfileIOSNtf();

  ProfileIOSNtf(const ProfileIOSNtf& from);
  ProfileIOSNtf(ProfileIOSNtf&& from) noexcept
    : ProfileIOSNtf() {
    *this = ::std::move(from);
  }

  inline ProfileIOSNtf& operator=(const ProfileIOSNtf& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfileIOSNtf& operator=(ProfileIOSNtf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfileIOSNtf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfileIOSNtf* internal_default_instance() {
    return reinterpret_cast<const ProfileIOSNtf*>(
               &_ProfileIOSNtf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(ProfileIOSNtf& a, ProfileIOSNtf& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfileIOSNtf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfileIOSNtf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfileIOSNtf* New() const final {
    return CreateMaybeMessage<ProfileIOSNtf>(nullptr);
  }

  ProfileIOSNtf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfileIOSNtf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfileIOSNtf& from);
  void MergeFrom(const ProfileIOSNtf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfileIOSNtf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.ProfileIOSNtf";
  }
  protected:
  explicit ProfileIOSNtf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScreenshotFieldNumber = 3,
    kFpsFieldNumber = 4,
    kFrameTimeFieldNumber = 5,
    kCpuUsageFieldNumber = 6,
    kMemoryFieldNumber = 7,
    kGpuUsageFieldNumber = 8,
    kNetworkFieldNumber = 9,
    kPowerFieldNumber = 10,
    kContextSwitchFieldNumber = 11,
    kWakeupsFieldNumber = 12,
    kEnergyUsageFieldNumber = 13,
    kTimestampFieldNumber = 2,
    kIndexFieldNumber = 1,
  };
  // .perfcat.Screenshot screenshot = 3;
  bool has_screenshot() const;
  private:
  bool _internal_has_screenshot() const;
  public:
  void clear_screenshot();
  const ::perfcat::Screenshot& screenshot() const;
  ::perfcat::Screenshot* release_screenshot();
  ::perfcat::Screenshot* mutable_screenshot();
  void set_allocated_screenshot(::perfcat::Screenshot* screenshot);
  private:
  const ::perfcat::Screenshot& _internal_screenshot() const;
  ::perfcat::Screenshot* _internal_mutable_screenshot();
  public:
  void unsafe_arena_set_allocated_screenshot(
      ::perfcat::Screenshot* screenshot);
  ::perfcat::Screenshot* unsafe_arena_release_screenshot();

  // .perfcat.FPS fps = 4;
  bool has_fps() const;
  private:
  bool _internal_has_fps() const;
  public:
  void clear_fps();
  const ::perfcat::FPS& fps() const;
  ::perfcat::FPS* release_fps();
  ::perfcat::FPS* mutable_fps();
  void set_allocated_fps(::perfcat::FPS* fps);
  private:
  const ::perfcat::FPS& _internal_fps() const;
  ::perfcat::FPS* _internal_mutable_fps();
  public:
  void unsafe_arena_set_allocated_fps(
      ::perfcat::FPS* fps);
  ::perfcat::FPS* unsafe_arena_release_fps();

  // .perfcat.iOSFrameTime frameTime = 5;
  bool has_frametime() const;
  private:
  bool _internal_has_frametime() const;
  public:
  void clear_frametime();
  const ::perfcat::iOSFrameTime& frametime() const;
  ::perfcat::iOSFrameTime* release_frametime();
  ::perfcat::iOSFrameTime* mutable_frametime();
  void set_allocated_frametime(::perfcat::iOSFrameTime* frametime);
  private:
  const ::perfcat::iOSFrameTime& _internal_frametime() const;
  ::perfcat::iOSFrameTime* _internal_mutable_frametime();
  public:
  void unsafe_arena_set_allocated_frametime(
      ::perfcat::iOSFrameTime* frametime);
  ::perfcat::iOSFrameTime* unsafe_arena_release_frametime();

  // .perfcat.CpuUsage cpuUsage = 6;
  bool has_cpuusage() const;
  private:
  bool _internal_has_cpuusage() const;
  public:
  void clear_cpuusage();
  const ::perfcat::CpuUsage& cpuusage() const;
  ::perfcat::CpuUsage* release_cpuusage();
  ::perfcat::CpuUsage* mutable_cpuusage();
  void set_allocated_cpuusage(::perfcat::CpuUsage* cpuusage);
  private:
  const ::perfcat::CpuUsage& _internal_cpuusage() const;
  ::perfcat::CpuUsage* _internal_mutable_cpuusage();
  public:
  void unsafe_arena_set_allocated_cpuusage(
      ::perfcat::CpuUsage* cpuusage);
  ::perfcat::CpuUsage* unsafe_arena_release_cpuusage();

  // .perfcat.iOSMemory memory = 7;
  bool has_memory() const;
  private:
  bool _internal_has_memory() const;
  public:
  void clear_memory();
  const ::perfcat::iOSMemory& memory() const;
  ::perfcat::iOSMemory* release_memory();
  ::perfcat::iOSMemory* mutable_memory();
  void set_allocated_memory(::perfcat::iOSMemory* memory);
  private:
  const ::perfcat::iOSMemory& _internal_memory() const;
  ::perfcat::iOSMemory* _internal_mutable_memory();
  public:
  void unsafe_arena_set_allocated_memory(
      ::perfcat::iOSMemory* memory);
  ::perfcat::iOSMemory* unsafe_arena_release_memory();

  // .perfcat.iOSGpuUsage gpuUsage = 8;
  bool has_gpuusage() const;
  private:
  bool _internal_has_gpuusage() const;
  public:
  void clear_gpuusage();
  const ::perfcat::iOSGpuUsage& gpuusage() const;
  ::perfcat::iOSGpuUsage* release_gpuusage();
  ::perfcat::iOSGpuUsage* mutable_gpuusage();
  void set_allocated_gpuusage(::perfcat::iOSGpuUsage* gpuusage);
  private:
  const ::perfcat::iOSGpuUsage& _internal_gpuusage() const;
  ::perfcat::iOSGpuUsage* _internal_mutable_gpuusage();
  public:
  void unsafe_arena_set_allocated_gpuusage(
      ::perfcat::iOSGpuUsage* gpuusage);
  ::perfcat::iOSGpuUsage* unsafe_arena_release_gpuusage();

  // .perfcat.Network network = 9;
  bool has_network() const;
  private:
  bool _internal_has_network() const;
  public:
  void clear_network();
  const ::perfcat::Network& network() const;
  ::perfcat::Network* release_network();
  ::perfcat::Network* mutable_network();
  void set_allocated_network(::perfcat::Network* network);
  private:
  const ::perfcat::Network& _internal_network() const;
  ::perfcat::Network* _internal_mutable_network();
  public:
  void unsafe_arena_set_allocated_network(
      ::perfcat::Network* network);
  ::perfcat::Network* unsafe_arena_release_network();

  // .perfcat.Power power = 10;
  bool has_power() const;
  private:
  bool _internal_has_power() const;
  public:
  void clear_power();
  const ::perfcat::Power& power() const;
  ::perfcat::Power* release_power();
  ::perfcat::Power* mutable_power();
  void set_allocated_power(::perfcat::Power* power);
  private:
  const ::perfcat::Power& _internal_power() const;
  ::perfcat::Power* _internal_mutable_power();
  public:
  void unsafe_arena_set_allocated_power(
      ::perfcat::Power* power);
  ::perfcat::Power* unsafe_arena_release_power();

  // .perfcat.iOSContextSwitch contextSwitch = 11;
  bool has_contextswitch() const;
  private:
  bool _internal_has_contextswitch() const;
  public:
  void clear_contextswitch();
  const ::perfcat::iOSContextSwitch& contextswitch() const;
  ::perfcat::iOSContextSwitch* release_contextswitch();
  ::perfcat::iOSContextSwitch* mutable_contextswitch();
  void set_allocated_contextswitch(::perfcat::iOSContextSwitch* contextswitch);
  private:
  const ::perfcat::iOSContextSwitch& _internal_contextswitch() const;
  ::perfcat::iOSContextSwitch* _internal_mutable_contextswitch();
  public:
  void unsafe_arena_set_allocated_contextswitch(
      ::perfcat::iOSContextSwitch* contextswitch);
  ::perfcat::iOSContextSwitch* unsafe_arena_release_contextswitch();

  // .perfcat.iOSWakeups wakeups = 12;
  bool has_wakeups() const;
  private:
  bool _internal_has_wakeups() const;
  public:
  void clear_wakeups();
  const ::perfcat::iOSWakeups& wakeups() const;
  ::perfcat::iOSWakeups* release_wakeups();
  ::perfcat::iOSWakeups* mutable_wakeups();
  void set_allocated_wakeups(::perfcat::iOSWakeups* wakeups);
  private:
  const ::perfcat::iOSWakeups& _internal_wakeups() const;
  ::perfcat::iOSWakeups* _internal_mutable_wakeups();
  public:
  void unsafe_arena_set_allocated_wakeups(
      ::perfcat::iOSWakeups* wakeups);
  ::perfcat::iOSWakeups* unsafe_arena_release_wakeups();

  // .perfcat.iOSEnergyUsage energyUsage = 13;
  bool has_energyusage() const;
  private:
  bool _internal_has_energyusage() const;
  public:
  void clear_energyusage();
  const ::perfcat::iOSEnergyUsage& energyusage() const;
  ::perfcat::iOSEnergyUsage* release_energyusage();
  ::perfcat::iOSEnergyUsage* mutable_energyusage();
  void set_allocated_energyusage(::perfcat::iOSEnergyUsage* energyusage);
  private:
  const ::perfcat::iOSEnergyUsage& _internal_energyusage() const;
  ::perfcat::iOSEnergyUsage* _internal_mutable_energyusage();
  public:
  void unsafe_arena_set_allocated_energyusage(
      ::perfcat::iOSEnergyUsage* energyusage);
  ::perfcat::iOSEnergyUsage* unsafe_arena_release_energyusage();

  // int64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perfcat.ProfileIOSNtf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::perfcat::Screenshot* screenshot_;
  ::perfcat::FPS* fps_;
  ::perfcat::iOSFrameTime* frametime_;
  ::perfcat::CpuUsage* cpuusage_;
  ::perfcat::iOSMemory* memory_;
  ::perfcat::iOSGpuUsage* gpuusage_;
  ::perfcat::Network* network_;
  ::perfcat::Power* power_;
  ::perfcat::iOSContextSwitch* contextswitch_;
  ::perfcat::iOSWakeups* wakeups_;
  ::perfcat::iOSEnergyUsage* energyusage_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class iOSFrameTime PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.iOSFrameTime) */ {
 public:
  inline iOSFrameTime() : iOSFrameTime(nullptr) {}
  virtual ~iOSFrameTime();

  iOSFrameTime(const iOSFrameTime& from);
  iOSFrameTime(iOSFrameTime&& from) noexcept
    : iOSFrameTime() {
    *this = ::std::move(from);
  }

  inline iOSFrameTime& operator=(const iOSFrameTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline iOSFrameTime& operator=(iOSFrameTime&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const iOSFrameTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const iOSFrameTime* internal_default_instance() {
    return reinterpret_cast<const iOSFrameTime*>(
               &_iOSFrameTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(iOSFrameTime& a, iOSFrameTime& b) {
    a.Swap(&b);
  }
  inline void Swap(iOSFrameTime* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(iOSFrameTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline iOSFrameTime* New() const final {
    return CreateMaybeMessage<iOSFrameTime>(nullptr);
  }

  iOSFrameTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<iOSFrameTime>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const iOSFrameTime& from);
  void MergeFrom(const iOSFrameTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(iOSFrameTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.iOSFrameTime";
  }
  protected:
  explicit iOSFrameTime(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameTimeFieldNumber = 1,
  };
  // repeated .perfcat.iOSFrameRecord frameTime = 1;
  int frametime_size() const;
  private:
  int _internal_frametime_size() const;
  public:
  void clear_frametime();
  ::perfcat::iOSFrameRecord* mutable_frametime(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfcat::iOSFrameRecord >*
      mutable_frametime();
  private:
  const ::perfcat::iOSFrameRecord& _internal_frametime(int index) const;
  ::perfcat::iOSFrameRecord* _internal_add_frametime();
  public:
  const ::perfcat::iOSFrameRecord& frametime(int index) const;
  ::perfcat::iOSFrameRecord* add_frametime();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfcat::iOSFrameRecord >&
      frametime() const;

  // @@protoc_insertion_point(class_scope:perfcat.iOSFrameTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfcat::iOSFrameRecord > frametime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class iOSFrameRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.iOSFrameRecord) */ {
 public:
  inline iOSFrameRecord() : iOSFrameRecord(nullptr) {}
  virtual ~iOSFrameRecord();

  iOSFrameRecord(const iOSFrameRecord& from);
  iOSFrameRecord(iOSFrameRecord&& from) noexcept
    : iOSFrameRecord() {
    *this = ::std::move(from);
  }

  inline iOSFrameRecord& operator=(const iOSFrameRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline iOSFrameRecord& operator=(iOSFrameRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const iOSFrameRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const iOSFrameRecord* internal_default_instance() {
    return reinterpret_cast<const iOSFrameRecord*>(
               &_iOSFrameRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(iOSFrameRecord& a, iOSFrameRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(iOSFrameRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(iOSFrameRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline iOSFrameRecord* New() const final {
    return CreateMaybeMessage<iOSFrameRecord>(nullptr);
  }

  iOSFrameRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<iOSFrameRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const iOSFrameRecord& from);
  void MergeFrom(const iOSFrameRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(iOSFrameRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.iOSFrameRecord";
  }
  protected:
  explicit iOSFrameRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kFrameTimeFieldNumber = 2,
  };
  // int64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float frameTime = 2;
  void clear_frametime();
  float frametime() const;
  void set_frametime(float value);
  private:
  float _internal_frametime() const;
  void _internal_set_frametime(float value);
  public:

  // @@protoc_insertion_point(class_scope:perfcat.iOSFrameRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  float frametime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class iOSMemory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.iOSMemory) */ {
 public:
  inline iOSMemory() : iOSMemory(nullptr) {}
  virtual ~iOSMemory();

  iOSMemory(const iOSMemory& from);
  iOSMemory(iOSMemory&& from) noexcept
    : iOSMemory() {
    *this = ::std::move(from);
  }

  inline iOSMemory& operator=(const iOSMemory& from) {
    CopyFrom(from);
    return *this;
  }
  inline iOSMemory& operator=(iOSMemory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const iOSMemory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const iOSMemory* internal_default_instance() {
    return reinterpret_cast<const iOSMemory*>(
               &_iOSMemory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(iOSMemory& a, iOSMemory& b) {
    a.Swap(&b);
  }
  inline void Swap(iOSMemory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(iOSMemory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline iOSMemory* New() const final {
    return CreateMaybeMessage<iOSMemory>(nullptr);
  }

  iOSMemory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<iOSMemory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const iOSMemory& from);
  void MergeFrom(const iOSMemory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(iOSMemory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.iOSMemory";
  }
  protected:
  explicit iOSMemory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemoryFieldNumber = 1,
    kVirtualMemoryFieldNumber = 2,
    kRealMemoryFieldNumber = 3,
    kXcodeMemoryFieldNumber = 4,
  };
  // int32 memory = 1;
  void clear_memory();
  ::PROTOBUF_NAMESPACE_ID::int32 memory() const;
  void set_memory(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_memory() const;
  void _internal_set_memory(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 virtualMemory = 2;
  void clear_virtualmemory();
  ::PROTOBUF_NAMESPACE_ID::int32 virtualmemory() const;
  void set_virtualmemory(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_virtualmemory() const;
  void _internal_set_virtualmemory(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 realMemory = 3;
  void clear_realmemory();
  ::PROTOBUF_NAMESPACE_ID::int32 realmemory() const;
  void set_realmemory(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_realmemory() const;
  void _internal_set_realmemory(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 xcodeMemory = 4;
  void clear_xcodememory();
  ::PROTOBUF_NAMESPACE_ID::int32 xcodememory() const;
  void set_xcodememory(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xcodememory() const;
  void _internal_set_xcodememory(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perfcat.iOSMemory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 memory_;
  ::PROTOBUF_NAMESPACE_ID::int32 virtualmemory_;
  ::PROTOBUF_NAMESPACE_ID::int32 realmemory_;
  ::PROTOBUF_NAMESPACE_ID::int32 xcodememory_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class iOSGpuUsage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.iOSGpuUsage) */ {
 public:
  inline iOSGpuUsage() : iOSGpuUsage(nullptr) {}
  virtual ~iOSGpuUsage();

  iOSGpuUsage(const iOSGpuUsage& from);
  iOSGpuUsage(iOSGpuUsage&& from) noexcept
    : iOSGpuUsage() {
    *this = ::std::move(from);
  }

  inline iOSGpuUsage& operator=(const iOSGpuUsage& from) {
    CopyFrom(from);
    return *this;
  }
  inline iOSGpuUsage& operator=(iOSGpuUsage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const iOSGpuUsage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const iOSGpuUsage* internal_default_instance() {
    return reinterpret_cast<const iOSGpuUsage*>(
               &_iOSGpuUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(iOSGpuUsage& a, iOSGpuUsage& b) {
    a.Swap(&b);
  }
  inline void Swap(iOSGpuUsage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(iOSGpuUsage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline iOSGpuUsage* New() const final {
    return CreateMaybeMessage<iOSGpuUsage>(nullptr);
  }

  iOSGpuUsage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<iOSGpuUsage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const iOSGpuUsage& from);
  void MergeFrom(const iOSGpuUsage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(iOSGpuUsage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.iOSGpuUsage";
  }
  protected:
  explicit iOSGpuUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGpuRenderFieldNumber = 1,
    kGpuTilerFieldNumber = 2,
    kGpuDeviceFieldNumber = 3,
  };
  // float gpuRender = 1;
  void clear_gpurender();
  float gpurender() const;
  void set_gpurender(float value);
  private:
  float _internal_gpurender() const;
  void _internal_set_gpurender(float value);
  public:

  // float gpuTiler = 2;
  void clear_gputiler();
  float gputiler() const;
  void set_gputiler(float value);
  private:
  float _internal_gputiler() const;
  void _internal_set_gputiler(float value);
  public:

  // float gpuDevice = 3;
  void clear_gpudevice();
  float gpudevice() const;
  void set_gpudevice(float value);
  private:
  float _internal_gpudevice() const;
  void _internal_set_gpudevice(float value);
  public:

  // @@protoc_insertion_point(class_scope:perfcat.iOSGpuUsage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float gpurender_;
  float gputiler_;
  float gpudevice_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class iOSContextSwitch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.iOSContextSwitch) */ {
 public:
  inline iOSContextSwitch() : iOSContextSwitch(nullptr) {}
  virtual ~iOSContextSwitch();

  iOSContextSwitch(const iOSContextSwitch& from);
  iOSContextSwitch(iOSContextSwitch&& from) noexcept
    : iOSContextSwitch() {
    *this = ::std::move(from);
  }

  inline iOSContextSwitch& operator=(const iOSContextSwitch& from) {
    CopyFrom(from);
    return *this;
  }
  inline iOSContextSwitch& operator=(iOSContextSwitch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const iOSContextSwitch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const iOSContextSwitch* internal_default_instance() {
    return reinterpret_cast<const iOSContextSwitch*>(
               &_iOSContextSwitch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(iOSContextSwitch& a, iOSContextSwitch& b) {
    a.Swap(&b);
  }
  inline void Swap(iOSContextSwitch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(iOSContextSwitch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline iOSContextSwitch* New() const final {
    return CreateMaybeMessage<iOSContextSwitch>(nullptr);
  }

  iOSContextSwitch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<iOSContextSwitch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const iOSContextSwitch& from);
  void MergeFrom(const iOSContextSwitch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(iOSContextSwitch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.iOSContextSwitch";
  }
  protected:
  explicit iOSContextSwitch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContextSwitchFieldNumber = 1,
  };
  // int32 contextSwitch = 1;
  void clear_contextswitch();
  ::PROTOBUF_NAMESPACE_ID::int32 contextswitch() const;
  void set_contextswitch(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_contextswitch() const;
  void _internal_set_contextswitch(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perfcat.iOSContextSwitch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 contextswitch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class iOSWakeups PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.iOSWakeups) */ {
 public:
  inline iOSWakeups() : iOSWakeups(nullptr) {}
  virtual ~iOSWakeups();

  iOSWakeups(const iOSWakeups& from);
  iOSWakeups(iOSWakeups&& from) noexcept
    : iOSWakeups() {
    *this = ::std::move(from);
  }

  inline iOSWakeups& operator=(const iOSWakeups& from) {
    CopyFrom(from);
    return *this;
  }
  inline iOSWakeups& operator=(iOSWakeups&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const iOSWakeups& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const iOSWakeups* internal_default_instance() {
    return reinterpret_cast<const iOSWakeups*>(
               &_iOSWakeups_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(iOSWakeups& a, iOSWakeups& b) {
    a.Swap(&b);
  }
  inline void Swap(iOSWakeups* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(iOSWakeups* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline iOSWakeups* New() const final {
    return CreateMaybeMessage<iOSWakeups>(nullptr);
  }

  iOSWakeups* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<iOSWakeups>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const iOSWakeups& from);
  void MergeFrom(const iOSWakeups& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(iOSWakeups* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.iOSWakeups";
  }
  protected:
  explicit iOSWakeups(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWakeupsFieldNumber = 1,
  };
  // int32 wakeups = 1;
  void clear_wakeups();
  ::PROTOBUF_NAMESPACE_ID::int32 wakeups() const;
  void set_wakeups(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wakeups() const;
  void _internal_set_wakeups(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perfcat.iOSWakeups)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 wakeups_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// -------------------------------------------------------------------

class iOSEnergyUsage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:perfcat.iOSEnergyUsage) */ {
 public:
  inline iOSEnergyUsage() : iOSEnergyUsage(nullptr) {}
  virtual ~iOSEnergyUsage();

  iOSEnergyUsage(const iOSEnergyUsage& from);
  iOSEnergyUsage(iOSEnergyUsage&& from) noexcept
    : iOSEnergyUsage() {
    *this = ::std::move(from);
  }

  inline iOSEnergyUsage& operator=(const iOSEnergyUsage& from) {
    CopyFrom(from);
    return *this;
  }
  inline iOSEnergyUsage& operator=(iOSEnergyUsage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const iOSEnergyUsage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const iOSEnergyUsage* internal_default_instance() {
    return reinterpret_cast<const iOSEnergyUsage*>(
               &_iOSEnergyUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(iOSEnergyUsage& a, iOSEnergyUsage& b) {
    a.Swap(&b);
  }
  inline void Swap(iOSEnergyUsage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(iOSEnergyUsage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline iOSEnergyUsage* New() const final {
    return CreateMaybeMessage<iOSEnergyUsage>(nullptr);
  }

  iOSEnergyUsage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<iOSEnergyUsage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const iOSEnergyUsage& from);
  void MergeFrom(const iOSEnergyUsage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(iOSEnergyUsage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfcat.iOSEnergyUsage";
  }
  protected:
  explicit iOSEnergyUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_perfcat_2eproto);
    return ::descriptor_table_perfcat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpuEnergyFieldNumber = 1,
    kGpuEnergyFieldNumber = 2,
    kNetworkEnergyFieldNumber = 3,
    kLocationEnergyFieldNumber = 4,
    kDisplayEnergyFieldNumber = 5,
    kOverheadEnergyFieldNumber = 6,
  };
  // int32 cpuEnergy = 1;
  void clear_cpuenergy();
  ::PROTOBUF_NAMESPACE_ID::int32 cpuenergy() const;
  void set_cpuenergy(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cpuenergy() const;
  void _internal_set_cpuenergy(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gpuEnergy = 2;
  void clear_gpuenergy();
  ::PROTOBUF_NAMESPACE_ID::int32 gpuenergy() const;
  void set_gpuenergy(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gpuenergy() const;
  void _internal_set_gpuenergy(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 networkEnergy = 3;
  void clear_networkenergy();
  ::PROTOBUF_NAMESPACE_ID::int32 networkenergy() const;
  void set_networkenergy(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_networkenergy() const;
  void _internal_set_networkenergy(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 locationEnergy = 4;
  void clear_locationenergy();
  ::PROTOBUF_NAMESPACE_ID::int32 locationenergy() const;
  void set_locationenergy(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_locationenergy() const;
  void _internal_set_locationenergy(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 displayEnergy = 5;
  void clear_displayenergy();
  ::PROTOBUF_NAMESPACE_ID::int32 displayenergy() const;
  void set_displayenergy(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_displayenergy() const;
  void _internal_set_displayenergy(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 overheadEnergy = 6;
  void clear_overheadenergy();
  ::PROTOBUF_NAMESPACE_ID::int32 overheadenergy() const;
  void set_overheadenergy(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_overheadenergy() const;
  void _internal_set_overheadenergy(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:perfcat.iOSEnergyUsage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 cpuenergy_;
  ::PROTOBUF_NAMESPACE_ID::int32 gpuenergy_;
  ::PROTOBUF_NAMESPACE_ID::int32 networkenergy_;
  ::PROTOBUF_NAMESPACE_ID::int32 locationenergy_;
  ::PROTOBUF_NAMESPACE_ID::int32 displayenergy_;
  ::PROTOBUF_NAMESPACE_ID::int32 overheadenergy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_perfcat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PerfcatAppProtocol

// .perfcat.GetAppInfoReq getAppInfoReq = 1;
inline bool PerfcatAppProtocol::_internal_has_getappinforeq() const {
  return protocol_case() == kGetAppInfoReq;
}
inline bool PerfcatAppProtocol::has_getappinforeq() const {
  return _internal_has_getappinforeq();
}
inline void PerfcatAppProtocol::set_has_getappinforeq() {
  _oneof_case_[0] = kGetAppInfoReq;
}
inline void PerfcatAppProtocol::clear_getappinforeq() {
  if (_internal_has_getappinforeq()) {
    if (GetArena() == nullptr) {
      delete protocol_.getappinforeq_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::GetAppInfoReq* PerfcatAppProtocol::release_getappinforeq() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatAppProtocol.getAppInfoReq)
  if (_internal_has_getappinforeq()) {
    clear_has_protocol();
      ::perfcat::GetAppInfoReq* temp = protocol_.getappinforeq_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.getappinforeq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::GetAppInfoReq& PerfcatAppProtocol::_internal_getappinforeq() const {
  return _internal_has_getappinforeq()
      ? *protocol_.getappinforeq_
      : *reinterpret_cast< ::perfcat::GetAppInfoReq*>(&::perfcat::_GetAppInfoReq_default_instance_);
}
inline const ::perfcat::GetAppInfoReq& PerfcatAppProtocol::getappinforeq() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatAppProtocol.getAppInfoReq)
  return _internal_getappinforeq();
}
inline ::perfcat::GetAppInfoReq* PerfcatAppProtocol::unsafe_arena_release_getappinforeq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatAppProtocol.getAppInfoReq)
  if (_internal_has_getappinforeq()) {
    clear_has_protocol();
    ::perfcat::GetAppInfoReq* temp = protocol_.getappinforeq_;
    protocol_.getappinforeq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatAppProtocol::unsafe_arena_set_allocated_getappinforeq(::perfcat::GetAppInfoReq* getappinforeq) {
  clear_protocol();
  if (getappinforeq) {
    set_has_getappinforeq();
    protocol_.getappinforeq_ = getappinforeq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatAppProtocol.getAppInfoReq)
}
inline ::perfcat::GetAppInfoReq* PerfcatAppProtocol::_internal_mutable_getappinforeq() {
  if (!_internal_has_getappinforeq()) {
    clear_protocol();
    set_has_getappinforeq();
    protocol_.getappinforeq_ = CreateMaybeMessage< ::perfcat::GetAppInfoReq >(GetArena());
  }
  return protocol_.getappinforeq_;
}
inline ::perfcat::GetAppInfoReq* PerfcatAppProtocol::mutable_getappinforeq() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatAppProtocol.getAppInfoReq)
  return _internal_mutable_getappinforeq();
}

// .perfcat.GetAppInfoRsp getAppInfoRsp = 2;
inline bool PerfcatAppProtocol::_internal_has_getappinforsp() const {
  return protocol_case() == kGetAppInfoRsp;
}
inline bool PerfcatAppProtocol::has_getappinforsp() const {
  return _internal_has_getappinforsp();
}
inline void PerfcatAppProtocol::set_has_getappinforsp() {
  _oneof_case_[0] = kGetAppInfoRsp;
}
inline void PerfcatAppProtocol::clear_getappinforsp() {
  if (_internal_has_getappinforsp()) {
    if (GetArena() == nullptr) {
      delete protocol_.getappinforsp_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::GetAppInfoRsp* PerfcatAppProtocol::release_getappinforsp() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatAppProtocol.getAppInfoRsp)
  if (_internal_has_getappinforsp()) {
    clear_has_protocol();
      ::perfcat::GetAppInfoRsp* temp = protocol_.getappinforsp_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.getappinforsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::GetAppInfoRsp& PerfcatAppProtocol::_internal_getappinforsp() const {
  return _internal_has_getappinforsp()
      ? *protocol_.getappinforsp_
      : *reinterpret_cast< ::perfcat::GetAppInfoRsp*>(&::perfcat::_GetAppInfoRsp_default_instance_);
}
inline const ::perfcat::GetAppInfoRsp& PerfcatAppProtocol::getappinforsp() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatAppProtocol.getAppInfoRsp)
  return _internal_getappinforsp();
}
inline ::perfcat::GetAppInfoRsp* PerfcatAppProtocol::unsafe_arena_release_getappinforsp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatAppProtocol.getAppInfoRsp)
  if (_internal_has_getappinforsp()) {
    clear_has_protocol();
    ::perfcat::GetAppInfoRsp* temp = protocol_.getappinforsp_;
    protocol_.getappinforsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatAppProtocol::unsafe_arena_set_allocated_getappinforsp(::perfcat::GetAppInfoRsp* getappinforsp) {
  clear_protocol();
  if (getappinforsp) {
    set_has_getappinforsp();
    protocol_.getappinforsp_ = getappinforsp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatAppProtocol.getAppInfoRsp)
}
inline ::perfcat::GetAppInfoRsp* PerfcatAppProtocol::_internal_mutable_getappinforsp() {
  if (!_internal_has_getappinforsp()) {
    clear_protocol();
    set_has_getappinforsp();
    protocol_.getappinforsp_ = CreateMaybeMessage< ::perfcat::GetAppInfoRsp >(GetArena());
  }
  return protocol_.getappinforsp_;
}
inline ::perfcat::GetAppInfoRsp* PerfcatAppProtocol::mutable_getappinforsp() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatAppProtocol.getAppInfoRsp)
  return _internal_mutable_getappinforsp();
}

// .perfcat.GetScreenInfoReq getScreenInfoReq = 3;
inline bool PerfcatAppProtocol::_internal_has_getscreeninforeq() const {
  return protocol_case() == kGetScreenInfoReq;
}
inline bool PerfcatAppProtocol::has_getscreeninforeq() const {
  return _internal_has_getscreeninforeq();
}
inline void PerfcatAppProtocol::set_has_getscreeninforeq() {
  _oneof_case_[0] = kGetScreenInfoReq;
}
inline void PerfcatAppProtocol::clear_getscreeninforeq() {
  if (_internal_has_getscreeninforeq()) {
    if (GetArena() == nullptr) {
      delete protocol_.getscreeninforeq_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::GetScreenInfoReq* PerfcatAppProtocol::release_getscreeninforeq() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatAppProtocol.getScreenInfoReq)
  if (_internal_has_getscreeninforeq()) {
    clear_has_protocol();
      ::perfcat::GetScreenInfoReq* temp = protocol_.getscreeninforeq_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.getscreeninforeq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::GetScreenInfoReq& PerfcatAppProtocol::_internal_getscreeninforeq() const {
  return _internal_has_getscreeninforeq()
      ? *protocol_.getscreeninforeq_
      : *reinterpret_cast< ::perfcat::GetScreenInfoReq*>(&::perfcat::_GetScreenInfoReq_default_instance_);
}
inline const ::perfcat::GetScreenInfoReq& PerfcatAppProtocol::getscreeninforeq() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatAppProtocol.getScreenInfoReq)
  return _internal_getscreeninforeq();
}
inline ::perfcat::GetScreenInfoReq* PerfcatAppProtocol::unsafe_arena_release_getscreeninforeq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatAppProtocol.getScreenInfoReq)
  if (_internal_has_getscreeninforeq()) {
    clear_has_protocol();
    ::perfcat::GetScreenInfoReq* temp = protocol_.getscreeninforeq_;
    protocol_.getscreeninforeq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatAppProtocol::unsafe_arena_set_allocated_getscreeninforeq(::perfcat::GetScreenInfoReq* getscreeninforeq) {
  clear_protocol();
  if (getscreeninforeq) {
    set_has_getscreeninforeq();
    protocol_.getscreeninforeq_ = getscreeninforeq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatAppProtocol.getScreenInfoReq)
}
inline ::perfcat::GetScreenInfoReq* PerfcatAppProtocol::_internal_mutable_getscreeninforeq() {
  if (!_internal_has_getscreeninforeq()) {
    clear_protocol();
    set_has_getscreeninforeq();
    protocol_.getscreeninforeq_ = CreateMaybeMessage< ::perfcat::GetScreenInfoReq >(GetArena());
  }
  return protocol_.getscreeninforeq_;
}
inline ::perfcat::GetScreenInfoReq* PerfcatAppProtocol::mutable_getscreeninforeq() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatAppProtocol.getScreenInfoReq)
  return _internal_mutable_getscreeninforeq();
}

// .perfcat.GetScreenInfoRsp getScreenInfoRsp = 4;
inline bool PerfcatAppProtocol::_internal_has_getscreeninforsp() const {
  return protocol_case() == kGetScreenInfoRsp;
}
inline bool PerfcatAppProtocol::has_getscreeninforsp() const {
  return _internal_has_getscreeninforsp();
}
inline void PerfcatAppProtocol::set_has_getscreeninforsp() {
  _oneof_case_[0] = kGetScreenInfoRsp;
}
inline void PerfcatAppProtocol::clear_getscreeninforsp() {
  if (_internal_has_getscreeninforsp()) {
    if (GetArena() == nullptr) {
      delete protocol_.getscreeninforsp_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::GetScreenInfoRsp* PerfcatAppProtocol::release_getscreeninforsp() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatAppProtocol.getScreenInfoRsp)
  if (_internal_has_getscreeninforsp()) {
    clear_has_protocol();
      ::perfcat::GetScreenInfoRsp* temp = protocol_.getscreeninforsp_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.getscreeninforsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::GetScreenInfoRsp& PerfcatAppProtocol::_internal_getscreeninforsp() const {
  return _internal_has_getscreeninforsp()
      ? *protocol_.getscreeninforsp_
      : *reinterpret_cast< ::perfcat::GetScreenInfoRsp*>(&::perfcat::_GetScreenInfoRsp_default_instance_);
}
inline const ::perfcat::GetScreenInfoRsp& PerfcatAppProtocol::getscreeninforsp() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatAppProtocol.getScreenInfoRsp)
  return _internal_getscreeninforsp();
}
inline ::perfcat::GetScreenInfoRsp* PerfcatAppProtocol::unsafe_arena_release_getscreeninforsp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatAppProtocol.getScreenInfoRsp)
  if (_internal_has_getscreeninforsp()) {
    clear_has_protocol();
    ::perfcat::GetScreenInfoRsp* temp = protocol_.getscreeninforsp_;
    protocol_.getscreeninforsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatAppProtocol::unsafe_arena_set_allocated_getscreeninforsp(::perfcat::GetScreenInfoRsp* getscreeninforsp) {
  clear_protocol();
  if (getscreeninforsp) {
    set_has_getscreeninforsp();
    protocol_.getscreeninforsp_ = getscreeninforsp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatAppProtocol.getScreenInfoRsp)
}
inline ::perfcat::GetScreenInfoRsp* PerfcatAppProtocol::_internal_mutable_getscreeninforsp() {
  if (!_internal_has_getscreeninforsp()) {
    clear_protocol();
    set_has_getscreeninforsp();
    protocol_.getscreeninforsp_ = CreateMaybeMessage< ::perfcat::GetScreenInfoRsp >(GetArena());
  }
  return protocol_.getscreeninforsp_;
}
inline ::perfcat::GetScreenInfoRsp* PerfcatAppProtocol::mutable_getscreeninforsp() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatAppProtocol.getScreenInfoRsp)
  return _internal_mutable_getscreeninforsp();
}

// .perfcat.GetLMKThresholdReq getLMKThresholdReq = 5;
inline bool PerfcatAppProtocol::_internal_has_getlmkthresholdreq() const {
  return protocol_case() == kGetLMKThresholdReq;
}
inline bool PerfcatAppProtocol::has_getlmkthresholdreq() const {
  return _internal_has_getlmkthresholdreq();
}
inline void PerfcatAppProtocol::set_has_getlmkthresholdreq() {
  _oneof_case_[0] = kGetLMKThresholdReq;
}
inline void PerfcatAppProtocol::clear_getlmkthresholdreq() {
  if (_internal_has_getlmkthresholdreq()) {
    if (GetArena() == nullptr) {
      delete protocol_.getlmkthresholdreq_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::GetLMKThresholdReq* PerfcatAppProtocol::release_getlmkthresholdreq() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatAppProtocol.getLMKThresholdReq)
  if (_internal_has_getlmkthresholdreq()) {
    clear_has_protocol();
      ::perfcat::GetLMKThresholdReq* temp = protocol_.getlmkthresholdreq_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.getlmkthresholdreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::GetLMKThresholdReq& PerfcatAppProtocol::_internal_getlmkthresholdreq() const {
  return _internal_has_getlmkthresholdreq()
      ? *protocol_.getlmkthresholdreq_
      : *reinterpret_cast< ::perfcat::GetLMKThresholdReq*>(&::perfcat::_GetLMKThresholdReq_default_instance_);
}
inline const ::perfcat::GetLMKThresholdReq& PerfcatAppProtocol::getlmkthresholdreq() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatAppProtocol.getLMKThresholdReq)
  return _internal_getlmkthresholdreq();
}
inline ::perfcat::GetLMKThresholdReq* PerfcatAppProtocol::unsafe_arena_release_getlmkthresholdreq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatAppProtocol.getLMKThresholdReq)
  if (_internal_has_getlmkthresholdreq()) {
    clear_has_protocol();
    ::perfcat::GetLMKThresholdReq* temp = protocol_.getlmkthresholdreq_;
    protocol_.getlmkthresholdreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatAppProtocol::unsafe_arena_set_allocated_getlmkthresholdreq(::perfcat::GetLMKThresholdReq* getlmkthresholdreq) {
  clear_protocol();
  if (getlmkthresholdreq) {
    set_has_getlmkthresholdreq();
    protocol_.getlmkthresholdreq_ = getlmkthresholdreq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatAppProtocol.getLMKThresholdReq)
}
inline ::perfcat::GetLMKThresholdReq* PerfcatAppProtocol::_internal_mutable_getlmkthresholdreq() {
  if (!_internal_has_getlmkthresholdreq()) {
    clear_protocol();
    set_has_getlmkthresholdreq();
    protocol_.getlmkthresholdreq_ = CreateMaybeMessage< ::perfcat::GetLMKThresholdReq >(GetArena());
  }
  return protocol_.getlmkthresholdreq_;
}
inline ::perfcat::GetLMKThresholdReq* PerfcatAppProtocol::mutable_getlmkthresholdreq() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatAppProtocol.getLMKThresholdReq)
  return _internal_mutable_getlmkthresholdreq();
}

// .perfcat.GetLMKThresholdRsp getLMKThresholdRsp = 6;
inline bool PerfcatAppProtocol::_internal_has_getlmkthresholdrsp() const {
  return protocol_case() == kGetLMKThresholdRsp;
}
inline bool PerfcatAppProtocol::has_getlmkthresholdrsp() const {
  return _internal_has_getlmkthresholdrsp();
}
inline void PerfcatAppProtocol::set_has_getlmkthresholdrsp() {
  _oneof_case_[0] = kGetLMKThresholdRsp;
}
inline void PerfcatAppProtocol::clear_getlmkthresholdrsp() {
  if (_internal_has_getlmkthresholdrsp()) {
    if (GetArena() == nullptr) {
      delete protocol_.getlmkthresholdrsp_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::GetLMKThresholdRsp* PerfcatAppProtocol::release_getlmkthresholdrsp() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatAppProtocol.getLMKThresholdRsp)
  if (_internal_has_getlmkthresholdrsp()) {
    clear_has_protocol();
      ::perfcat::GetLMKThresholdRsp* temp = protocol_.getlmkthresholdrsp_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.getlmkthresholdrsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::GetLMKThresholdRsp& PerfcatAppProtocol::_internal_getlmkthresholdrsp() const {
  return _internal_has_getlmkthresholdrsp()
      ? *protocol_.getlmkthresholdrsp_
      : *reinterpret_cast< ::perfcat::GetLMKThresholdRsp*>(&::perfcat::_GetLMKThresholdRsp_default_instance_);
}
inline const ::perfcat::GetLMKThresholdRsp& PerfcatAppProtocol::getlmkthresholdrsp() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatAppProtocol.getLMKThresholdRsp)
  return _internal_getlmkthresholdrsp();
}
inline ::perfcat::GetLMKThresholdRsp* PerfcatAppProtocol::unsafe_arena_release_getlmkthresholdrsp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatAppProtocol.getLMKThresholdRsp)
  if (_internal_has_getlmkthresholdrsp()) {
    clear_has_protocol();
    ::perfcat::GetLMKThresholdRsp* temp = protocol_.getlmkthresholdrsp_;
    protocol_.getlmkthresholdrsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatAppProtocol::unsafe_arena_set_allocated_getlmkthresholdrsp(::perfcat::GetLMKThresholdRsp* getlmkthresholdrsp) {
  clear_protocol();
  if (getlmkthresholdrsp) {
    set_has_getlmkthresholdrsp();
    protocol_.getlmkthresholdrsp_ = getlmkthresholdrsp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatAppProtocol.getLMKThresholdRsp)
}
inline ::perfcat::GetLMKThresholdRsp* PerfcatAppProtocol::_internal_mutable_getlmkthresholdrsp() {
  if (!_internal_has_getlmkthresholdrsp()) {
    clear_protocol();
    set_has_getlmkthresholdrsp();
    protocol_.getlmkthresholdrsp_ = CreateMaybeMessage< ::perfcat::GetLMKThresholdRsp >(GetArena());
  }
  return protocol_.getlmkthresholdrsp_;
}
inline ::perfcat::GetLMKThresholdRsp* PerfcatAppProtocol::mutable_getlmkthresholdrsp() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatAppProtocol.getLMKThresholdRsp)
  return _internal_mutable_getlmkthresholdrsp();
}

// .perfcat.CheckOverlayPermissionReq checkOverlayPermissionReq = 7;
inline bool PerfcatAppProtocol::_internal_has_checkoverlaypermissionreq() const {
  return protocol_case() == kCheckOverlayPermissionReq;
}
inline bool PerfcatAppProtocol::has_checkoverlaypermissionreq() const {
  return _internal_has_checkoverlaypermissionreq();
}
inline void PerfcatAppProtocol::set_has_checkoverlaypermissionreq() {
  _oneof_case_[0] = kCheckOverlayPermissionReq;
}
inline void PerfcatAppProtocol::clear_checkoverlaypermissionreq() {
  if (_internal_has_checkoverlaypermissionreq()) {
    if (GetArena() == nullptr) {
      delete protocol_.checkoverlaypermissionreq_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::CheckOverlayPermissionReq* PerfcatAppProtocol::release_checkoverlaypermissionreq() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatAppProtocol.checkOverlayPermissionReq)
  if (_internal_has_checkoverlaypermissionreq()) {
    clear_has_protocol();
      ::perfcat::CheckOverlayPermissionReq* temp = protocol_.checkoverlaypermissionreq_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.checkoverlaypermissionreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::CheckOverlayPermissionReq& PerfcatAppProtocol::_internal_checkoverlaypermissionreq() const {
  return _internal_has_checkoverlaypermissionreq()
      ? *protocol_.checkoverlaypermissionreq_
      : *reinterpret_cast< ::perfcat::CheckOverlayPermissionReq*>(&::perfcat::_CheckOverlayPermissionReq_default_instance_);
}
inline const ::perfcat::CheckOverlayPermissionReq& PerfcatAppProtocol::checkoverlaypermissionreq() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatAppProtocol.checkOverlayPermissionReq)
  return _internal_checkoverlaypermissionreq();
}
inline ::perfcat::CheckOverlayPermissionReq* PerfcatAppProtocol::unsafe_arena_release_checkoverlaypermissionreq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatAppProtocol.checkOverlayPermissionReq)
  if (_internal_has_checkoverlaypermissionreq()) {
    clear_has_protocol();
    ::perfcat::CheckOverlayPermissionReq* temp = protocol_.checkoverlaypermissionreq_;
    protocol_.checkoverlaypermissionreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatAppProtocol::unsafe_arena_set_allocated_checkoverlaypermissionreq(::perfcat::CheckOverlayPermissionReq* checkoverlaypermissionreq) {
  clear_protocol();
  if (checkoverlaypermissionreq) {
    set_has_checkoverlaypermissionreq();
    protocol_.checkoverlaypermissionreq_ = checkoverlaypermissionreq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatAppProtocol.checkOverlayPermissionReq)
}
inline ::perfcat::CheckOverlayPermissionReq* PerfcatAppProtocol::_internal_mutable_checkoverlaypermissionreq() {
  if (!_internal_has_checkoverlaypermissionreq()) {
    clear_protocol();
    set_has_checkoverlaypermissionreq();
    protocol_.checkoverlaypermissionreq_ = CreateMaybeMessage< ::perfcat::CheckOverlayPermissionReq >(GetArena());
  }
  return protocol_.checkoverlaypermissionreq_;
}
inline ::perfcat::CheckOverlayPermissionReq* PerfcatAppProtocol::mutable_checkoverlaypermissionreq() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatAppProtocol.checkOverlayPermissionReq)
  return _internal_mutable_checkoverlaypermissionreq();
}

// .perfcat.CheckOverlayPermissionRsp checkOverlayPermissionRsp = 8;
inline bool PerfcatAppProtocol::_internal_has_checkoverlaypermissionrsp() const {
  return protocol_case() == kCheckOverlayPermissionRsp;
}
inline bool PerfcatAppProtocol::has_checkoverlaypermissionrsp() const {
  return _internal_has_checkoverlaypermissionrsp();
}
inline void PerfcatAppProtocol::set_has_checkoverlaypermissionrsp() {
  _oneof_case_[0] = kCheckOverlayPermissionRsp;
}
inline void PerfcatAppProtocol::clear_checkoverlaypermissionrsp() {
  if (_internal_has_checkoverlaypermissionrsp()) {
    if (GetArena() == nullptr) {
      delete protocol_.checkoverlaypermissionrsp_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::CheckOverlayPermissionRsp* PerfcatAppProtocol::release_checkoverlaypermissionrsp() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatAppProtocol.checkOverlayPermissionRsp)
  if (_internal_has_checkoverlaypermissionrsp()) {
    clear_has_protocol();
      ::perfcat::CheckOverlayPermissionRsp* temp = protocol_.checkoverlaypermissionrsp_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.checkoverlaypermissionrsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::CheckOverlayPermissionRsp& PerfcatAppProtocol::_internal_checkoverlaypermissionrsp() const {
  return _internal_has_checkoverlaypermissionrsp()
      ? *protocol_.checkoverlaypermissionrsp_
      : *reinterpret_cast< ::perfcat::CheckOverlayPermissionRsp*>(&::perfcat::_CheckOverlayPermissionRsp_default_instance_);
}
inline const ::perfcat::CheckOverlayPermissionRsp& PerfcatAppProtocol::checkoverlaypermissionrsp() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatAppProtocol.checkOverlayPermissionRsp)
  return _internal_checkoverlaypermissionrsp();
}
inline ::perfcat::CheckOverlayPermissionRsp* PerfcatAppProtocol::unsafe_arena_release_checkoverlaypermissionrsp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatAppProtocol.checkOverlayPermissionRsp)
  if (_internal_has_checkoverlaypermissionrsp()) {
    clear_has_protocol();
    ::perfcat::CheckOverlayPermissionRsp* temp = protocol_.checkoverlaypermissionrsp_;
    protocol_.checkoverlaypermissionrsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatAppProtocol::unsafe_arena_set_allocated_checkoverlaypermissionrsp(::perfcat::CheckOverlayPermissionRsp* checkoverlaypermissionrsp) {
  clear_protocol();
  if (checkoverlaypermissionrsp) {
    set_has_checkoverlaypermissionrsp();
    protocol_.checkoverlaypermissionrsp_ = checkoverlaypermissionrsp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatAppProtocol.checkOverlayPermissionRsp)
}
inline ::perfcat::CheckOverlayPermissionRsp* PerfcatAppProtocol::_internal_mutable_checkoverlaypermissionrsp() {
  if (!_internal_has_checkoverlaypermissionrsp()) {
    clear_protocol();
    set_has_checkoverlaypermissionrsp();
    protocol_.checkoverlaypermissionrsp_ = CreateMaybeMessage< ::perfcat::CheckOverlayPermissionRsp >(GetArena());
  }
  return protocol_.checkoverlaypermissionrsp_;
}
inline ::perfcat::CheckOverlayPermissionRsp* PerfcatAppProtocol::mutable_checkoverlaypermissionrsp() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatAppProtocol.checkOverlayPermissionRsp)
  return _internal_mutable_checkoverlaypermissionrsp();
}

// .perfcat.AppHelloReq AppHelloReq = 9;
inline bool PerfcatAppProtocol::_internal_has_apphelloreq() const {
  return protocol_case() == kAppHelloReq;
}
inline bool PerfcatAppProtocol::has_apphelloreq() const {
  return _internal_has_apphelloreq();
}
inline void PerfcatAppProtocol::set_has_apphelloreq() {
  _oneof_case_[0] = kAppHelloReq;
}
inline void PerfcatAppProtocol::clear_apphelloreq() {
  if (_internal_has_apphelloreq()) {
    if (GetArena() == nullptr) {
      delete protocol_.apphelloreq_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::AppHelloReq* PerfcatAppProtocol::release_apphelloreq() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatAppProtocol.AppHelloReq)
  if (_internal_has_apphelloreq()) {
    clear_has_protocol();
      ::perfcat::AppHelloReq* temp = protocol_.apphelloreq_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.apphelloreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::AppHelloReq& PerfcatAppProtocol::_internal_apphelloreq() const {
  return _internal_has_apphelloreq()
      ? *protocol_.apphelloreq_
      : *reinterpret_cast< ::perfcat::AppHelloReq*>(&::perfcat::_AppHelloReq_default_instance_);
}
inline const ::perfcat::AppHelloReq& PerfcatAppProtocol::apphelloreq() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatAppProtocol.AppHelloReq)
  return _internal_apphelloreq();
}
inline ::perfcat::AppHelloReq* PerfcatAppProtocol::unsafe_arena_release_apphelloreq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatAppProtocol.AppHelloReq)
  if (_internal_has_apphelloreq()) {
    clear_has_protocol();
    ::perfcat::AppHelloReq* temp = protocol_.apphelloreq_;
    protocol_.apphelloreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatAppProtocol::unsafe_arena_set_allocated_apphelloreq(::perfcat::AppHelloReq* apphelloreq) {
  clear_protocol();
  if (apphelloreq) {
    set_has_apphelloreq();
    protocol_.apphelloreq_ = apphelloreq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatAppProtocol.AppHelloReq)
}
inline ::perfcat::AppHelloReq* PerfcatAppProtocol::_internal_mutable_apphelloreq() {
  if (!_internal_has_apphelloreq()) {
    clear_protocol();
    set_has_apphelloreq();
    protocol_.apphelloreq_ = CreateMaybeMessage< ::perfcat::AppHelloReq >(GetArena());
  }
  return protocol_.apphelloreq_;
}
inline ::perfcat::AppHelloReq* PerfcatAppProtocol::mutable_apphelloreq() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatAppProtocol.AppHelloReq)
  return _internal_mutable_apphelloreq();
}

// .perfcat.AppHelloRsp appHelloRsp = 10;
inline bool PerfcatAppProtocol::_internal_has_apphellorsp() const {
  return protocol_case() == kAppHelloRsp;
}
inline bool PerfcatAppProtocol::has_apphellorsp() const {
  return _internal_has_apphellorsp();
}
inline void PerfcatAppProtocol::set_has_apphellorsp() {
  _oneof_case_[0] = kAppHelloRsp;
}
inline void PerfcatAppProtocol::clear_apphellorsp() {
  if (_internal_has_apphellorsp()) {
    if (GetArena() == nullptr) {
      delete protocol_.apphellorsp_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::AppHelloRsp* PerfcatAppProtocol::release_apphellorsp() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatAppProtocol.appHelloRsp)
  if (_internal_has_apphellorsp()) {
    clear_has_protocol();
      ::perfcat::AppHelloRsp* temp = protocol_.apphellorsp_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.apphellorsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::AppHelloRsp& PerfcatAppProtocol::_internal_apphellorsp() const {
  return _internal_has_apphellorsp()
      ? *protocol_.apphellorsp_
      : *reinterpret_cast< ::perfcat::AppHelloRsp*>(&::perfcat::_AppHelloRsp_default_instance_);
}
inline const ::perfcat::AppHelloRsp& PerfcatAppProtocol::apphellorsp() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatAppProtocol.appHelloRsp)
  return _internal_apphellorsp();
}
inline ::perfcat::AppHelloRsp* PerfcatAppProtocol::unsafe_arena_release_apphellorsp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatAppProtocol.appHelloRsp)
  if (_internal_has_apphellorsp()) {
    clear_has_protocol();
    ::perfcat::AppHelloRsp* temp = protocol_.apphellorsp_;
    protocol_.apphellorsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatAppProtocol::unsafe_arena_set_allocated_apphellorsp(::perfcat::AppHelloRsp* apphellorsp) {
  clear_protocol();
  if (apphellorsp) {
    set_has_apphellorsp();
    protocol_.apphellorsp_ = apphellorsp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatAppProtocol.appHelloRsp)
}
inline ::perfcat::AppHelloRsp* PerfcatAppProtocol::_internal_mutable_apphellorsp() {
  if (!_internal_has_apphellorsp()) {
    clear_protocol();
    set_has_apphellorsp();
    protocol_.apphellorsp_ = CreateMaybeMessage< ::perfcat::AppHelloRsp >(GetArena());
  }
  return protocol_.apphellorsp_;
}
inline ::perfcat::AppHelloRsp* PerfcatAppProtocol::mutable_apphellorsp() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatAppProtocol.appHelloRsp)
  return _internal_mutable_apphellorsp();
}

inline bool PerfcatAppProtocol::has_protocol() const {
  return protocol_case() != PROTOCOL_NOT_SET;
}
inline void PerfcatAppProtocol::clear_has_protocol() {
  _oneof_case_[0] = PROTOCOL_NOT_SET;
}
inline PerfcatAppProtocol::ProtocolCase PerfcatAppProtocol::protocol_case() const {
  return PerfcatAppProtocol::ProtocolCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PerfcatServerProtocol

// .perfcat.ProfileReq profileReq = 1;
inline bool PerfcatServerProtocol::_internal_has_profilereq() const {
  return protocol_case() == kProfileReq;
}
inline bool PerfcatServerProtocol::has_profilereq() const {
  return _internal_has_profilereq();
}
inline void PerfcatServerProtocol::set_has_profilereq() {
  _oneof_case_[0] = kProfileReq;
}
inline void PerfcatServerProtocol::clear_profilereq() {
  if (_internal_has_profilereq()) {
    if (GetArena() == nullptr) {
      delete protocol_.profilereq_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::ProfileReq* PerfcatServerProtocol::release_profilereq() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatServerProtocol.profileReq)
  if (_internal_has_profilereq()) {
    clear_has_protocol();
      ::perfcat::ProfileReq* temp = protocol_.profilereq_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.profilereq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::ProfileReq& PerfcatServerProtocol::_internal_profilereq() const {
  return _internal_has_profilereq()
      ? *protocol_.profilereq_
      : *reinterpret_cast< ::perfcat::ProfileReq*>(&::perfcat::_ProfileReq_default_instance_);
}
inline const ::perfcat::ProfileReq& PerfcatServerProtocol::profilereq() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatServerProtocol.profileReq)
  return _internal_profilereq();
}
inline ::perfcat::ProfileReq* PerfcatServerProtocol::unsafe_arena_release_profilereq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatServerProtocol.profileReq)
  if (_internal_has_profilereq()) {
    clear_has_protocol();
    ::perfcat::ProfileReq* temp = protocol_.profilereq_;
    protocol_.profilereq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatServerProtocol::unsafe_arena_set_allocated_profilereq(::perfcat::ProfileReq* profilereq) {
  clear_protocol();
  if (profilereq) {
    set_has_profilereq();
    protocol_.profilereq_ = profilereq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatServerProtocol.profileReq)
}
inline ::perfcat::ProfileReq* PerfcatServerProtocol::_internal_mutable_profilereq() {
  if (!_internal_has_profilereq()) {
    clear_protocol();
    set_has_profilereq();
    protocol_.profilereq_ = CreateMaybeMessage< ::perfcat::ProfileReq >(GetArena());
  }
  return protocol_.profilereq_;
}
inline ::perfcat::ProfileReq* PerfcatServerProtocol::mutable_profilereq() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatServerProtocol.profileReq)
  return _internal_mutable_profilereq();
}

// .perfcat.ProfileRsp profileRsp = 2;
inline bool PerfcatServerProtocol::_internal_has_profilersp() const {
  return protocol_case() == kProfileRsp;
}
inline bool PerfcatServerProtocol::has_profilersp() const {
  return _internal_has_profilersp();
}
inline void PerfcatServerProtocol::set_has_profilersp() {
  _oneof_case_[0] = kProfileRsp;
}
inline void PerfcatServerProtocol::clear_profilersp() {
  if (_internal_has_profilersp()) {
    if (GetArena() == nullptr) {
      delete protocol_.profilersp_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::ProfileRsp* PerfcatServerProtocol::release_profilersp() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatServerProtocol.profileRsp)
  if (_internal_has_profilersp()) {
    clear_has_protocol();
      ::perfcat::ProfileRsp* temp = protocol_.profilersp_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.profilersp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::ProfileRsp& PerfcatServerProtocol::_internal_profilersp() const {
  return _internal_has_profilersp()
      ? *protocol_.profilersp_
      : *reinterpret_cast< ::perfcat::ProfileRsp*>(&::perfcat::_ProfileRsp_default_instance_);
}
inline const ::perfcat::ProfileRsp& PerfcatServerProtocol::profilersp() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatServerProtocol.profileRsp)
  return _internal_profilersp();
}
inline ::perfcat::ProfileRsp* PerfcatServerProtocol::unsafe_arena_release_profilersp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatServerProtocol.profileRsp)
  if (_internal_has_profilersp()) {
    clear_has_protocol();
    ::perfcat::ProfileRsp* temp = protocol_.profilersp_;
    protocol_.profilersp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatServerProtocol::unsafe_arena_set_allocated_profilersp(::perfcat::ProfileRsp* profilersp) {
  clear_protocol();
  if (profilersp) {
    set_has_profilersp();
    protocol_.profilersp_ = profilersp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatServerProtocol.profileRsp)
}
inline ::perfcat::ProfileRsp* PerfcatServerProtocol::_internal_mutable_profilersp() {
  if (!_internal_has_profilersp()) {
    clear_protocol();
    set_has_profilersp();
    protocol_.profilersp_ = CreateMaybeMessage< ::perfcat::ProfileRsp >(GetArena());
  }
  return protocol_.profilersp_;
}
inline ::perfcat::ProfileRsp* PerfcatServerProtocol::mutable_profilersp() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatServerProtocol.profileRsp)
  return _internal_mutable_profilersp();
}

// .perfcat.GetMemoryUsageReq getMemoryUsageReq = 3;
inline bool PerfcatServerProtocol::_internal_has_getmemoryusagereq() const {
  return protocol_case() == kGetMemoryUsageReq;
}
inline bool PerfcatServerProtocol::has_getmemoryusagereq() const {
  return _internal_has_getmemoryusagereq();
}
inline void PerfcatServerProtocol::set_has_getmemoryusagereq() {
  _oneof_case_[0] = kGetMemoryUsageReq;
}
inline void PerfcatServerProtocol::clear_getmemoryusagereq() {
  if (_internal_has_getmemoryusagereq()) {
    if (GetArena() == nullptr) {
      delete protocol_.getmemoryusagereq_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::GetMemoryUsageReq* PerfcatServerProtocol::release_getmemoryusagereq() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatServerProtocol.getMemoryUsageReq)
  if (_internal_has_getmemoryusagereq()) {
    clear_has_protocol();
      ::perfcat::GetMemoryUsageReq* temp = protocol_.getmemoryusagereq_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.getmemoryusagereq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::GetMemoryUsageReq& PerfcatServerProtocol::_internal_getmemoryusagereq() const {
  return _internal_has_getmemoryusagereq()
      ? *protocol_.getmemoryusagereq_
      : *reinterpret_cast< ::perfcat::GetMemoryUsageReq*>(&::perfcat::_GetMemoryUsageReq_default_instance_);
}
inline const ::perfcat::GetMemoryUsageReq& PerfcatServerProtocol::getmemoryusagereq() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatServerProtocol.getMemoryUsageReq)
  return _internal_getmemoryusagereq();
}
inline ::perfcat::GetMemoryUsageReq* PerfcatServerProtocol::unsafe_arena_release_getmemoryusagereq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatServerProtocol.getMemoryUsageReq)
  if (_internal_has_getmemoryusagereq()) {
    clear_has_protocol();
    ::perfcat::GetMemoryUsageReq* temp = protocol_.getmemoryusagereq_;
    protocol_.getmemoryusagereq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatServerProtocol::unsafe_arena_set_allocated_getmemoryusagereq(::perfcat::GetMemoryUsageReq* getmemoryusagereq) {
  clear_protocol();
  if (getmemoryusagereq) {
    set_has_getmemoryusagereq();
    protocol_.getmemoryusagereq_ = getmemoryusagereq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatServerProtocol.getMemoryUsageReq)
}
inline ::perfcat::GetMemoryUsageReq* PerfcatServerProtocol::_internal_mutable_getmemoryusagereq() {
  if (!_internal_has_getmemoryusagereq()) {
    clear_protocol();
    set_has_getmemoryusagereq();
    protocol_.getmemoryusagereq_ = CreateMaybeMessage< ::perfcat::GetMemoryUsageReq >(GetArena());
  }
  return protocol_.getmemoryusagereq_;
}
inline ::perfcat::GetMemoryUsageReq* PerfcatServerProtocol::mutable_getmemoryusagereq() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatServerProtocol.getMemoryUsageReq)
  return _internal_mutable_getmemoryusagereq();
}

// .perfcat.GetMemoryUsageRsp getMemoryUsageRsp = 4;
inline bool PerfcatServerProtocol::_internal_has_getmemoryusagersp() const {
  return protocol_case() == kGetMemoryUsageRsp;
}
inline bool PerfcatServerProtocol::has_getmemoryusagersp() const {
  return _internal_has_getmemoryusagersp();
}
inline void PerfcatServerProtocol::set_has_getmemoryusagersp() {
  _oneof_case_[0] = kGetMemoryUsageRsp;
}
inline void PerfcatServerProtocol::clear_getmemoryusagersp() {
  if (_internal_has_getmemoryusagersp()) {
    if (GetArena() == nullptr) {
      delete protocol_.getmemoryusagersp_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::GetMemoryUsageRsp* PerfcatServerProtocol::release_getmemoryusagersp() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatServerProtocol.getMemoryUsageRsp)
  if (_internal_has_getmemoryusagersp()) {
    clear_has_protocol();
      ::perfcat::GetMemoryUsageRsp* temp = protocol_.getmemoryusagersp_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.getmemoryusagersp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::GetMemoryUsageRsp& PerfcatServerProtocol::_internal_getmemoryusagersp() const {
  return _internal_has_getmemoryusagersp()
      ? *protocol_.getmemoryusagersp_
      : *reinterpret_cast< ::perfcat::GetMemoryUsageRsp*>(&::perfcat::_GetMemoryUsageRsp_default_instance_);
}
inline const ::perfcat::GetMemoryUsageRsp& PerfcatServerProtocol::getmemoryusagersp() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatServerProtocol.getMemoryUsageRsp)
  return _internal_getmemoryusagersp();
}
inline ::perfcat::GetMemoryUsageRsp* PerfcatServerProtocol::unsafe_arena_release_getmemoryusagersp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatServerProtocol.getMemoryUsageRsp)
  if (_internal_has_getmemoryusagersp()) {
    clear_has_protocol();
    ::perfcat::GetMemoryUsageRsp* temp = protocol_.getmemoryusagersp_;
    protocol_.getmemoryusagersp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatServerProtocol::unsafe_arena_set_allocated_getmemoryusagersp(::perfcat::GetMemoryUsageRsp* getmemoryusagersp) {
  clear_protocol();
  if (getmemoryusagersp) {
    set_has_getmemoryusagersp();
    protocol_.getmemoryusagersp_ = getmemoryusagersp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatServerProtocol.getMemoryUsageRsp)
}
inline ::perfcat::GetMemoryUsageRsp* PerfcatServerProtocol::_internal_mutable_getmemoryusagersp() {
  if (!_internal_has_getmemoryusagersp()) {
    clear_protocol();
    set_has_getmemoryusagersp();
    protocol_.getmemoryusagersp_ = CreateMaybeMessage< ::perfcat::GetMemoryUsageRsp >(GetArena());
  }
  return protocol_.getmemoryusagersp_;
}
inline ::perfcat::GetMemoryUsageRsp* PerfcatServerProtocol::mutable_getmemoryusagersp() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatServerProtocol.getMemoryUsageRsp)
  return _internal_mutable_getmemoryusagersp();
}

// .perfcat.StopProfileReq stopProfileReq = 5;
inline bool PerfcatServerProtocol::_internal_has_stopprofilereq() const {
  return protocol_case() == kStopProfileReq;
}
inline bool PerfcatServerProtocol::has_stopprofilereq() const {
  return _internal_has_stopprofilereq();
}
inline void PerfcatServerProtocol::set_has_stopprofilereq() {
  _oneof_case_[0] = kStopProfileReq;
}
inline void PerfcatServerProtocol::clear_stopprofilereq() {
  if (_internal_has_stopprofilereq()) {
    if (GetArena() == nullptr) {
      delete protocol_.stopprofilereq_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::StopProfileReq* PerfcatServerProtocol::release_stopprofilereq() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatServerProtocol.stopProfileReq)
  if (_internal_has_stopprofilereq()) {
    clear_has_protocol();
      ::perfcat::StopProfileReq* temp = protocol_.stopprofilereq_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.stopprofilereq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::StopProfileReq& PerfcatServerProtocol::_internal_stopprofilereq() const {
  return _internal_has_stopprofilereq()
      ? *protocol_.stopprofilereq_
      : *reinterpret_cast< ::perfcat::StopProfileReq*>(&::perfcat::_StopProfileReq_default_instance_);
}
inline const ::perfcat::StopProfileReq& PerfcatServerProtocol::stopprofilereq() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatServerProtocol.stopProfileReq)
  return _internal_stopprofilereq();
}
inline ::perfcat::StopProfileReq* PerfcatServerProtocol::unsafe_arena_release_stopprofilereq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatServerProtocol.stopProfileReq)
  if (_internal_has_stopprofilereq()) {
    clear_has_protocol();
    ::perfcat::StopProfileReq* temp = protocol_.stopprofilereq_;
    protocol_.stopprofilereq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatServerProtocol::unsafe_arena_set_allocated_stopprofilereq(::perfcat::StopProfileReq* stopprofilereq) {
  clear_protocol();
  if (stopprofilereq) {
    set_has_stopprofilereq();
    protocol_.stopprofilereq_ = stopprofilereq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatServerProtocol.stopProfileReq)
}
inline ::perfcat::StopProfileReq* PerfcatServerProtocol::_internal_mutable_stopprofilereq() {
  if (!_internal_has_stopprofilereq()) {
    clear_protocol();
    set_has_stopprofilereq();
    protocol_.stopprofilereq_ = CreateMaybeMessage< ::perfcat::StopProfileReq >(GetArena());
  }
  return protocol_.stopprofilereq_;
}
inline ::perfcat::StopProfileReq* PerfcatServerProtocol::mutable_stopprofilereq() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatServerProtocol.stopProfileReq)
  return _internal_mutable_stopprofilereq();
}

// .perfcat.StopProfileRsp stopProfileRsp = 6;
inline bool PerfcatServerProtocol::_internal_has_stopprofilersp() const {
  return protocol_case() == kStopProfileRsp;
}
inline bool PerfcatServerProtocol::has_stopprofilersp() const {
  return _internal_has_stopprofilersp();
}
inline void PerfcatServerProtocol::set_has_stopprofilersp() {
  _oneof_case_[0] = kStopProfileRsp;
}
inline void PerfcatServerProtocol::clear_stopprofilersp() {
  if (_internal_has_stopprofilersp()) {
    if (GetArena() == nullptr) {
      delete protocol_.stopprofilersp_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::StopProfileRsp* PerfcatServerProtocol::release_stopprofilersp() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatServerProtocol.stopProfileRsp)
  if (_internal_has_stopprofilersp()) {
    clear_has_protocol();
      ::perfcat::StopProfileRsp* temp = protocol_.stopprofilersp_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.stopprofilersp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::StopProfileRsp& PerfcatServerProtocol::_internal_stopprofilersp() const {
  return _internal_has_stopprofilersp()
      ? *protocol_.stopprofilersp_
      : *reinterpret_cast< ::perfcat::StopProfileRsp*>(&::perfcat::_StopProfileRsp_default_instance_);
}
inline const ::perfcat::StopProfileRsp& PerfcatServerProtocol::stopprofilersp() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatServerProtocol.stopProfileRsp)
  return _internal_stopprofilersp();
}
inline ::perfcat::StopProfileRsp* PerfcatServerProtocol::unsafe_arena_release_stopprofilersp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatServerProtocol.stopProfileRsp)
  if (_internal_has_stopprofilersp()) {
    clear_has_protocol();
    ::perfcat::StopProfileRsp* temp = protocol_.stopprofilersp_;
    protocol_.stopprofilersp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatServerProtocol::unsafe_arena_set_allocated_stopprofilersp(::perfcat::StopProfileRsp* stopprofilersp) {
  clear_protocol();
  if (stopprofilersp) {
    set_has_stopprofilersp();
    protocol_.stopprofilersp_ = stopprofilersp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatServerProtocol.stopProfileRsp)
}
inline ::perfcat::StopProfileRsp* PerfcatServerProtocol::_internal_mutable_stopprofilersp() {
  if (!_internal_has_stopprofilersp()) {
    clear_protocol();
    set_has_stopprofilersp();
    protocol_.stopprofilersp_ = CreateMaybeMessage< ::perfcat::StopProfileRsp >(GetArena());
  }
  return protocol_.stopprofilersp_;
}
inline ::perfcat::StopProfileRsp* PerfcatServerProtocol::mutable_stopprofilersp() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatServerProtocol.stopProfileRsp)
  return _internal_mutable_stopprofilersp();
}

// .perfcat.CheckDeviceReq checkDeviceReq = 7;
inline bool PerfcatServerProtocol::_internal_has_checkdevicereq() const {
  return protocol_case() == kCheckDeviceReq;
}
inline bool PerfcatServerProtocol::has_checkdevicereq() const {
  return _internal_has_checkdevicereq();
}
inline void PerfcatServerProtocol::set_has_checkdevicereq() {
  _oneof_case_[0] = kCheckDeviceReq;
}
inline void PerfcatServerProtocol::clear_checkdevicereq() {
  if (_internal_has_checkdevicereq()) {
    if (GetArena() == nullptr) {
      delete protocol_.checkdevicereq_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::CheckDeviceReq* PerfcatServerProtocol::release_checkdevicereq() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatServerProtocol.checkDeviceReq)
  if (_internal_has_checkdevicereq()) {
    clear_has_protocol();
      ::perfcat::CheckDeviceReq* temp = protocol_.checkdevicereq_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.checkdevicereq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::CheckDeviceReq& PerfcatServerProtocol::_internal_checkdevicereq() const {
  return _internal_has_checkdevicereq()
      ? *protocol_.checkdevicereq_
      : *reinterpret_cast< ::perfcat::CheckDeviceReq*>(&::perfcat::_CheckDeviceReq_default_instance_);
}
inline const ::perfcat::CheckDeviceReq& PerfcatServerProtocol::checkdevicereq() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatServerProtocol.checkDeviceReq)
  return _internal_checkdevicereq();
}
inline ::perfcat::CheckDeviceReq* PerfcatServerProtocol::unsafe_arena_release_checkdevicereq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatServerProtocol.checkDeviceReq)
  if (_internal_has_checkdevicereq()) {
    clear_has_protocol();
    ::perfcat::CheckDeviceReq* temp = protocol_.checkdevicereq_;
    protocol_.checkdevicereq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatServerProtocol::unsafe_arena_set_allocated_checkdevicereq(::perfcat::CheckDeviceReq* checkdevicereq) {
  clear_protocol();
  if (checkdevicereq) {
    set_has_checkdevicereq();
    protocol_.checkdevicereq_ = checkdevicereq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatServerProtocol.checkDeviceReq)
}
inline ::perfcat::CheckDeviceReq* PerfcatServerProtocol::_internal_mutable_checkdevicereq() {
  if (!_internal_has_checkdevicereq()) {
    clear_protocol();
    set_has_checkdevicereq();
    protocol_.checkdevicereq_ = CreateMaybeMessage< ::perfcat::CheckDeviceReq >(GetArena());
  }
  return protocol_.checkdevicereq_;
}
inline ::perfcat::CheckDeviceReq* PerfcatServerProtocol::mutable_checkdevicereq() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatServerProtocol.checkDeviceReq)
  return _internal_mutable_checkdevicereq();
}

// .perfcat.CheckDeviceRsp checkDeviceRsp = 8;
inline bool PerfcatServerProtocol::_internal_has_checkdevicersp() const {
  return protocol_case() == kCheckDeviceRsp;
}
inline bool PerfcatServerProtocol::has_checkdevicersp() const {
  return _internal_has_checkdevicersp();
}
inline void PerfcatServerProtocol::set_has_checkdevicersp() {
  _oneof_case_[0] = kCheckDeviceRsp;
}
inline void PerfcatServerProtocol::clear_checkdevicersp() {
  if (_internal_has_checkdevicersp()) {
    if (GetArena() == nullptr) {
      delete protocol_.checkdevicersp_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::CheckDeviceRsp* PerfcatServerProtocol::release_checkdevicersp() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatServerProtocol.checkDeviceRsp)
  if (_internal_has_checkdevicersp()) {
    clear_has_protocol();
      ::perfcat::CheckDeviceRsp* temp = protocol_.checkdevicersp_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.checkdevicersp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::CheckDeviceRsp& PerfcatServerProtocol::_internal_checkdevicersp() const {
  return _internal_has_checkdevicersp()
      ? *protocol_.checkdevicersp_
      : *reinterpret_cast< ::perfcat::CheckDeviceRsp*>(&::perfcat::_CheckDeviceRsp_default_instance_);
}
inline const ::perfcat::CheckDeviceRsp& PerfcatServerProtocol::checkdevicersp() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatServerProtocol.checkDeviceRsp)
  return _internal_checkdevicersp();
}
inline ::perfcat::CheckDeviceRsp* PerfcatServerProtocol::unsafe_arena_release_checkdevicersp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatServerProtocol.checkDeviceRsp)
  if (_internal_has_checkdevicersp()) {
    clear_has_protocol();
    ::perfcat::CheckDeviceRsp* temp = protocol_.checkdevicersp_;
    protocol_.checkdevicersp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatServerProtocol::unsafe_arena_set_allocated_checkdevicersp(::perfcat::CheckDeviceRsp* checkdevicersp) {
  clear_protocol();
  if (checkdevicersp) {
    set_has_checkdevicersp();
    protocol_.checkdevicersp_ = checkdevicersp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatServerProtocol.checkDeviceRsp)
}
inline ::perfcat::CheckDeviceRsp* PerfcatServerProtocol::_internal_mutable_checkdevicersp() {
  if (!_internal_has_checkdevicersp()) {
    clear_protocol();
    set_has_checkdevicersp();
    protocol_.checkdevicersp_ = CreateMaybeMessage< ::perfcat::CheckDeviceRsp >(GetArena());
  }
  return protocol_.checkdevicersp_;
}
inline ::perfcat::CheckDeviceRsp* PerfcatServerProtocol::mutable_checkdevicersp() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatServerProtocol.checkDeviceRsp)
  return _internal_mutable_checkdevicersp();
}

// .perfcat.ProfileNtf profileNtf = 9;
inline bool PerfcatServerProtocol::_internal_has_profilentf() const {
  return protocol_case() == kProfileNtf;
}
inline bool PerfcatServerProtocol::has_profilentf() const {
  return _internal_has_profilentf();
}
inline void PerfcatServerProtocol::set_has_profilentf() {
  _oneof_case_[0] = kProfileNtf;
}
inline void PerfcatServerProtocol::clear_profilentf() {
  if (_internal_has_profilentf()) {
    if (GetArena() == nullptr) {
      delete protocol_.profilentf_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::ProfileNtf* PerfcatServerProtocol::release_profilentf() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatServerProtocol.profileNtf)
  if (_internal_has_profilentf()) {
    clear_has_protocol();
      ::perfcat::ProfileNtf* temp = protocol_.profilentf_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.profilentf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::ProfileNtf& PerfcatServerProtocol::_internal_profilentf() const {
  return _internal_has_profilentf()
      ? *protocol_.profilentf_
      : *reinterpret_cast< ::perfcat::ProfileNtf*>(&::perfcat::_ProfileNtf_default_instance_);
}
inline const ::perfcat::ProfileNtf& PerfcatServerProtocol::profilentf() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatServerProtocol.profileNtf)
  return _internal_profilentf();
}
inline ::perfcat::ProfileNtf* PerfcatServerProtocol::unsafe_arena_release_profilentf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatServerProtocol.profileNtf)
  if (_internal_has_profilentf()) {
    clear_has_protocol();
    ::perfcat::ProfileNtf* temp = protocol_.profilentf_;
    protocol_.profilentf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatServerProtocol::unsafe_arena_set_allocated_profilentf(::perfcat::ProfileNtf* profilentf) {
  clear_protocol();
  if (profilentf) {
    set_has_profilentf();
    protocol_.profilentf_ = profilentf;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatServerProtocol.profileNtf)
}
inline ::perfcat::ProfileNtf* PerfcatServerProtocol::_internal_mutable_profilentf() {
  if (!_internal_has_profilentf()) {
    clear_protocol();
    set_has_profilentf();
    protocol_.profilentf_ = CreateMaybeMessage< ::perfcat::ProfileNtf >(GetArena());
  }
  return protocol_.profilentf_;
}
inline ::perfcat::ProfileNtf* PerfcatServerProtocol::mutable_profilentf() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatServerProtocol.profileNtf)
  return _internal_mutable_profilentf();
}

// .perfcat.GetCpuMaxFreqReq getCpuMaxFreqReq = 10;
inline bool PerfcatServerProtocol::_internal_has_getcpumaxfreqreq() const {
  return protocol_case() == kGetCpuMaxFreqReq;
}
inline bool PerfcatServerProtocol::has_getcpumaxfreqreq() const {
  return _internal_has_getcpumaxfreqreq();
}
inline void PerfcatServerProtocol::set_has_getcpumaxfreqreq() {
  _oneof_case_[0] = kGetCpuMaxFreqReq;
}
inline void PerfcatServerProtocol::clear_getcpumaxfreqreq() {
  if (_internal_has_getcpumaxfreqreq()) {
    if (GetArena() == nullptr) {
      delete protocol_.getcpumaxfreqreq_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::GetCpuMaxFreqReq* PerfcatServerProtocol::release_getcpumaxfreqreq() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatServerProtocol.getCpuMaxFreqReq)
  if (_internal_has_getcpumaxfreqreq()) {
    clear_has_protocol();
      ::perfcat::GetCpuMaxFreqReq* temp = protocol_.getcpumaxfreqreq_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.getcpumaxfreqreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::GetCpuMaxFreqReq& PerfcatServerProtocol::_internal_getcpumaxfreqreq() const {
  return _internal_has_getcpumaxfreqreq()
      ? *protocol_.getcpumaxfreqreq_
      : *reinterpret_cast< ::perfcat::GetCpuMaxFreqReq*>(&::perfcat::_GetCpuMaxFreqReq_default_instance_);
}
inline const ::perfcat::GetCpuMaxFreqReq& PerfcatServerProtocol::getcpumaxfreqreq() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatServerProtocol.getCpuMaxFreqReq)
  return _internal_getcpumaxfreqreq();
}
inline ::perfcat::GetCpuMaxFreqReq* PerfcatServerProtocol::unsafe_arena_release_getcpumaxfreqreq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatServerProtocol.getCpuMaxFreqReq)
  if (_internal_has_getcpumaxfreqreq()) {
    clear_has_protocol();
    ::perfcat::GetCpuMaxFreqReq* temp = protocol_.getcpumaxfreqreq_;
    protocol_.getcpumaxfreqreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatServerProtocol::unsafe_arena_set_allocated_getcpumaxfreqreq(::perfcat::GetCpuMaxFreqReq* getcpumaxfreqreq) {
  clear_protocol();
  if (getcpumaxfreqreq) {
    set_has_getcpumaxfreqreq();
    protocol_.getcpumaxfreqreq_ = getcpumaxfreqreq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatServerProtocol.getCpuMaxFreqReq)
}
inline ::perfcat::GetCpuMaxFreqReq* PerfcatServerProtocol::_internal_mutable_getcpumaxfreqreq() {
  if (!_internal_has_getcpumaxfreqreq()) {
    clear_protocol();
    set_has_getcpumaxfreqreq();
    protocol_.getcpumaxfreqreq_ = CreateMaybeMessage< ::perfcat::GetCpuMaxFreqReq >(GetArena());
  }
  return protocol_.getcpumaxfreqreq_;
}
inline ::perfcat::GetCpuMaxFreqReq* PerfcatServerProtocol::mutable_getcpumaxfreqreq() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatServerProtocol.getCpuMaxFreqReq)
  return _internal_mutable_getcpumaxfreqreq();
}

// .perfcat.GetCpuMaxFreqRsp getCpuMaxFreqRsp = 11;
inline bool PerfcatServerProtocol::_internal_has_getcpumaxfreqrsp() const {
  return protocol_case() == kGetCpuMaxFreqRsp;
}
inline bool PerfcatServerProtocol::has_getcpumaxfreqrsp() const {
  return _internal_has_getcpumaxfreqrsp();
}
inline void PerfcatServerProtocol::set_has_getcpumaxfreqrsp() {
  _oneof_case_[0] = kGetCpuMaxFreqRsp;
}
inline void PerfcatServerProtocol::clear_getcpumaxfreqrsp() {
  if (_internal_has_getcpumaxfreqrsp()) {
    if (GetArena() == nullptr) {
      delete protocol_.getcpumaxfreqrsp_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::GetCpuMaxFreqRsp* PerfcatServerProtocol::release_getcpumaxfreqrsp() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatServerProtocol.getCpuMaxFreqRsp)
  if (_internal_has_getcpumaxfreqrsp()) {
    clear_has_protocol();
      ::perfcat::GetCpuMaxFreqRsp* temp = protocol_.getcpumaxfreqrsp_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.getcpumaxfreqrsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::GetCpuMaxFreqRsp& PerfcatServerProtocol::_internal_getcpumaxfreqrsp() const {
  return _internal_has_getcpumaxfreqrsp()
      ? *protocol_.getcpumaxfreqrsp_
      : *reinterpret_cast< ::perfcat::GetCpuMaxFreqRsp*>(&::perfcat::_GetCpuMaxFreqRsp_default_instance_);
}
inline const ::perfcat::GetCpuMaxFreqRsp& PerfcatServerProtocol::getcpumaxfreqrsp() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatServerProtocol.getCpuMaxFreqRsp)
  return _internal_getcpumaxfreqrsp();
}
inline ::perfcat::GetCpuMaxFreqRsp* PerfcatServerProtocol::unsafe_arena_release_getcpumaxfreqrsp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatServerProtocol.getCpuMaxFreqRsp)
  if (_internal_has_getcpumaxfreqrsp()) {
    clear_has_protocol();
    ::perfcat::GetCpuMaxFreqRsp* temp = protocol_.getcpumaxfreqrsp_;
    protocol_.getcpumaxfreqrsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatServerProtocol::unsafe_arena_set_allocated_getcpumaxfreqrsp(::perfcat::GetCpuMaxFreqRsp* getcpumaxfreqrsp) {
  clear_protocol();
  if (getcpumaxfreqrsp) {
    set_has_getcpumaxfreqrsp();
    protocol_.getcpumaxfreqrsp_ = getcpumaxfreqrsp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatServerProtocol.getCpuMaxFreqRsp)
}
inline ::perfcat::GetCpuMaxFreqRsp* PerfcatServerProtocol::_internal_mutable_getcpumaxfreqrsp() {
  if (!_internal_has_getcpumaxfreqrsp()) {
    clear_protocol();
    set_has_getcpumaxfreqrsp();
    protocol_.getcpumaxfreqrsp_ = CreateMaybeMessage< ::perfcat::GetCpuMaxFreqRsp >(GetArena());
  }
  return protocol_.getcpumaxfreqrsp_;
}
inline ::perfcat::GetCpuMaxFreqRsp* PerfcatServerProtocol::mutable_getcpumaxfreqrsp() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatServerProtocol.getCpuMaxFreqRsp)
  return _internal_mutable_getcpumaxfreqrsp();
}

// .perfcat.ToggleInterestingFiledNTF toggleInterestingFiledNTF = 12;
inline bool PerfcatServerProtocol::_internal_has_toggleinterestingfiledntf() const {
  return protocol_case() == kToggleInterestingFiledNTF;
}
inline bool PerfcatServerProtocol::has_toggleinterestingfiledntf() const {
  return _internal_has_toggleinterestingfiledntf();
}
inline void PerfcatServerProtocol::set_has_toggleinterestingfiledntf() {
  _oneof_case_[0] = kToggleInterestingFiledNTF;
}
inline void PerfcatServerProtocol::clear_toggleinterestingfiledntf() {
  if (_internal_has_toggleinterestingfiledntf()) {
    if (GetArena() == nullptr) {
      delete protocol_.toggleinterestingfiledntf_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::ToggleInterestingFiledNTF* PerfcatServerProtocol::release_toggleinterestingfiledntf() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatServerProtocol.toggleInterestingFiledNTF)
  if (_internal_has_toggleinterestingfiledntf()) {
    clear_has_protocol();
      ::perfcat::ToggleInterestingFiledNTF* temp = protocol_.toggleinterestingfiledntf_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.toggleinterestingfiledntf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::ToggleInterestingFiledNTF& PerfcatServerProtocol::_internal_toggleinterestingfiledntf() const {
  return _internal_has_toggleinterestingfiledntf()
      ? *protocol_.toggleinterestingfiledntf_
      : *reinterpret_cast< ::perfcat::ToggleInterestingFiledNTF*>(&::perfcat::_ToggleInterestingFiledNTF_default_instance_);
}
inline const ::perfcat::ToggleInterestingFiledNTF& PerfcatServerProtocol::toggleinterestingfiledntf() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatServerProtocol.toggleInterestingFiledNTF)
  return _internal_toggleinterestingfiledntf();
}
inline ::perfcat::ToggleInterestingFiledNTF* PerfcatServerProtocol::unsafe_arena_release_toggleinterestingfiledntf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatServerProtocol.toggleInterestingFiledNTF)
  if (_internal_has_toggleinterestingfiledntf()) {
    clear_has_protocol();
    ::perfcat::ToggleInterestingFiledNTF* temp = protocol_.toggleinterestingfiledntf_;
    protocol_.toggleinterestingfiledntf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatServerProtocol::unsafe_arena_set_allocated_toggleinterestingfiledntf(::perfcat::ToggleInterestingFiledNTF* toggleinterestingfiledntf) {
  clear_protocol();
  if (toggleinterestingfiledntf) {
    set_has_toggleinterestingfiledntf();
    protocol_.toggleinterestingfiledntf_ = toggleinterestingfiledntf;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatServerProtocol.toggleInterestingFiledNTF)
}
inline ::perfcat::ToggleInterestingFiledNTF* PerfcatServerProtocol::_internal_mutable_toggleinterestingfiledntf() {
  if (!_internal_has_toggleinterestingfiledntf()) {
    clear_protocol();
    set_has_toggleinterestingfiledntf();
    protocol_.toggleinterestingfiledntf_ = CreateMaybeMessage< ::perfcat::ToggleInterestingFiledNTF >(GetArena());
  }
  return protocol_.toggleinterestingfiledntf_;
}
inline ::perfcat::ToggleInterestingFiledNTF* PerfcatServerProtocol::mutable_toggleinterestingfiledntf() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatServerProtocol.toggleInterestingFiledNTF)
  return _internal_mutable_toggleinterestingfiledntf();
}

// .perfcat.ProfileStartedNTF profileStartedNTF = 13;
inline bool PerfcatServerProtocol::_internal_has_profilestartedntf() const {
  return protocol_case() == kProfileStartedNTF;
}
inline bool PerfcatServerProtocol::has_profilestartedntf() const {
  return _internal_has_profilestartedntf();
}
inline void PerfcatServerProtocol::set_has_profilestartedntf() {
  _oneof_case_[0] = kProfileStartedNTF;
}
inline void PerfcatServerProtocol::clear_profilestartedntf() {
  if (_internal_has_profilestartedntf()) {
    if (GetArena() == nullptr) {
      delete protocol_.profilestartedntf_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::ProfileStartedNTF* PerfcatServerProtocol::release_profilestartedntf() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatServerProtocol.profileStartedNTF)
  if (_internal_has_profilestartedntf()) {
    clear_has_protocol();
      ::perfcat::ProfileStartedNTF* temp = protocol_.profilestartedntf_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.profilestartedntf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::ProfileStartedNTF& PerfcatServerProtocol::_internal_profilestartedntf() const {
  return _internal_has_profilestartedntf()
      ? *protocol_.profilestartedntf_
      : *reinterpret_cast< ::perfcat::ProfileStartedNTF*>(&::perfcat::_ProfileStartedNTF_default_instance_);
}
inline const ::perfcat::ProfileStartedNTF& PerfcatServerProtocol::profilestartedntf() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatServerProtocol.profileStartedNTF)
  return _internal_profilestartedntf();
}
inline ::perfcat::ProfileStartedNTF* PerfcatServerProtocol::unsafe_arena_release_profilestartedntf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatServerProtocol.profileStartedNTF)
  if (_internal_has_profilestartedntf()) {
    clear_has_protocol();
    ::perfcat::ProfileStartedNTF* temp = protocol_.profilestartedntf_;
    protocol_.profilestartedntf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatServerProtocol::unsafe_arena_set_allocated_profilestartedntf(::perfcat::ProfileStartedNTF* profilestartedntf) {
  clear_protocol();
  if (profilestartedntf) {
    set_has_profilestartedntf();
    protocol_.profilestartedntf_ = profilestartedntf;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatServerProtocol.profileStartedNTF)
}
inline ::perfcat::ProfileStartedNTF* PerfcatServerProtocol::_internal_mutable_profilestartedntf() {
  if (!_internal_has_profilestartedntf()) {
    clear_protocol();
    set_has_profilestartedntf();
    protocol_.profilestartedntf_ = CreateMaybeMessage< ::perfcat::ProfileStartedNTF >(GetArena());
  }
  return protocol_.profilestartedntf_;
}
inline ::perfcat::ProfileStartedNTF* PerfcatServerProtocol::mutable_profilestartedntf() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatServerProtocol.profileStartedNTF)
  return _internal_mutable_profilestartedntf();
}

// .perfcat.ProfileStoppedNTF profileStoppedNTF = 14;
inline bool PerfcatServerProtocol::_internal_has_profilestoppedntf() const {
  return protocol_case() == kProfileStoppedNTF;
}
inline bool PerfcatServerProtocol::has_profilestoppedntf() const {
  return _internal_has_profilestoppedntf();
}
inline void PerfcatServerProtocol::set_has_profilestoppedntf() {
  _oneof_case_[0] = kProfileStoppedNTF;
}
inline void PerfcatServerProtocol::clear_profilestoppedntf() {
  if (_internal_has_profilestoppedntf()) {
    if (GetArena() == nullptr) {
      delete protocol_.profilestoppedntf_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::ProfileStoppedNTF* PerfcatServerProtocol::release_profilestoppedntf() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatServerProtocol.profileStoppedNTF)
  if (_internal_has_profilestoppedntf()) {
    clear_has_protocol();
      ::perfcat::ProfileStoppedNTF* temp = protocol_.profilestoppedntf_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.profilestoppedntf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::ProfileStoppedNTF& PerfcatServerProtocol::_internal_profilestoppedntf() const {
  return _internal_has_profilestoppedntf()
      ? *protocol_.profilestoppedntf_
      : *reinterpret_cast< ::perfcat::ProfileStoppedNTF*>(&::perfcat::_ProfileStoppedNTF_default_instance_);
}
inline const ::perfcat::ProfileStoppedNTF& PerfcatServerProtocol::profilestoppedntf() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatServerProtocol.profileStoppedNTF)
  return _internal_profilestoppedntf();
}
inline ::perfcat::ProfileStoppedNTF* PerfcatServerProtocol::unsafe_arena_release_profilestoppedntf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatServerProtocol.profileStoppedNTF)
  if (_internal_has_profilestoppedntf()) {
    clear_has_protocol();
    ::perfcat::ProfileStoppedNTF* temp = protocol_.profilestoppedntf_;
    protocol_.profilestoppedntf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatServerProtocol::unsafe_arena_set_allocated_profilestoppedntf(::perfcat::ProfileStoppedNTF* profilestoppedntf) {
  clear_protocol();
  if (profilestoppedntf) {
    set_has_profilestoppedntf();
    protocol_.profilestoppedntf_ = profilestoppedntf;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatServerProtocol.profileStoppedNTF)
}
inline ::perfcat::ProfileStoppedNTF* PerfcatServerProtocol::_internal_mutable_profilestoppedntf() {
  if (!_internal_has_profilestoppedntf()) {
    clear_protocol();
    set_has_profilestoppedntf();
    protocol_.profilestoppedntf_ = CreateMaybeMessage< ::perfcat::ProfileStoppedNTF >(GetArena());
  }
  return protocol_.profilestoppedntf_;
}
inline ::perfcat::ProfileStoppedNTF* PerfcatServerProtocol::mutable_profilestoppedntf() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatServerProtocol.profileStoppedNTF)
  return _internal_mutable_profilestoppedntf();
}

// .perfcat.ProcessNotFoundNTF processNotFoundNTF = 15;
inline bool PerfcatServerProtocol::_internal_has_processnotfoundntf() const {
  return protocol_case() == kProcessNotFoundNTF;
}
inline bool PerfcatServerProtocol::has_processnotfoundntf() const {
  return _internal_has_processnotfoundntf();
}
inline void PerfcatServerProtocol::set_has_processnotfoundntf() {
  _oneof_case_[0] = kProcessNotFoundNTF;
}
inline void PerfcatServerProtocol::clear_processnotfoundntf() {
  if (_internal_has_processnotfoundntf()) {
    if (GetArena() == nullptr) {
      delete protocol_.processnotfoundntf_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::ProcessNotFoundNTF* PerfcatServerProtocol::release_processnotfoundntf() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatServerProtocol.processNotFoundNTF)
  if (_internal_has_processnotfoundntf()) {
    clear_has_protocol();
      ::perfcat::ProcessNotFoundNTF* temp = protocol_.processnotfoundntf_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.processnotfoundntf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::ProcessNotFoundNTF& PerfcatServerProtocol::_internal_processnotfoundntf() const {
  return _internal_has_processnotfoundntf()
      ? *protocol_.processnotfoundntf_
      : *reinterpret_cast< ::perfcat::ProcessNotFoundNTF*>(&::perfcat::_ProcessNotFoundNTF_default_instance_);
}
inline const ::perfcat::ProcessNotFoundNTF& PerfcatServerProtocol::processnotfoundntf() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatServerProtocol.processNotFoundNTF)
  return _internal_processnotfoundntf();
}
inline ::perfcat::ProcessNotFoundNTF* PerfcatServerProtocol::unsafe_arena_release_processnotfoundntf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatServerProtocol.processNotFoundNTF)
  if (_internal_has_processnotfoundntf()) {
    clear_has_protocol();
    ::perfcat::ProcessNotFoundNTF* temp = protocol_.processnotfoundntf_;
    protocol_.processnotfoundntf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatServerProtocol::unsafe_arena_set_allocated_processnotfoundntf(::perfcat::ProcessNotFoundNTF* processnotfoundntf) {
  clear_protocol();
  if (processnotfoundntf) {
    set_has_processnotfoundntf();
    protocol_.processnotfoundntf_ = processnotfoundntf;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatServerProtocol.processNotFoundNTF)
}
inline ::perfcat::ProcessNotFoundNTF* PerfcatServerProtocol::_internal_mutable_processnotfoundntf() {
  if (!_internal_has_processnotfoundntf()) {
    clear_protocol();
    set_has_processnotfoundntf();
    protocol_.processnotfoundntf_ = CreateMaybeMessage< ::perfcat::ProcessNotFoundNTF >(GetArena());
  }
  return protocol_.processnotfoundntf_;
}
inline ::perfcat::ProcessNotFoundNTF* PerfcatServerProtocol::mutable_processnotfoundntf() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatServerProtocol.processNotFoundNTF)
  return _internal_mutable_processnotfoundntf();
}

// .perfcat.ProcessFoundNTF processFoundNTF = 16;
inline bool PerfcatServerProtocol::_internal_has_processfoundntf() const {
  return protocol_case() == kProcessFoundNTF;
}
inline bool PerfcatServerProtocol::has_processfoundntf() const {
  return _internal_has_processfoundntf();
}
inline void PerfcatServerProtocol::set_has_processfoundntf() {
  _oneof_case_[0] = kProcessFoundNTF;
}
inline void PerfcatServerProtocol::clear_processfoundntf() {
  if (_internal_has_processfoundntf()) {
    if (GetArena() == nullptr) {
      delete protocol_.processfoundntf_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::ProcessFoundNTF* PerfcatServerProtocol::release_processfoundntf() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatServerProtocol.processFoundNTF)
  if (_internal_has_processfoundntf()) {
    clear_has_protocol();
      ::perfcat::ProcessFoundNTF* temp = protocol_.processfoundntf_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.processfoundntf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::ProcessFoundNTF& PerfcatServerProtocol::_internal_processfoundntf() const {
  return _internal_has_processfoundntf()
      ? *protocol_.processfoundntf_
      : *reinterpret_cast< ::perfcat::ProcessFoundNTF*>(&::perfcat::_ProcessFoundNTF_default_instance_);
}
inline const ::perfcat::ProcessFoundNTF& PerfcatServerProtocol::processfoundntf() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatServerProtocol.processFoundNTF)
  return _internal_processfoundntf();
}
inline ::perfcat::ProcessFoundNTF* PerfcatServerProtocol::unsafe_arena_release_processfoundntf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatServerProtocol.processFoundNTF)
  if (_internal_has_processfoundntf()) {
    clear_has_protocol();
    ::perfcat::ProcessFoundNTF* temp = protocol_.processfoundntf_;
    protocol_.processfoundntf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatServerProtocol::unsafe_arena_set_allocated_processfoundntf(::perfcat::ProcessFoundNTF* processfoundntf) {
  clear_protocol();
  if (processfoundntf) {
    set_has_processfoundntf();
    protocol_.processfoundntf_ = processfoundntf;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatServerProtocol.processFoundNTF)
}
inline ::perfcat::ProcessFoundNTF* PerfcatServerProtocol::_internal_mutable_processfoundntf() {
  if (!_internal_has_processfoundntf()) {
    clear_protocol();
    set_has_processfoundntf();
    protocol_.processfoundntf_ = CreateMaybeMessage< ::perfcat::ProcessFoundNTF >(GetArena());
  }
  return protocol_.processfoundntf_;
}
inline ::perfcat::ProcessFoundNTF* PerfcatServerProtocol::mutable_processfoundntf() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatServerProtocol.processFoundNTF)
  return _internal_mutable_processfoundntf();
}

// .perfcat.GetBatteryInfoReq getBatteryInfoReq = 17;
inline bool PerfcatServerProtocol::_internal_has_getbatteryinforeq() const {
  return protocol_case() == kGetBatteryInfoReq;
}
inline bool PerfcatServerProtocol::has_getbatteryinforeq() const {
  return _internal_has_getbatteryinforeq();
}
inline void PerfcatServerProtocol::set_has_getbatteryinforeq() {
  _oneof_case_[0] = kGetBatteryInfoReq;
}
inline void PerfcatServerProtocol::clear_getbatteryinforeq() {
  if (_internal_has_getbatteryinforeq()) {
    if (GetArena() == nullptr) {
      delete protocol_.getbatteryinforeq_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::GetBatteryInfoReq* PerfcatServerProtocol::release_getbatteryinforeq() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatServerProtocol.getBatteryInfoReq)
  if (_internal_has_getbatteryinforeq()) {
    clear_has_protocol();
      ::perfcat::GetBatteryInfoReq* temp = protocol_.getbatteryinforeq_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.getbatteryinforeq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::GetBatteryInfoReq& PerfcatServerProtocol::_internal_getbatteryinforeq() const {
  return _internal_has_getbatteryinforeq()
      ? *protocol_.getbatteryinforeq_
      : *reinterpret_cast< ::perfcat::GetBatteryInfoReq*>(&::perfcat::_GetBatteryInfoReq_default_instance_);
}
inline const ::perfcat::GetBatteryInfoReq& PerfcatServerProtocol::getbatteryinforeq() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatServerProtocol.getBatteryInfoReq)
  return _internal_getbatteryinforeq();
}
inline ::perfcat::GetBatteryInfoReq* PerfcatServerProtocol::unsafe_arena_release_getbatteryinforeq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatServerProtocol.getBatteryInfoReq)
  if (_internal_has_getbatteryinforeq()) {
    clear_has_protocol();
    ::perfcat::GetBatteryInfoReq* temp = protocol_.getbatteryinforeq_;
    protocol_.getbatteryinforeq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatServerProtocol::unsafe_arena_set_allocated_getbatteryinforeq(::perfcat::GetBatteryInfoReq* getbatteryinforeq) {
  clear_protocol();
  if (getbatteryinforeq) {
    set_has_getbatteryinforeq();
    protocol_.getbatteryinforeq_ = getbatteryinforeq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatServerProtocol.getBatteryInfoReq)
}
inline ::perfcat::GetBatteryInfoReq* PerfcatServerProtocol::_internal_mutable_getbatteryinforeq() {
  if (!_internal_has_getbatteryinforeq()) {
    clear_protocol();
    set_has_getbatteryinforeq();
    protocol_.getbatteryinforeq_ = CreateMaybeMessage< ::perfcat::GetBatteryInfoReq >(GetArena());
  }
  return protocol_.getbatteryinforeq_;
}
inline ::perfcat::GetBatteryInfoReq* PerfcatServerProtocol::mutable_getbatteryinforeq() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatServerProtocol.getBatteryInfoReq)
  return _internal_mutable_getbatteryinforeq();
}

// .perfcat.GetBatteryInfoRsp getBatteryInfoRsp = 18;
inline bool PerfcatServerProtocol::_internal_has_getbatteryinforsp() const {
  return protocol_case() == kGetBatteryInfoRsp;
}
inline bool PerfcatServerProtocol::has_getbatteryinforsp() const {
  return _internal_has_getbatteryinforsp();
}
inline void PerfcatServerProtocol::set_has_getbatteryinforsp() {
  _oneof_case_[0] = kGetBatteryInfoRsp;
}
inline void PerfcatServerProtocol::clear_getbatteryinforsp() {
  if (_internal_has_getbatteryinforsp()) {
    if (GetArena() == nullptr) {
      delete protocol_.getbatteryinforsp_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::GetBatteryInfoRsp* PerfcatServerProtocol::release_getbatteryinforsp() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatServerProtocol.getBatteryInfoRsp)
  if (_internal_has_getbatteryinforsp()) {
    clear_has_protocol();
      ::perfcat::GetBatteryInfoRsp* temp = protocol_.getbatteryinforsp_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.getbatteryinforsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::GetBatteryInfoRsp& PerfcatServerProtocol::_internal_getbatteryinforsp() const {
  return _internal_has_getbatteryinforsp()
      ? *protocol_.getbatteryinforsp_
      : *reinterpret_cast< ::perfcat::GetBatteryInfoRsp*>(&::perfcat::_GetBatteryInfoRsp_default_instance_);
}
inline const ::perfcat::GetBatteryInfoRsp& PerfcatServerProtocol::getbatteryinforsp() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatServerProtocol.getBatteryInfoRsp)
  return _internal_getbatteryinforsp();
}
inline ::perfcat::GetBatteryInfoRsp* PerfcatServerProtocol::unsafe_arena_release_getbatteryinforsp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatServerProtocol.getBatteryInfoRsp)
  if (_internal_has_getbatteryinforsp()) {
    clear_has_protocol();
    ::perfcat::GetBatteryInfoRsp* temp = protocol_.getbatteryinforsp_;
    protocol_.getbatteryinforsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatServerProtocol::unsafe_arena_set_allocated_getbatteryinforsp(::perfcat::GetBatteryInfoRsp* getbatteryinforsp) {
  clear_protocol();
  if (getbatteryinforsp) {
    set_has_getbatteryinforsp();
    protocol_.getbatteryinforsp_ = getbatteryinforsp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatServerProtocol.getBatteryInfoRsp)
}
inline ::perfcat::GetBatteryInfoRsp* PerfcatServerProtocol::_internal_mutable_getbatteryinforsp() {
  if (!_internal_has_getbatteryinforsp()) {
    clear_protocol();
    set_has_getbatteryinforsp();
    protocol_.getbatteryinforsp_ = CreateMaybeMessage< ::perfcat::GetBatteryInfoRsp >(GetArena());
  }
  return protocol_.getbatteryinforsp_;
}
inline ::perfcat::GetBatteryInfoRsp* PerfcatServerProtocol::mutable_getbatteryinforsp() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatServerProtocol.getBatteryInfoRsp)
  return _internal_mutable_getbatteryinforsp();
}

// .perfcat.AppClosedNTF appClosedNTF = 19;
inline bool PerfcatServerProtocol::_internal_has_appclosedntf() const {
  return protocol_case() == kAppClosedNTF;
}
inline bool PerfcatServerProtocol::has_appclosedntf() const {
  return _internal_has_appclosedntf();
}
inline void PerfcatServerProtocol::set_has_appclosedntf() {
  _oneof_case_[0] = kAppClosedNTF;
}
inline void PerfcatServerProtocol::clear_appclosedntf() {
  if (_internal_has_appclosedntf()) {
    if (GetArena() == nullptr) {
      delete protocol_.appclosedntf_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::AppClosedNTF* PerfcatServerProtocol::release_appclosedntf() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatServerProtocol.appClosedNTF)
  if (_internal_has_appclosedntf()) {
    clear_has_protocol();
      ::perfcat::AppClosedNTF* temp = protocol_.appclosedntf_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.appclosedntf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::AppClosedNTF& PerfcatServerProtocol::_internal_appclosedntf() const {
  return _internal_has_appclosedntf()
      ? *protocol_.appclosedntf_
      : *reinterpret_cast< ::perfcat::AppClosedNTF*>(&::perfcat::_AppClosedNTF_default_instance_);
}
inline const ::perfcat::AppClosedNTF& PerfcatServerProtocol::appclosedntf() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatServerProtocol.appClosedNTF)
  return _internal_appclosedntf();
}
inline ::perfcat::AppClosedNTF* PerfcatServerProtocol::unsafe_arena_release_appclosedntf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatServerProtocol.appClosedNTF)
  if (_internal_has_appclosedntf()) {
    clear_has_protocol();
    ::perfcat::AppClosedNTF* temp = protocol_.appclosedntf_;
    protocol_.appclosedntf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatServerProtocol::unsafe_arena_set_allocated_appclosedntf(::perfcat::AppClosedNTF* appclosedntf) {
  clear_protocol();
  if (appclosedntf) {
    set_has_appclosedntf();
    protocol_.appclosedntf_ = appclosedntf;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatServerProtocol.appClosedNTF)
}
inline ::perfcat::AppClosedNTF* PerfcatServerProtocol::_internal_mutable_appclosedntf() {
  if (!_internal_has_appclosedntf()) {
    clear_protocol();
    set_has_appclosedntf();
    protocol_.appclosedntf_ = CreateMaybeMessage< ::perfcat::AppClosedNTF >(GetArena());
  }
  return protocol_.appclosedntf_;
}
inline ::perfcat::AppClosedNTF* PerfcatServerProtocol::mutable_appclosedntf() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatServerProtocol.appClosedNTF)
  return _internal_mutable_appclosedntf();
}

// .perfcat.ProfileNTFACK profileNTFACK = 20;
inline bool PerfcatServerProtocol::_internal_has_profilentfack() const {
  return protocol_case() == kProfileNTFACK;
}
inline bool PerfcatServerProtocol::has_profilentfack() const {
  return _internal_has_profilentfack();
}
inline void PerfcatServerProtocol::set_has_profilentfack() {
  _oneof_case_[0] = kProfileNTFACK;
}
inline void PerfcatServerProtocol::clear_profilentfack() {
  if (_internal_has_profilentfack()) {
    if (GetArena() == nullptr) {
      delete protocol_.profilentfack_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::ProfileNTFACK* PerfcatServerProtocol::release_profilentfack() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatServerProtocol.profileNTFACK)
  if (_internal_has_profilentfack()) {
    clear_has_protocol();
      ::perfcat::ProfileNTFACK* temp = protocol_.profilentfack_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.profilentfack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::ProfileNTFACK& PerfcatServerProtocol::_internal_profilentfack() const {
  return _internal_has_profilentfack()
      ? *protocol_.profilentfack_
      : *reinterpret_cast< ::perfcat::ProfileNTFACK*>(&::perfcat::_ProfileNTFACK_default_instance_);
}
inline const ::perfcat::ProfileNTFACK& PerfcatServerProtocol::profilentfack() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatServerProtocol.profileNTFACK)
  return _internal_profilentfack();
}
inline ::perfcat::ProfileNTFACK* PerfcatServerProtocol::unsafe_arena_release_profilentfack() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatServerProtocol.profileNTFACK)
  if (_internal_has_profilentfack()) {
    clear_has_protocol();
    ::perfcat::ProfileNTFACK* temp = protocol_.profilentfack_;
    protocol_.profilentfack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatServerProtocol::unsafe_arena_set_allocated_profilentfack(::perfcat::ProfileNTFACK* profilentfack) {
  clear_protocol();
  if (profilentfack) {
    set_has_profilentfack();
    protocol_.profilentfack_ = profilentfack;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatServerProtocol.profileNTFACK)
}
inline ::perfcat::ProfileNTFACK* PerfcatServerProtocol::_internal_mutable_profilentfack() {
  if (!_internal_has_profilentfack()) {
    clear_protocol();
    set_has_profilentfack();
    protocol_.profilentfack_ = CreateMaybeMessage< ::perfcat::ProfileNTFACK >(GetArena());
  }
  return protocol_.profilentfack_;
}
inline ::perfcat::ProfileNTFACK* PerfcatServerProtocol::mutable_profilentfack() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatServerProtocol.profileNTFACK)
  return _internal_mutable_profilentfack();
}

// .perfcat.PrepareWifiProfileNTF prepareWifiProfileNTF = 21;
inline bool PerfcatServerProtocol::_internal_has_preparewifiprofilentf() const {
  return protocol_case() == kPrepareWifiProfileNTF;
}
inline bool PerfcatServerProtocol::has_preparewifiprofilentf() const {
  return _internal_has_preparewifiprofilentf();
}
inline void PerfcatServerProtocol::set_has_preparewifiprofilentf() {
  _oneof_case_[0] = kPrepareWifiProfileNTF;
}
inline void PerfcatServerProtocol::clear_preparewifiprofilentf() {
  if (_internal_has_preparewifiprofilentf()) {
    if (GetArena() == nullptr) {
      delete protocol_.preparewifiprofilentf_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::PrepareWifiProfileNTF* PerfcatServerProtocol::release_preparewifiprofilentf() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatServerProtocol.prepareWifiProfileNTF)
  if (_internal_has_preparewifiprofilentf()) {
    clear_has_protocol();
      ::perfcat::PrepareWifiProfileNTF* temp = protocol_.preparewifiprofilentf_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.preparewifiprofilentf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::PrepareWifiProfileNTF& PerfcatServerProtocol::_internal_preparewifiprofilentf() const {
  return _internal_has_preparewifiprofilentf()
      ? *protocol_.preparewifiprofilentf_
      : *reinterpret_cast< ::perfcat::PrepareWifiProfileNTF*>(&::perfcat::_PrepareWifiProfileNTF_default_instance_);
}
inline const ::perfcat::PrepareWifiProfileNTF& PerfcatServerProtocol::preparewifiprofilentf() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatServerProtocol.prepareWifiProfileNTF)
  return _internal_preparewifiprofilentf();
}
inline ::perfcat::PrepareWifiProfileNTF* PerfcatServerProtocol::unsafe_arena_release_preparewifiprofilentf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatServerProtocol.prepareWifiProfileNTF)
  if (_internal_has_preparewifiprofilentf()) {
    clear_has_protocol();
    ::perfcat::PrepareWifiProfileNTF* temp = protocol_.preparewifiprofilentf_;
    protocol_.preparewifiprofilentf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatServerProtocol::unsafe_arena_set_allocated_preparewifiprofilentf(::perfcat::PrepareWifiProfileNTF* preparewifiprofilentf) {
  clear_protocol();
  if (preparewifiprofilentf) {
    set_has_preparewifiprofilentf();
    protocol_.preparewifiprofilentf_ = preparewifiprofilentf;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatServerProtocol.prepareWifiProfileNTF)
}
inline ::perfcat::PrepareWifiProfileNTF* PerfcatServerProtocol::_internal_mutable_preparewifiprofilentf() {
  if (!_internal_has_preparewifiprofilentf()) {
    clear_protocol();
    set_has_preparewifiprofilentf();
    protocol_.preparewifiprofilentf_ = CreateMaybeMessage< ::perfcat::PrepareWifiProfileNTF >(GetArena());
  }
  return protocol_.preparewifiprofilentf_;
}
inline ::perfcat::PrepareWifiProfileNTF* PerfcatServerProtocol::mutable_preparewifiprofilentf() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatServerProtocol.prepareWifiProfileNTF)
  return _internal_mutable_preparewifiprofilentf();
}

// .perfcat.GetAppInfoReq getAppInfoReq = 22;
inline bool PerfcatServerProtocol::_internal_has_getappinforeq() const {
  return protocol_case() == kGetAppInfoReq;
}
inline bool PerfcatServerProtocol::has_getappinforeq() const {
  return _internal_has_getappinforeq();
}
inline void PerfcatServerProtocol::set_has_getappinforeq() {
  _oneof_case_[0] = kGetAppInfoReq;
}
inline void PerfcatServerProtocol::clear_getappinforeq() {
  if (_internal_has_getappinforeq()) {
    if (GetArena() == nullptr) {
      delete protocol_.getappinforeq_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::GetAppInfoReq* PerfcatServerProtocol::release_getappinforeq() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatServerProtocol.getAppInfoReq)
  if (_internal_has_getappinforeq()) {
    clear_has_protocol();
      ::perfcat::GetAppInfoReq* temp = protocol_.getappinforeq_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.getappinforeq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::GetAppInfoReq& PerfcatServerProtocol::_internal_getappinforeq() const {
  return _internal_has_getappinforeq()
      ? *protocol_.getappinforeq_
      : *reinterpret_cast< ::perfcat::GetAppInfoReq*>(&::perfcat::_GetAppInfoReq_default_instance_);
}
inline const ::perfcat::GetAppInfoReq& PerfcatServerProtocol::getappinforeq() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatServerProtocol.getAppInfoReq)
  return _internal_getappinforeq();
}
inline ::perfcat::GetAppInfoReq* PerfcatServerProtocol::unsafe_arena_release_getappinforeq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatServerProtocol.getAppInfoReq)
  if (_internal_has_getappinforeq()) {
    clear_has_protocol();
    ::perfcat::GetAppInfoReq* temp = protocol_.getappinforeq_;
    protocol_.getappinforeq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatServerProtocol::unsafe_arena_set_allocated_getappinforeq(::perfcat::GetAppInfoReq* getappinforeq) {
  clear_protocol();
  if (getappinforeq) {
    set_has_getappinforeq();
    protocol_.getappinforeq_ = getappinforeq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatServerProtocol.getAppInfoReq)
}
inline ::perfcat::GetAppInfoReq* PerfcatServerProtocol::_internal_mutable_getappinforeq() {
  if (!_internal_has_getappinforeq()) {
    clear_protocol();
    set_has_getappinforeq();
    protocol_.getappinforeq_ = CreateMaybeMessage< ::perfcat::GetAppInfoReq >(GetArena());
  }
  return protocol_.getappinforeq_;
}
inline ::perfcat::GetAppInfoReq* PerfcatServerProtocol::mutable_getappinforeq() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatServerProtocol.getAppInfoReq)
  return _internal_mutable_getappinforeq();
}

// .perfcat.GetAppInfoRsp getAppInfoRsp = 23;
inline bool PerfcatServerProtocol::_internal_has_getappinforsp() const {
  return protocol_case() == kGetAppInfoRsp;
}
inline bool PerfcatServerProtocol::has_getappinforsp() const {
  return _internal_has_getappinforsp();
}
inline void PerfcatServerProtocol::set_has_getappinforsp() {
  _oneof_case_[0] = kGetAppInfoRsp;
}
inline void PerfcatServerProtocol::clear_getappinforsp() {
  if (_internal_has_getappinforsp()) {
    if (GetArena() == nullptr) {
      delete protocol_.getappinforsp_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::GetAppInfoRsp* PerfcatServerProtocol::release_getappinforsp() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatServerProtocol.getAppInfoRsp)
  if (_internal_has_getappinforsp()) {
    clear_has_protocol();
      ::perfcat::GetAppInfoRsp* temp = protocol_.getappinforsp_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.getappinforsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::GetAppInfoRsp& PerfcatServerProtocol::_internal_getappinforsp() const {
  return _internal_has_getappinforsp()
      ? *protocol_.getappinforsp_
      : *reinterpret_cast< ::perfcat::GetAppInfoRsp*>(&::perfcat::_GetAppInfoRsp_default_instance_);
}
inline const ::perfcat::GetAppInfoRsp& PerfcatServerProtocol::getappinforsp() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatServerProtocol.getAppInfoRsp)
  return _internal_getappinforsp();
}
inline ::perfcat::GetAppInfoRsp* PerfcatServerProtocol::unsafe_arena_release_getappinforsp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatServerProtocol.getAppInfoRsp)
  if (_internal_has_getappinforsp()) {
    clear_has_protocol();
    ::perfcat::GetAppInfoRsp* temp = protocol_.getappinforsp_;
    protocol_.getappinforsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatServerProtocol::unsafe_arena_set_allocated_getappinforsp(::perfcat::GetAppInfoRsp* getappinforsp) {
  clear_protocol();
  if (getappinforsp) {
    set_has_getappinforsp();
    protocol_.getappinforsp_ = getappinforsp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatServerProtocol.getAppInfoRsp)
}
inline ::perfcat::GetAppInfoRsp* PerfcatServerProtocol::_internal_mutable_getappinforsp() {
  if (!_internal_has_getappinforsp()) {
    clear_protocol();
    set_has_getappinforsp();
    protocol_.getappinforsp_ = CreateMaybeMessage< ::perfcat::GetAppInfoRsp >(GetArena());
  }
  return protocol_.getappinforsp_;
}
inline ::perfcat::GetAppInfoRsp* PerfcatServerProtocol::mutable_getappinforsp() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatServerProtocol.getAppInfoRsp)
  return _internal_mutable_getappinforsp();
}

// .perfcat.EmptyRsp emptyRsp = 24;
inline bool PerfcatServerProtocol::_internal_has_emptyrsp() const {
  return protocol_case() == kEmptyRsp;
}
inline bool PerfcatServerProtocol::has_emptyrsp() const {
  return _internal_has_emptyrsp();
}
inline void PerfcatServerProtocol::set_has_emptyrsp() {
  _oneof_case_[0] = kEmptyRsp;
}
inline void PerfcatServerProtocol::clear_emptyrsp() {
  if (_internal_has_emptyrsp()) {
    if (GetArena() == nullptr) {
      delete protocol_.emptyrsp_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::EmptyRsp* PerfcatServerProtocol::release_emptyrsp() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatServerProtocol.emptyRsp)
  if (_internal_has_emptyrsp()) {
    clear_has_protocol();
      ::perfcat::EmptyRsp* temp = protocol_.emptyrsp_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.emptyrsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::EmptyRsp& PerfcatServerProtocol::_internal_emptyrsp() const {
  return _internal_has_emptyrsp()
      ? *protocol_.emptyrsp_
      : *reinterpret_cast< ::perfcat::EmptyRsp*>(&::perfcat::_EmptyRsp_default_instance_);
}
inline const ::perfcat::EmptyRsp& PerfcatServerProtocol::emptyrsp() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatServerProtocol.emptyRsp)
  return _internal_emptyrsp();
}
inline ::perfcat::EmptyRsp* PerfcatServerProtocol::unsafe_arena_release_emptyrsp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatServerProtocol.emptyRsp)
  if (_internal_has_emptyrsp()) {
    clear_has_protocol();
    ::perfcat::EmptyRsp* temp = protocol_.emptyrsp_;
    protocol_.emptyrsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatServerProtocol::unsafe_arena_set_allocated_emptyrsp(::perfcat::EmptyRsp* emptyrsp) {
  clear_protocol();
  if (emptyrsp) {
    set_has_emptyrsp();
    protocol_.emptyrsp_ = emptyrsp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatServerProtocol.emptyRsp)
}
inline ::perfcat::EmptyRsp* PerfcatServerProtocol::_internal_mutable_emptyrsp() {
  if (!_internal_has_emptyrsp()) {
    clear_protocol();
    set_has_emptyrsp();
    protocol_.emptyrsp_ = CreateMaybeMessage< ::perfcat::EmptyRsp >(GetArena());
  }
  return protocol_.emptyrsp_;
}
inline ::perfcat::EmptyRsp* PerfcatServerProtocol::mutable_emptyrsp() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatServerProtocol.emptyRsp)
  return _internal_mutable_emptyrsp();
}

// .perfcat.HelloReq helloReq = 25;
inline bool PerfcatServerProtocol::_internal_has_helloreq() const {
  return protocol_case() == kHelloReq;
}
inline bool PerfcatServerProtocol::has_helloreq() const {
  return _internal_has_helloreq();
}
inline void PerfcatServerProtocol::set_has_helloreq() {
  _oneof_case_[0] = kHelloReq;
}
inline void PerfcatServerProtocol::clear_helloreq() {
  if (_internal_has_helloreq()) {
    if (GetArena() == nullptr) {
      delete protocol_.helloreq_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::HelloReq* PerfcatServerProtocol::release_helloreq() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatServerProtocol.helloReq)
  if (_internal_has_helloreq()) {
    clear_has_protocol();
      ::perfcat::HelloReq* temp = protocol_.helloreq_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.helloreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::HelloReq& PerfcatServerProtocol::_internal_helloreq() const {
  return _internal_has_helloreq()
      ? *protocol_.helloreq_
      : *reinterpret_cast< ::perfcat::HelloReq*>(&::perfcat::_HelloReq_default_instance_);
}
inline const ::perfcat::HelloReq& PerfcatServerProtocol::helloreq() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatServerProtocol.helloReq)
  return _internal_helloreq();
}
inline ::perfcat::HelloReq* PerfcatServerProtocol::unsafe_arena_release_helloreq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatServerProtocol.helloReq)
  if (_internal_has_helloreq()) {
    clear_has_protocol();
    ::perfcat::HelloReq* temp = protocol_.helloreq_;
    protocol_.helloreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatServerProtocol::unsafe_arena_set_allocated_helloreq(::perfcat::HelloReq* helloreq) {
  clear_protocol();
  if (helloreq) {
    set_has_helloreq();
    protocol_.helloreq_ = helloreq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatServerProtocol.helloReq)
}
inline ::perfcat::HelloReq* PerfcatServerProtocol::_internal_mutable_helloreq() {
  if (!_internal_has_helloreq()) {
    clear_protocol();
    set_has_helloreq();
    protocol_.helloreq_ = CreateMaybeMessage< ::perfcat::HelloReq >(GetArena());
  }
  return protocol_.helloreq_;
}
inline ::perfcat::HelloReq* PerfcatServerProtocol::mutable_helloreq() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatServerProtocol.helloReq)
  return _internal_mutable_helloreq();
}

// .perfcat.ExecuteShellCommandReq executeShellCommandReq = 26;
inline bool PerfcatServerProtocol::_internal_has_executeshellcommandreq() const {
  return protocol_case() == kExecuteShellCommandReq;
}
inline bool PerfcatServerProtocol::has_executeshellcommandreq() const {
  return _internal_has_executeshellcommandreq();
}
inline void PerfcatServerProtocol::set_has_executeshellcommandreq() {
  _oneof_case_[0] = kExecuteShellCommandReq;
}
inline void PerfcatServerProtocol::clear_executeshellcommandreq() {
  if (_internal_has_executeshellcommandreq()) {
    if (GetArena() == nullptr) {
      delete protocol_.executeshellcommandreq_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::ExecuteShellCommandReq* PerfcatServerProtocol::release_executeshellcommandreq() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatServerProtocol.executeShellCommandReq)
  if (_internal_has_executeshellcommandreq()) {
    clear_has_protocol();
      ::perfcat::ExecuteShellCommandReq* temp = protocol_.executeshellcommandreq_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.executeshellcommandreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::ExecuteShellCommandReq& PerfcatServerProtocol::_internal_executeshellcommandreq() const {
  return _internal_has_executeshellcommandreq()
      ? *protocol_.executeshellcommandreq_
      : *reinterpret_cast< ::perfcat::ExecuteShellCommandReq*>(&::perfcat::_ExecuteShellCommandReq_default_instance_);
}
inline const ::perfcat::ExecuteShellCommandReq& PerfcatServerProtocol::executeshellcommandreq() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatServerProtocol.executeShellCommandReq)
  return _internal_executeshellcommandreq();
}
inline ::perfcat::ExecuteShellCommandReq* PerfcatServerProtocol::unsafe_arena_release_executeshellcommandreq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatServerProtocol.executeShellCommandReq)
  if (_internal_has_executeshellcommandreq()) {
    clear_has_protocol();
    ::perfcat::ExecuteShellCommandReq* temp = protocol_.executeshellcommandreq_;
    protocol_.executeshellcommandreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatServerProtocol::unsafe_arena_set_allocated_executeshellcommandreq(::perfcat::ExecuteShellCommandReq* executeshellcommandreq) {
  clear_protocol();
  if (executeshellcommandreq) {
    set_has_executeshellcommandreq();
    protocol_.executeshellcommandreq_ = executeshellcommandreq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatServerProtocol.executeShellCommandReq)
}
inline ::perfcat::ExecuteShellCommandReq* PerfcatServerProtocol::_internal_mutable_executeshellcommandreq() {
  if (!_internal_has_executeshellcommandreq()) {
    clear_protocol();
    set_has_executeshellcommandreq();
    protocol_.executeshellcommandreq_ = CreateMaybeMessage< ::perfcat::ExecuteShellCommandReq >(GetArena());
  }
  return protocol_.executeshellcommandreq_;
}
inline ::perfcat::ExecuteShellCommandReq* PerfcatServerProtocol::mutable_executeshellcommandreq() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatServerProtocol.executeShellCommandReq)
  return _internal_mutable_executeshellcommandreq();
}

// .perfcat.ExecuteShellCommandRsp executeShellCommandRsp = 27;
inline bool PerfcatServerProtocol::_internal_has_executeshellcommandrsp() const {
  return protocol_case() == kExecuteShellCommandRsp;
}
inline bool PerfcatServerProtocol::has_executeshellcommandrsp() const {
  return _internal_has_executeshellcommandrsp();
}
inline void PerfcatServerProtocol::set_has_executeshellcommandrsp() {
  _oneof_case_[0] = kExecuteShellCommandRsp;
}
inline void PerfcatServerProtocol::clear_executeshellcommandrsp() {
  if (_internal_has_executeshellcommandrsp()) {
    if (GetArena() == nullptr) {
      delete protocol_.executeshellcommandrsp_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::ExecuteShellCommandRsp* PerfcatServerProtocol::release_executeshellcommandrsp() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatServerProtocol.executeShellCommandRsp)
  if (_internal_has_executeshellcommandrsp()) {
    clear_has_protocol();
      ::perfcat::ExecuteShellCommandRsp* temp = protocol_.executeshellcommandrsp_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.executeshellcommandrsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::ExecuteShellCommandRsp& PerfcatServerProtocol::_internal_executeshellcommandrsp() const {
  return _internal_has_executeshellcommandrsp()
      ? *protocol_.executeshellcommandrsp_
      : *reinterpret_cast< ::perfcat::ExecuteShellCommandRsp*>(&::perfcat::_ExecuteShellCommandRsp_default_instance_);
}
inline const ::perfcat::ExecuteShellCommandRsp& PerfcatServerProtocol::executeshellcommandrsp() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatServerProtocol.executeShellCommandRsp)
  return _internal_executeshellcommandrsp();
}
inline ::perfcat::ExecuteShellCommandRsp* PerfcatServerProtocol::unsafe_arena_release_executeshellcommandrsp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatServerProtocol.executeShellCommandRsp)
  if (_internal_has_executeshellcommandrsp()) {
    clear_has_protocol();
    ::perfcat::ExecuteShellCommandRsp* temp = protocol_.executeshellcommandrsp_;
    protocol_.executeshellcommandrsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatServerProtocol::unsafe_arena_set_allocated_executeshellcommandrsp(::perfcat::ExecuteShellCommandRsp* executeshellcommandrsp) {
  clear_protocol();
  if (executeshellcommandrsp) {
    set_has_executeshellcommandrsp();
    protocol_.executeshellcommandrsp_ = executeshellcommandrsp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatServerProtocol.executeShellCommandRsp)
}
inline ::perfcat::ExecuteShellCommandRsp* PerfcatServerProtocol::_internal_mutable_executeshellcommandrsp() {
  if (!_internal_has_executeshellcommandrsp()) {
    clear_protocol();
    set_has_executeshellcommandrsp();
    protocol_.executeshellcommandrsp_ = CreateMaybeMessage< ::perfcat::ExecuteShellCommandRsp >(GetArena());
  }
  return protocol_.executeshellcommandrsp_;
}
inline ::perfcat::ExecuteShellCommandRsp* PerfcatServerProtocol::mutable_executeshellcommandrsp() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatServerProtocol.executeShellCommandRsp)
  return _internal_mutable_executeshellcommandrsp();
}

// .perfcat.RegisterAppReq registerAppReq = 28;
inline bool PerfcatServerProtocol::_internal_has_registerappreq() const {
  return protocol_case() == kRegisterAppReq;
}
inline bool PerfcatServerProtocol::has_registerappreq() const {
  return _internal_has_registerappreq();
}
inline void PerfcatServerProtocol::set_has_registerappreq() {
  _oneof_case_[0] = kRegisterAppReq;
}
inline void PerfcatServerProtocol::clear_registerappreq() {
  if (_internal_has_registerappreq()) {
    if (GetArena() == nullptr) {
      delete protocol_.registerappreq_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::RegisterAppReq* PerfcatServerProtocol::release_registerappreq() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatServerProtocol.registerAppReq)
  if (_internal_has_registerappreq()) {
    clear_has_protocol();
      ::perfcat::RegisterAppReq* temp = protocol_.registerappreq_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.registerappreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::RegisterAppReq& PerfcatServerProtocol::_internal_registerappreq() const {
  return _internal_has_registerappreq()
      ? *protocol_.registerappreq_
      : *reinterpret_cast< ::perfcat::RegisterAppReq*>(&::perfcat::_RegisterAppReq_default_instance_);
}
inline const ::perfcat::RegisterAppReq& PerfcatServerProtocol::registerappreq() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatServerProtocol.registerAppReq)
  return _internal_registerappreq();
}
inline ::perfcat::RegisterAppReq* PerfcatServerProtocol::unsafe_arena_release_registerappreq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatServerProtocol.registerAppReq)
  if (_internal_has_registerappreq()) {
    clear_has_protocol();
    ::perfcat::RegisterAppReq* temp = protocol_.registerappreq_;
    protocol_.registerappreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatServerProtocol::unsafe_arena_set_allocated_registerappreq(::perfcat::RegisterAppReq* registerappreq) {
  clear_protocol();
  if (registerappreq) {
    set_has_registerappreq();
    protocol_.registerappreq_ = registerappreq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatServerProtocol.registerAppReq)
}
inline ::perfcat::RegisterAppReq* PerfcatServerProtocol::_internal_mutable_registerappreq() {
  if (!_internal_has_registerappreq()) {
    clear_protocol();
    set_has_registerappreq();
    protocol_.registerappreq_ = CreateMaybeMessage< ::perfcat::RegisterAppReq >(GetArena());
  }
  return protocol_.registerappreq_;
}
inline ::perfcat::RegisterAppReq* PerfcatServerProtocol::mutable_registerappreq() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatServerProtocol.registerAppReq)
  return _internal_mutable_registerappreq();
}

// .perfcat.ResumeProfileReq resumeProfileReq = 29;
inline bool PerfcatServerProtocol::_internal_has_resumeprofilereq() const {
  return protocol_case() == kResumeProfileReq;
}
inline bool PerfcatServerProtocol::has_resumeprofilereq() const {
  return _internal_has_resumeprofilereq();
}
inline void PerfcatServerProtocol::set_has_resumeprofilereq() {
  _oneof_case_[0] = kResumeProfileReq;
}
inline void PerfcatServerProtocol::clear_resumeprofilereq() {
  if (_internal_has_resumeprofilereq()) {
    if (GetArena() == nullptr) {
      delete protocol_.resumeprofilereq_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::ResumeProfileReq* PerfcatServerProtocol::release_resumeprofilereq() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatServerProtocol.resumeProfileReq)
  if (_internal_has_resumeprofilereq()) {
    clear_has_protocol();
      ::perfcat::ResumeProfileReq* temp = protocol_.resumeprofilereq_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.resumeprofilereq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::ResumeProfileReq& PerfcatServerProtocol::_internal_resumeprofilereq() const {
  return _internal_has_resumeprofilereq()
      ? *protocol_.resumeprofilereq_
      : *reinterpret_cast< ::perfcat::ResumeProfileReq*>(&::perfcat::_ResumeProfileReq_default_instance_);
}
inline const ::perfcat::ResumeProfileReq& PerfcatServerProtocol::resumeprofilereq() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatServerProtocol.resumeProfileReq)
  return _internal_resumeprofilereq();
}
inline ::perfcat::ResumeProfileReq* PerfcatServerProtocol::unsafe_arena_release_resumeprofilereq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatServerProtocol.resumeProfileReq)
  if (_internal_has_resumeprofilereq()) {
    clear_has_protocol();
    ::perfcat::ResumeProfileReq* temp = protocol_.resumeprofilereq_;
    protocol_.resumeprofilereq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatServerProtocol::unsafe_arena_set_allocated_resumeprofilereq(::perfcat::ResumeProfileReq* resumeprofilereq) {
  clear_protocol();
  if (resumeprofilereq) {
    set_has_resumeprofilereq();
    protocol_.resumeprofilereq_ = resumeprofilereq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatServerProtocol.resumeProfileReq)
}
inline ::perfcat::ResumeProfileReq* PerfcatServerProtocol::_internal_mutable_resumeprofilereq() {
  if (!_internal_has_resumeprofilereq()) {
    clear_protocol();
    set_has_resumeprofilereq();
    protocol_.resumeprofilereq_ = CreateMaybeMessage< ::perfcat::ResumeProfileReq >(GetArena());
  }
  return protocol_.resumeprofilereq_;
}
inline ::perfcat::ResumeProfileReq* PerfcatServerProtocol::mutable_resumeprofilereq() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatServerProtocol.resumeProfileReq)
  return _internal_mutable_resumeprofilereq();
}

// .perfcat.ResumeProfileRsp resumeProfileRsp = 30;
inline bool PerfcatServerProtocol::_internal_has_resumeprofilersp() const {
  return protocol_case() == kResumeProfileRsp;
}
inline bool PerfcatServerProtocol::has_resumeprofilersp() const {
  return _internal_has_resumeprofilersp();
}
inline void PerfcatServerProtocol::set_has_resumeprofilersp() {
  _oneof_case_[0] = kResumeProfileRsp;
}
inline void PerfcatServerProtocol::clear_resumeprofilersp() {
  if (_internal_has_resumeprofilersp()) {
    if (GetArena() == nullptr) {
      delete protocol_.resumeprofilersp_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::ResumeProfileRsp* PerfcatServerProtocol::release_resumeprofilersp() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatServerProtocol.resumeProfileRsp)
  if (_internal_has_resumeprofilersp()) {
    clear_has_protocol();
      ::perfcat::ResumeProfileRsp* temp = protocol_.resumeprofilersp_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.resumeprofilersp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::ResumeProfileRsp& PerfcatServerProtocol::_internal_resumeprofilersp() const {
  return _internal_has_resumeprofilersp()
      ? *protocol_.resumeprofilersp_
      : *reinterpret_cast< ::perfcat::ResumeProfileRsp*>(&::perfcat::_ResumeProfileRsp_default_instance_);
}
inline const ::perfcat::ResumeProfileRsp& PerfcatServerProtocol::resumeprofilersp() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatServerProtocol.resumeProfileRsp)
  return _internal_resumeprofilersp();
}
inline ::perfcat::ResumeProfileRsp* PerfcatServerProtocol::unsafe_arena_release_resumeprofilersp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatServerProtocol.resumeProfileRsp)
  if (_internal_has_resumeprofilersp()) {
    clear_has_protocol();
    ::perfcat::ResumeProfileRsp* temp = protocol_.resumeprofilersp_;
    protocol_.resumeprofilersp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatServerProtocol::unsafe_arena_set_allocated_resumeprofilersp(::perfcat::ResumeProfileRsp* resumeprofilersp) {
  clear_protocol();
  if (resumeprofilersp) {
    set_has_resumeprofilersp();
    protocol_.resumeprofilersp_ = resumeprofilersp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatServerProtocol.resumeProfileRsp)
}
inline ::perfcat::ResumeProfileRsp* PerfcatServerProtocol::_internal_mutable_resumeprofilersp() {
  if (!_internal_has_resumeprofilersp()) {
    clear_protocol();
    set_has_resumeprofilersp();
    protocol_.resumeprofilersp_ = CreateMaybeMessage< ::perfcat::ResumeProfileRsp >(GetArena());
  }
  return protocol_.resumeprofilersp_;
}
inline ::perfcat::ResumeProfileRsp* PerfcatServerProtocol::mutable_resumeprofilersp() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatServerProtocol.resumeProfileRsp)
  return _internal_mutable_resumeprofilersp();
}

// .perfcat.GetDataFromAppReq getDataFromAppReq = 31;
inline bool PerfcatServerProtocol::_internal_has_getdatafromappreq() const {
  return protocol_case() == kGetDataFromAppReq;
}
inline bool PerfcatServerProtocol::has_getdatafromappreq() const {
  return _internal_has_getdatafromappreq();
}
inline void PerfcatServerProtocol::set_has_getdatafromappreq() {
  _oneof_case_[0] = kGetDataFromAppReq;
}
inline void PerfcatServerProtocol::clear_getdatafromappreq() {
  if (_internal_has_getdatafromappreq()) {
    if (GetArena() == nullptr) {
      delete protocol_.getdatafromappreq_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::GetDataFromAppReq* PerfcatServerProtocol::release_getdatafromappreq() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatServerProtocol.getDataFromAppReq)
  if (_internal_has_getdatafromappreq()) {
    clear_has_protocol();
      ::perfcat::GetDataFromAppReq* temp = protocol_.getdatafromappreq_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.getdatafromappreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::GetDataFromAppReq& PerfcatServerProtocol::_internal_getdatafromappreq() const {
  return _internal_has_getdatafromappreq()
      ? *protocol_.getdatafromappreq_
      : *reinterpret_cast< ::perfcat::GetDataFromAppReq*>(&::perfcat::_GetDataFromAppReq_default_instance_);
}
inline const ::perfcat::GetDataFromAppReq& PerfcatServerProtocol::getdatafromappreq() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatServerProtocol.getDataFromAppReq)
  return _internal_getdatafromappreq();
}
inline ::perfcat::GetDataFromAppReq* PerfcatServerProtocol::unsafe_arena_release_getdatafromappreq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatServerProtocol.getDataFromAppReq)
  if (_internal_has_getdatafromappreq()) {
    clear_has_protocol();
    ::perfcat::GetDataFromAppReq* temp = protocol_.getdatafromappreq_;
    protocol_.getdatafromappreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatServerProtocol::unsafe_arena_set_allocated_getdatafromappreq(::perfcat::GetDataFromAppReq* getdatafromappreq) {
  clear_protocol();
  if (getdatafromappreq) {
    set_has_getdatafromappreq();
    protocol_.getdatafromappreq_ = getdatafromappreq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatServerProtocol.getDataFromAppReq)
}
inline ::perfcat::GetDataFromAppReq* PerfcatServerProtocol::_internal_mutable_getdatafromappreq() {
  if (!_internal_has_getdatafromappreq()) {
    clear_protocol();
    set_has_getdatafromappreq();
    protocol_.getdatafromappreq_ = CreateMaybeMessage< ::perfcat::GetDataFromAppReq >(GetArena());
  }
  return protocol_.getdatafromappreq_;
}
inline ::perfcat::GetDataFromAppReq* PerfcatServerProtocol::mutable_getdatafromappreq() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatServerProtocol.getDataFromAppReq)
  return _internal_mutable_getdatafromappreq();
}

// .perfcat.GetDataFromAppRsp getDataFromAppRsp = 32;
inline bool PerfcatServerProtocol::_internal_has_getdatafromapprsp() const {
  return protocol_case() == kGetDataFromAppRsp;
}
inline bool PerfcatServerProtocol::has_getdatafromapprsp() const {
  return _internal_has_getdatafromapprsp();
}
inline void PerfcatServerProtocol::set_has_getdatafromapprsp() {
  _oneof_case_[0] = kGetDataFromAppRsp;
}
inline void PerfcatServerProtocol::clear_getdatafromapprsp() {
  if (_internal_has_getdatafromapprsp()) {
    if (GetArena() == nullptr) {
      delete protocol_.getdatafromapprsp_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::GetDataFromAppRsp* PerfcatServerProtocol::release_getdatafromapprsp() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatServerProtocol.getDataFromAppRsp)
  if (_internal_has_getdatafromapprsp()) {
    clear_has_protocol();
      ::perfcat::GetDataFromAppRsp* temp = protocol_.getdatafromapprsp_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.getdatafromapprsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::GetDataFromAppRsp& PerfcatServerProtocol::_internal_getdatafromapprsp() const {
  return _internal_has_getdatafromapprsp()
      ? *protocol_.getdatafromapprsp_
      : *reinterpret_cast< ::perfcat::GetDataFromAppRsp*>(&::perfcat::_GetDataFromAppRsp_default_instance_);
}
inline const ::perfcat::GetDataFromAppRsp& PerfcatServerProtocol::getdatafromapprsp() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatServerProtocol.getDataFromAppRsp)
  return _internal_getdatafromapprsp();
}
inline ::perfcat::GetDataFromAppRsp* PerfcatServerProtocol::unsafe_arena_release_getdatafromapprsp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatServerProtocol.getDataFromAppRsp)
  if (_internal_has_getdatafromapprsp()) {
    clear_has_protocol();
    ::perfcat::GetDataFromAppRsp* temp = protocol_.getdatafromapprsp_;
    protocol_.getdatafromapprsp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatServerProtocol::unsafe_arena_set_allocated_getdatafromapprsp(::perfcat::GetDataFromAppRsp* getdatafromapprsp) {
  clear_protocol();
  if (getdatafromapprsp) {
    set_has_getdatafromapprsp();
    protocol_.getdatafromapprsp_ = getdatafromapprsp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatServerProtocol.getDataFromAppRsp)
}
inline ::perfcat::GetDataFromAppRsp* PerfcatServerProtocol::_internal_mutable_getdatafromapprsp() {
  if (!_internal_has_getdatafromapprsp()) {
    clear_protocol();
    set_has_getdatafromapprsp();
    protocol_.getdatafromapprsp_ = CreateMaybeMessage< ::perfcat::GetDataFromAppRsp >(GetArena());
  }
  return protocol_.getdatafromapprsp_;
}
inline ::perfcat::GetDataFromAppRsp* PerfcatServerProtocol::mutable_getdatafromapprsp() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatServerProtocol.getDataFromAppRsp)
  return _internal_mutable_getdatafromapprsp();
}

// .perfcat.SetScreenshotIntervalReq setScreenshotIntervalReq = 33;
inline bool PerfcatServerProtocol::_internal_has_setscreenshotintervalreq() const {
  return protocol_case() == kSetScreenshotIntervalReq;
}
inline bool PerfcatServerProtocol::has_setscreenshotintervalreq() const {
  return _internal_has_setscreenshotintervalreq();
}
inline void PerfcatServerProtocol::set_has_setscreenshotintervalreq() {
  _oneof_case_[0] = kSetScreenshotIntervalReq;
}
inline void PerfcatServerProtocol::clear_setscreenshotintervalreq() {
  if (_internal_has_setscreenshotintervalreq()) {
    if (GetArena() == nullptr) {
      delete protocol_.setscreenshotintervalreq_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::SetScreenshotIntervalReq* PerfcatServerProtocol::release_setscreenshotintervalreq() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatServerProtocol.setScreenshotIntervalReq)
  if (_internal_has_setscreenshotintervalreq()) {
    clear_has_protocol();
      ::perfcat::SetScreenshotIntervalReq* temp = protocol_.setscreenshotintervalreq_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.setscreenshotintervalreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::SetScreenshotIntervalReq& PerfcatServerProtocol::_internal_setscreenshotintervalreq() const {
  return _internal_has_setscreenshotintervalreq()
      ? *protocol_.setscreenshotintervalreq_
      : *reinterpret_cast< ::perfcat::SetScreenshotIntervalReq*>(&::perfcat::_SetScreenshotIntervalReq_default_instance_);
}
inline const ::perfcat::SetScreenshotIntervalReq& PerfcatServerProtocol::setscreenshotintervalreq() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatServerProtocol.setScreenshotIntervalReq)
  return _internal_setscreenshotintervalreq();
}
inline ::perfcat::SetScreenshotIntervalReq* PerfcatServerProtocol::unsafe_arena_release_setscreenshotintervalreq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatServerProtocol.setScreenshotIntervalReq)
  if (_internal_has_setscreenshotintervalreq()) {
    clear_has_protocol();
    ::perfcat::SetScreenshotIntervalReq* temp = protocol_.setscreenshotintervalreq_;
    protocol_.setscreenshotintervalreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatServerProtocol::unsafe_arena_set_allocated_setscreenshotintervalreq(::perfcat::SetScreenshotIntervalReq* setscreenshotintervalreq) {
  clear_protocol();
  if (setscreenshotintervalreq) {
    set_has_setscreenshotintervalreq();
    protocol_.setscreenshotintervalreq_ = setscreenshotintervalreq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatServerProtocol.setScreenshotIntervalReq)
}
inline ::perfcat::SetScreenshotIntervalReq* PerfcatServerProtocol::_internal_mutable_setscreenshotintervalreq() {
  if (!_internal_has_setscreenshotintervalreq()) {
    clear_protocol();
    set_has_setscreenshotintervalreq();
    protocol_.setscreenshotintervalreq_ = CreateMaybeMessage< ::perfcat::SetScreenshotIntervalReq >(GetArena());
  }
  return protocol_.setscreenshotintervalreq_;
}
inline ::perfcat::SetScreenshotIntervalReq* PerfcatServerProtocol::mutable_setscreenshotintervalreq() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatServerProtocol.setScreenshotIntervalReq)
  return _internal_mutable_setscreenshotintervalreq();
}

// .perfcat.EnableFloatingWindowReq enableFloatingWindowReq = 34;
inline bool PerfcatServerProtocol::_internal_has_enablefloatingwindowreq() const {
  return protocol_case() == kEnableFloatingWindowReq;
}
inline bool PerfcatServerProtocol::has_enablefloatingwindowreq() const {
  return _internal_has_enablefloatingwindowreq();
}
inline void PerfcatServerProtocol::set_has_enablefloatingwindowreq() {
  _oneof_case_[0] = kEnableFloatingWindowReq;
}
inline void PerfcatServerProtocol::clear_enablefloatingwindowreq() {
  if (_internal_has_enablefloatingwindowreq()) {
    if (GetArena() == nullptr) {
      delete protocol_.enablefloatingwindowreq_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::EnableFloatingWindowReq* PerfcatServerProtocol::release_enablefloatingwindowreq() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatServerProtocol.enableFloatingWindowReq)
  if (_internal_has_enablefloatingwindowreq()) {
    clear_has_protocol();
      ::perfcat::EnableFloatingWindowReq* temp = protocol_.enablefloatingwindowreq_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.enablefloatingwindowreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::EnableFloatingWindowReq& PerfcatServerProtocol::_internal_enablefloatingwindowreq() const {
  return _internal_has_enablefloatingwindowreq()
      ? *protocol_.enablefloatingwindowreq_
      : *reinterpret_cast< ::perfcat::EnableFloatingWindowReq*>(&::perfcat::_EnableFloatingWindowReq_default_instance_);
}
inline const ::perfcat::EnableFloatingWindowReq& PerfcatServerProtocol::enablefloatingwindowreq() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatServerProtocol.enableFloatingWindowReq)
  return _internal_enablefloatingwindowreq();
}
inline ::perfcat::EnableFloatingWindowReq* PerfcatServerProtocol::unsafe_arena_release_enablefloatingwindowreq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatServerProtocol.enableFloatingWindowReq)
  if (_internal_has_enablefloatingwindowreq()) {
    clear_has_protocol();
    ::perfcat::EnableFloatingWindowReq* temp = protocol_.enablefloatingwindowreq_;
    protocol_.enablefloatingwindowreq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatServerProtocol::unsafe_arena_set_allocated_enablefloatingwindowreq(::perfcat::EnableFloatingWindowReq* enablefloatingwindowreq) {
  clear_protocol();
  if (enablefloatingwindowreq) {
    set_has_enablefloatingwindowreq();
    protocol_.enablefloatingwindowreq_ = enablefloatingwindowreq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatServerProtocol.enableFloatingWindowReq)
}
inline ::perfcat::EnableFloatingWindowReq* PerfcatServerProtocol::_internal_mutable_enablefloatingwindowreq() {
  if (!_internal_has_enablefloatingwindowreq()) {
    clear_protocol();
    set_has_enablefloatingwindowreq();
    protocol_.enablefloatingwindowreq_ = CreateMaybeMessage< ::perfcat::EnableFloatingWindowReq >(GetArena());
  }
  return protocol_.enablefloatingwindowreq_;
}
inline ::perfcat::EnableFloatingWindowReq* PerfcatServerProtocol::mutable_enablefloatingwindowreq() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatServerProtocol.enableFloatingWindowReq)
  return _internal_mutable_enablefloatingwindowreq();
}

// .perfcat.ProfileIOSNtf profileIOSNtf = 10001;
inline bool PerfcatServerProtocol::_internal_has_profileiosntf() const {
  return protocol_case() == kProfileIOSNtf;
}
inline bool PerfcatServerProtocol::has_profileiosntf() const {
  return _internal_has_profileiosntf();
}
inline void PerfcatServerProtocol::set_has_profileiosntf() {
  _oneof_case_[0] = kProfileIOSNtf;
}
inline void PerfcatServerProtocol::clear_profileiosntf() {
  if (_internal_has_profileiosntf()) {
    if (GetArena() == nullptr) {
      delete protocol_.profileiosntf_;
    }
    clear_has_protocol();
  }
}
inline ::perfcat::ProfileIOSNtf* PerfcatServerProtocol::release_profileiosntf() {
  // @@protoc_insertion_point(field_release:perfcat.PerfcatServerProtocol.profileIOSNtf)
  if (_internal_has_profileiosntf()) {
    clear_has_protocol();
      ::perfcat::ProfileIOSNtf* temp = protocol_.profileiosntf_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    protocol_.profileiosntf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::ProfileIOSNtf& PerfcatServerProtocol::_internal_profileiosntf() const {
  return _internal_has_profileiosntf()
      ? *protocol_.profileiosntf_
      : *reinterpret_cast< ::perfcat::ProfileIOSNtf*>(&::perfcat::_ProfileIOSNtf_default_instance_);
}
inline const ::perfcat::ProfileIOSNtf& PerfcatServerProtocol::profileiosntf() const {
  // @@protoc_insertion_point(field_get:perfcat.PerfcatServerProtocol.profileIOSNtf)
  return _internal_profileiosntf();
}
inline ::perfcat::ProfileIOSNtf* PerfcatServerProtocol::unsafe_arena_release_profileiosntf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.PerfcatServerProtocol.profileIOSNtf)
  if (_internal_has_profileiosntf()) {
    clear_has_protocol();
    ::perfcat::ProfileIOSNtf* temp = protocol_.profileiosntf_;
    protocol_.profileiosntf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PerfcatServerProtocol::unsafe_arena_set_allocated_profileiosntf(::perfcat::ProfileIOSNtf* profileiosntf) {
  clear_protocol();
  if (profileiosntf) {
    set_has_profileiosntf();
    protocol_.profileiosntf_ = profileiosntf;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.PerfcatServerProtocol.profileIOSNtf)
}
inline ::perfcat::ProfileIOSNtf* PerfcatServerProtocol::_internal_mutable_profileiosntf() {
  if (!_internal_has_profileiosntf()) {
    clear_protocol();
    set_has_profileiosntf();
    protocol_.profileiosntf_ = CreateMaybeMessage< ::perfcat::ProfileIOSNtf >(GetArena());
  }
  return protocol_.profileiosntf_;
}
inline ::perfcat::ProfileIOSNtf* PerfcatServerProtocol::mutable_profileiosntf() {
  // @@protoc_insertion_point(field_mutable:perfcat.PerfcatServerProtocol.profileIOSNtf)
  return _internal_mutable_profileiosntf();
}

inline bool PerfcatServerProtocol::has_protocol() const {
  return protocol_case() != PROTOCOL_NOT_SET;
}
inline void PerfcatServerProtocol::clear_has_protocol() {
  _oneof_case_[0] = PROTOCOL_NOT_SET;
}
inline PerfcatServerProtocol::ProtocolCase PerfcatServerProtocol::protocol_case() const {
  return PerfcatServerProtocol::ProtocolCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ProfileReq

// int32 e2 = 1;
inline void ProfileReq::clear_e2() {
  e2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfileReq::_internal_e2() const {
  return e2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfileReq::e2() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileReq.e2)
  return _internal_e2();
}
inline void ProfileReq::_internal_set_e2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  e2_ = value;
}
inline void ProfileReq::set_e2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_e2(value);
  // @@protoc_insertion_point(field_set:perfcat.ProfileReq.e2)
}

// repeated .perfcat.ProfileReq.DataType dataTypes = 2;
inline int ProfileReq::_internal_datatypes_size() const {
  return datatypes_.size();
}
inline int ProfileReq::datatypes_size() const {
  return _internal_datatypes_size();
}
inline void ProfileReq::clear_datatypes() {
  datatypes_.Clear();
}
inline ::perfcat::ProfileReq_DataType ProfileReq::_internal_datatypes(int index) const {
  return static_cast< ::perfcat::ProfileReq_DataType >(datatypes_.Get(index));
}
inline ::perfcat::ProfileReq_DataType ProfileReq::datatypes(int index) const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileReq.dataTypes)
  return _internal_datatypes(index);
}
inline void ProfileReq::set_datatypes(int index, ::perfcat::ProfileReq_DataType value) {
  datatypes_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfcat.ProfileReq.dataTypes)
}
inline void ProfileReq::_internal_add_datatypes(::perfcat::ProfileReq_DataType value) {
  datatypes_.Add(value);
}
inline void ProfileReq::add_datatypes(::perfcat::ProfileReq_DataType value) {
  // @@protoc_insertion_point(field_add:perfcat.ProfileReq.dataTypes)
  _internal_add_datatypes(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ProfileReq::datatypes() const {
  // @@protoc_insertion_point(field_list:perfcat.ProfileReq.dataTypes)
  return datatypes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ProfileReq::_internal_mutable_datatypes() {
  return &datatypes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ProfileReq::mutable_datatypes() {
  // @@protoc_insertion_point(field_mutable_list:perfcat.ProfileReq.dataTypes)
  return _internal_mutable_datatypes();
}

// .perfcat.ProfileApp profileApp = 3;
inline bool ProfileReq::_internal_has_profileapp() const {
  return this != internal_default_instance() && profileapp_ != nullptr;
}
inline bool ProfileReq::has_profileapp() const {
  return _internal_has_profileapp();
}
inline void ProfileReq::clear_profileapp() {
  if (GetArena() == nullptr && profileapp_ != nullptr) {
    delete profileapp_;
  }
  profileapp_ = nullptr;
}
inline const ::perfcat::ProfileApp& ProfileReq::_internal_profileapp() const {
  const ::perfcat::ProfileApp* p = profileapp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perfcat::ProfileApp*>(
      &::perfcat::_ProfileApp_default_instance_);
}
inline const ::perfcat::ProfileApp& ProfileReq::profileapp() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileReq.profileApp)
  return _internal_profileapp();
}
inline void ProfileReq::unsafe_arena_set_allocated_profileapp(
    ::perfcat::ProfileApp* profileapp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(profileapp_);
  }
  profileapp_ = profileapp;
  if (profileapp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.ProfileReq.profileApp)
}
inline ::perfcat::ProfileApp* ProfileReq::release_profileapp() {
  
  ::perfcat::ProfileApp* temp = profileapp_;
  profileapp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perfcat::ProfileApp* ProfileReq::unsafe_arena_release_profileapp() {
  // @@protoc_insertion_point(field_release:perfcat.ProfileReq.profileApp)
  
  ::perfcat::ProfileApp* temp = profileapp_;
  profileapp_ = nullptr;
  return temp;
}
inline ::perfcat::ProfileApp* ProfileReq::_internal_mutable_profileapp() {
  
  if (profileapp_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfcat::ProfileApp>(GetArena());
    profileapp_ = p;
  }
  return profileapp_;
}
inline ::perfcat::ProfileApp* ProfileReq::mutable_profileapp() {
  // @@protoc_insertion_point(field_mutable:perfcat.ProfileReq.profileApp)
  return _internal_mutable_profileapp();
}
inline void ProfileReq::set_allocated_profileapp(::perfcat::ProfileApp* profileapp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete profileapp_;
  }
  if (profileapp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(profileapp);
    if (message_arena != submessage_arena) {
      profileapp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profileapp, submessage_arena);
    }
    
  } else {
    
  }
  profileapp_ = profileapp;
  // @@protoc_insertion_point(field_set_allocated:perfcat.ProfileReq.profileApp)
}

// bool isUSB = 4;
inline void ProfileReq::clear_isusb() {
  isusb_ = false;
}
inline bool ProfileReq::_internal_isusb() const {
  return isusb_;
}
inline bool ProfileReq::isusb() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileReq.isUSB)
  return _internal_isusb();
}
inline void ProfileReq::_internal_set_isusb(bool value) {
  
  isusb_ = value;
}
inline void ProfileReq::set_isusb(bool value) {
  _internal_set_isusb(value);
  // @@protoc_insertion_point(field_set:perfcat.ProfileReq.isUSB)
}

// -------------------------------------------------------------------

// ProfileApp

// .perfcat.ProfileAppInfo appInfo = 1;
inline bool ProfileApp::_internal_has_appinfo() const {
  return target_case() == kAppInfo;
}
inline bool ProfileApp::has_appinfo() const {
  return _internal_has_appinfo();
}
inline void ProfileApp::set_has_appinfo() {
  _oneof_case_[0] = kAppInfo;
}
inline void ProfileApp::clear_appinfo() {
  if (_internal_has_appinfo()) {
    if (GetArena() == nullptr) {
      delete target_.appinfo_;
    }
    clear_has_target();
  }
}
inline ::perfcat::ProfileAppInfo* ProfileApp::release_appinfo() {
  // @@protoc_insertion_point(field_release:perfcat.ProfileApp.appInfo)
  if (_internal_has_appinfo()) {
    clear_has_target();
      ::perfcat::ProfileAppInfo* temp = target_.appinfo_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    target_.appinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::ProfileAppInfo& ProfileApp::_internal_appinfo() const {
  return _internal_has_appinfo()
      ? *target_.appinfo_
      : *reinterpret_cast< ::perfcat::ProfileAppInfo*>(&::perfcat::_ProfileAppInfo_default_instance_);
}
inline const ::perfcat::ProfileAppInfo& ProfileApp::appinfo() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileApp.appInfo)
  return _internal_appinfo();
}
inline ::perfcat::ProfileAppInfo* ProfileApp::unsafe_arena_release_appinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.ProfileApp.appInfo)
  if (_internal_has_appinfo()) {
    clear_has_target();
    ::perfcat::ProfileAppInfo* temp = target_.appinfo_;
    target_.appinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProfileApp::unsafe_arena_set_allocated_appinfo(::perfcat::ProfileAppInfo* appinfo) {
  clear_target();
  if (appinfo) {
    set_has_appinfo();
    target_.appinfo_ = appinfo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.ProfileApp.appInfo)
}
inline ::perfcat::ProfileAppInfo* ProfileApp::_internal_mutable_appinfo() {
  if (!_internal_has_appinfo()) {
    clear_target();
    set_has_appinfo();
    target_.appinfo_ = CreateMaybeMessage< ::perfcat::ProfileAppInfo >(GetArena());
  }
  return target_.appinfo_;
}
inline ::perfcat::ProfileAppInfo* ProfileApp::mutable_appinfo() {
  // @@protoc_insertion_point(field_mutable:perfcat.ProfileApp.appInfo)
  return _internal_mutable_appinfo();
}

// .perfcat.ProfileAppPidName pidName = 2;
inline bool ProfileApp::_internal_has_pidname() const {
  return target_case() == kPidName;
}
inline bool ProfileApp::has_pidname() const {
  return _internal_has_pidname();
}
inline void ProfileApp::set_has_pidname() {
  _oneof_case_[0] = kPidName;
}
inline void ProfileApp::clear_pidname() {
  if (_internal_has_pidname()) {
    if (GetArena() == nullptr) {
      delete target_.pidname_;
    }
    clear_has_target();
  }
}
inline ::perfcat::ProfileAppPidName* ProfileApp::release_pidname() {
  // @@protoc_insertion_point(field_release:perfcat.ProfileApp.pidName)
  if (_internal_has_pidname()) {
    clear_has_target();
      ::perfcat::ProfileAppPidName* temp = target_.pidname_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    target_.pidname_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::perfcat::ProfileAppPidName& ProfileApp::_internal_pidname() const {
  return _internal_has_pidname()
      ? *target_.pidname_
      : *reinterpret_cast< ::perfcat::ProfileAppPidName*>(&::perfcat::_ProfileAppPidName_default_instance_);
}
inline const ::perfcat::ProfileAppPidName& ProfileApp::pidname() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileApp.pidName)
  return _internal_pidname();
}
inline ::perfcat::ProfileAppPidName* ProfileApp::unsafe_arena_release_pidname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:perfcat.ProfileApp.pidName)
  if (_internal_has_pidname()) {
    clear_has_target();
    ::perfcat::ProfileAppPidName* temp = target_.pidname_;
    target_.pidname_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ProfileApp::unsafe_arena_set_allocated_pidname(::perfcat::ProfileAppPidName* pidname) {
  clear_target();
  if (pidname) {
    set_has_pidname();
    target_.pidname_ = pidname;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.ProfileApp.pidName)
}
inline ::perfcat::ProfileAppPidName* ProfileApp::_internal_mutable_pidname() {
  if (!_internal_has_pidname()) {
    clear_target();
    set_has_pidname();
    target_.pidname_ = CreateMaybeMessage< ::perfcat::ProfileAppPidName >(GetArena());
  }
  return target_.pidname_;
}
inline ::perfcat::ProfileAppPidName* ProfileApp::mutable_pidname() {
  // @@protoc_insertion_point(field_mutable:perfcat.ProfileApp.pidName)
  return _internal_mutable_pidname();
}

inline bool ProfileApp::has_target() const {
  return target_case() != TARGET_NOT_SET;
}
inline void ProfileApp::clear_has_target() {
  _oneof_case_[0] = TARGET_NOT_SET;
}
inline ProfileApp::TargetCase ProfileApp::target_case() const {
  return ProfileApp::TargetCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ProfileAppPidName

// int32 pid = 1;
inline void ProfileAppPidName::clear_pid() {
  pid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfileAppPidName::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfileAppPidName::pid() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileAppPidName.pid)
  return _internal_pid();
}
inline void ProfileAppPidName::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pid_ = value;
}
inline void ProfileAppPidName::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:perfcat.ProfileAppPidName.pid)
}

// string name = 2;
inline void ProfileAppPidName::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProfileAppPidName::name() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileAppPidName.name)
  return _internal_name();
}
inline void ProfileAppPidName::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:perfcat.ProfileAppPidName.name)
}
inline std::string* ProfileAppPidName::mutable_name() {
  // @@protoc_insertion_point(field_mutable:perfcat.ProfileAppPidName.name)
  return _internal_mutable_name();
}
inline const std::string& ProfileAppPidName::_internal_name() const {
  return name_.Get();
}
inline void ProfileAppPidName::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProfileAppPidName::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:perfcat.ProfileAppPidName.name)
}
inline void ProfileAppPidName::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:perfcat.ProfileAppPidName.name)
}
inline void ProfileAppPidName::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:perfcat.ProfileAppPidName.name)
}
inline std::string* ProfileAppPidName::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProfileAppPidName::release_name() {
  // @@protoc_insertion_point(field_release:perfcat.ProfileAppPidName.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfileAppPidName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:perfcat.ProfileAppPidName.name)
}

// -------------------------------------------------------------------

// ProfileAppInfo

// string processName = 1;
inline void ProfileAppInfo::clear_processname() {
  processname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProfileAppInfo::processname() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileAppInfo.processName)
  return _internal_processname();
}
inline void ProfileAppInfo::set_processname(const std::string& value) {
  _internal_set_processname(value);
  // @@protoc_insertion_point(field_set:perfcat.ProfileAppInfo.processName)
}
inline std::string* ProfileAppInfo::mutable_processname() {
  // @@protoc_insertion_point(field_mutable:perfcat.ProfileAppInfo.processName)
  return _internal_mutable_processname();
}
inline const std::string& ProfileAppInfo::_internal_processname() const {
  return processname_.Get();
}
inline void ProfileAppInfo::_internal_set_processname(const std::string& value) {
  
  processname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProfileAppInfo::set_processname(std::string&& value) {
  
  processname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:perfcat.ProfileAppInfo.processName)
}
inline void ProfileAppInfo::set_processname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  processname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:perfcat.ProfileAppInfo.processName)
}
inline void ProfileAppInfo::set_processname(const char* value,
    size_t size) {
  
  processname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:perfcat.ProfileAppInfo.processName)
}
inline std::string* ProfileAppInfo::_internal_mutable_processname() {
  
  return processname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProfileAppInfo::release_processname() {
  // @@protoc_insertion_point(field_release:perfcat.ProfileAppInfo.processName)
  return processname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfileAppInfo::set_allocated_processname(std::string* processname) {
  if (processname != nullptr) {
    
  } else {
    
  }
  processname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), processname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:perfcat.ProfileAppInfo.processName)
}

// int32 userId = 2;
inline void ProfileAppInfo::clear_userid() {
  userid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfileAppInfo::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfileAppInfo::userid() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileAppInfo.userId)
  return _internal_userid();
}
inline void ProfileAppInfo::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userid_ = value;
}
inline void ProfileAppInfo::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:perfcat.ProfileAppInfo.userId)
}

// string packageName = 3;
inline void ProfileAppInfo::clear_packagename() {
  packagename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProfileAppInfo::packagename() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileAppInfo.packageName)
  return _internal_packagename();
}
inline void ProfileAppInfo::set_packagename(const std::string& value) {
  _internal_set_packagename(value);
  // @@protoc_insertion_point(field_set:perfcat.ProfileAppInfo.packageName)
}
inline std::string* ProfileAppInfo::mutable_packagename() {
  // @@protoc_insertion_point(field_mutable:perfcat.ProfileAppInfo.packageName)
  return _internal_mutable_packagename();
}
inline const std::string& ProfileAppInfo::_internal_packagename() const {
  return packagename_.Get();
}
inline void ProfileAppInfo::_internal_set_packagename(const std::string& value) {
  
  packagename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProfileAppInfo::set_packagename(std::string&& value) {
  
  packagename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:perfcat.ProfileAppInfo.packageName)
}
inline void ProfileAppInfo::set_packagename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  packagename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:perfcat.ProfileAppInfo.packageName)
}
inline void ProfileAppInfo::set_packagename(const char* value,
    size_t size) {
  
  packagename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:perfcat.ProfileAppInfo.packageName)
}
inline std::string* ProfileAppInfo::_internal_mutable_packagename() {
  
  return packagename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProfileAppInfo::release_packagename() {
  // @@protoc_insertion_point(field_release:perfcat.ProfileAppInfo.packageName)
  return packagename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfileAppInfo::set_allocated_packagename(std::string* packagename) {
  if (packagename != nullptr) {
    
  } else {
    
  }
  packagename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), packagename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:perfcat.ProfileAppInfo.packageName)
}

// -------------------------------------------------------------------

// ProfileRsp

// int64 timestamp = 1;
inline void ProfileRsp::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProfileRsp::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProfileRsp::timestamp() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileRsp.timestamp)
  return _internal_timestamp();
}
inline void ProfileRsp::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void ProfileRsp::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:perfcat.ProfileRsp.timestamp)
}

// int32 errorCode = 2;
inline void ProfileRsp::clear_errorcode() {
  errorcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfileRsp::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfileRsp::errorcode() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileRsp.errorCode)
  return _internal_errorcode();
}
inline void ProfileRsp::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errorcode_ = value;
}
inline void ProfileRsp::set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:perfcat.ProfileRsp.errorCode)
}

// int32 sessionId = 3;
inline void ProfileRsp::clear_sessionid() {
  sessionid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfileRsp::_internal_sessionid() const {
  return sessionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfileRsp::sessionid() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileRsp.sessionId)
  return _internal_sessionid();
}
inline void ProfileRsp::_internal_set_sessionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sessionid_ = value;
}
inline void ProfileRsp::set_sessionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:perfcat.ProfileRsp.sessionId)
}

// -------------------------------------------------------------------

// GetMemoryUsageReq

// int32 pid = 1;
inline void GetMemoryUsageReq::clear_pid() {
  pid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetMemoryUsageReq::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetMemoryUsageReq::pid() const {
  // @@protoc_insertion_point(field_get:perfcat.GetMemoryUsageReq.pid)
  return _internal_pid();
}
inline void GetMemoryUsageReq::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pid_ = value;
}
inline void GetMemoryUsageReq::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:perfcat.GetMemoryUsageReq.pid)
}

// int64 unknow = 2;
inline void GetMemoryUsageReq::clear_unknow() {
  unknow_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetMemoryUsageReq::_internal_unknow() const {
  return unknow_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetMemoryUsageReq::unknow() const {
  // @@protoc_insertion_point(field_get:perfcat.GetMemoryUsageReq.unknow)
  return _internal_unknow();
}
inline void GetMemoryUsageReq::_internal_set_unknow(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  unknow_ = value;
}
inline void GetMemoryUsageReq::set_unknow(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_unknow(value);
  // @@protoc_insertion_point(field_set:perfcat.GetMemoryUsageReq.unknow)
}

// -------------------------------------------------------------------

// GetMemoryUsageRsp

// .perfcat.Memory memory = 1;
inline bool GetMemoryUsageRsp::_internal_has_memory() const {
  return this != internal_default_instance() && memory_ != nullptr;
}
inline bool GetMemoryUsageRsp::has_memory() const {
  return _internal_has_memory();
}
inline void GetMemoryUsageRsp::clear_memory() {
  if (GetArena() == nullptr && memory_ != nullptr) {
    delete memory_;
  }
  memory_ = nullptr;
}
inline const ::perfcat::Memory& GetMemoryUsageRsp::_internal_memory() const {
  const ::perfcat::Memory* p = memory_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perfcat::Memory*>(
      &::perfcat::_Memory_default_instance_);
}
inline const ::perfcat::Memory& GetMemoryUsageRsp::memory() const {
  // @@protoc_insertion_point(field_get:perfcat.GetMemoryUsageRsp.memory)
  return _internal_memory();
}
inline void GetMemoryUsageRsp::unsafe_arena_set_allocated_memory(
    ::perfcat::Memory* memory) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(memory_);
  }
  memory_ = memory;
  if (memory) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.GetMemoryUsageRsp.memory)
}
inline ::perfcat::Memory* GetMemoryUsageRsp::release_memory() {
  
  ::perfcat::Memory* temp = memory_;
  memory_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perfcat::Memory* GetMemoryUsageRsp::unsafe_arena_release_memory() {
  // @@protoc_insertion_point(field_release:perfcat.GetMemoryUsageRsp.memory)
  
  ::perfcat::Memory* temp = memory_;
  memory_ = nullptr;
  return temp;
}
inline ::perfcat::Memory* GetMemoryUsageRsp::_internal_mutable_memory() {
  
  if (memory_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfcat::Memory>(GetArena());
    memory_ = p;
  }
  return memory_;
}
inline ::perfcat::Memory* GetMemoryUsageRsp::mutable_memory() {
  // @@protoc_insertion_point(field_mutable:perfcat.GetMemoryUsageRsp.memory)
  return _internal_mutable_memory();
}
inline void GetMemoryUsageRsp::set_allocated_memory(::perfcat::Memory* memory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete memory_;
  }
  if (memory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(memory);
    if (message_arena != submessage_arena) {
      memory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memory, submessage_arena);
    }
    
  } else {
    
  }
  memory_ = memory;
  // @@protoc_insertion_point(field_set_allocated:perfcat.GetMemoryUsageRsp.memory)
}

// -------------------------------------------------------------------

// StopProfileReq

// -------------------------------------------------------------------

// StopProfileRsp

// -------------------------------------------------------------------

// CheckDeviceReq

// -------------------------------------------------------------------

// CheckDeviceRsp

// bool e2 = 1;
inline void CheckDeviceRsp::clear_e2() {
  e2_ = false;
}
inline bool CheckDeviceRsp::_internal_e2() const {
  return e2_;
}
inline bool CheckDeviceRsp::e2() const {
  // @@protoc_insertion_point(field_get:perfcat.CheckDeviceRsp.e2)
  return _internal_e2();
}
inline void CheckDeviceRsp::_internal_set_e2(bool value) {
  
  e2_ = value;
}
inline void CheckDeviceRsp::set_e2(bool value) {
  _internal_set_e2(value);
  // @@protoc_insertion_point(field_set:perfcat.CheckDeviceRsp.e2)
}

// bool gpuFreq = 2;
inline void CheckDeviceRsp::clear_gpufreq() {
  gpufreq_ = false;
}
inline bool CheckDeviceRsp::_internal_gpufreq() const {
  return gpufreq_;
}
inline bool CheckDeviceRsp::gpufreq() const {
  // @@protoc_insertion_point(field_get:perfcat.CheckDeviceRsp.gpuFreq)
  return _internal_gpufreq();
}
inline void CheckDeviceRsp::_internal_set_gpufreq(bool value) {
  
  gpufreq_ = value;
}
inline void CheckDeviceRsp::set_gpufreq(bool value) {
  _internal_set_gpufreq(value);
  // @@protoc_insertion_point(field_set:perfcat.CheckDeviceRsp.gpuFreq)
}

// bool gpuUsage = 3;
inline void CheckDeviceRsp::clear_gpuusage() {
  gpuusage_ = false;
}
inline bool CheckDeviceRsp::_internal_gpuusage() const {
  return gpuusage_;
}
inline bool CheckDeviceRsp::gpuusage() const {
  // @@protoc_insertion_point(field_get:perfcat.CheckDeviceRsp.gpuUsage)
  return _internal_gpuusage();
}
inline void CheckDeviceRsp::_internal_set_gpuusage(bool value) {
  
  gpuusage_ = value;
}
inline void CheckDeviceRsp::set_gpuusage(bool value) {
  _internal_set_gpuusage(value);
  // @@protoc_insertion_point(field_set:perfcat.CheckDeviceRsp.gpuUsage)
}

// bool sw0 = 4;
inline void CheckDeviceRsp::clear_sw0() {
  sw0_ = false;
}
inline bool CheckDeviceRsp::_internal_sw0() const {
  return sw0_;
}
inline bool CheckDeviceRsp::sw0() const {
  // @@protoc_insertion_point(field_get:perfcat.CheckDeviceRsp.sw0)
  return _internal_sw0();
}
inline void CheckDeviceRsp::_internal_set_sw0(bool value) {
  
  sw0_ = value;
}
inline void CheckDeviceRsp::set_sw0(bool value) {
  _internal_set_sw0(value);
  // @@protoc_insertion_point(field_set:perfcat.CheckDeviceRsp.sw0)
}

// bool cpuTemperature = 5;
inline void CheckDeviceRsp::clear_cputemperature() {
  cputemperature_ = false;
}
inline bool CheckDeviceRsp::_internal_cputemperature() const {
  return cputemperature_;
}
inline bool CheckDeviceRsp::cputemperature() const {
  // @@protoc_insertion_point(field_get:perfcat.CheckDeviceRsp.cpuTemperature)
  return _internal_cputemperature();
}
inline void CheckDeviceRsp::_internal_set_cputemperature(bool value) {
  
  cputemperature_ = value;
}
inline void CheckDeviceRsp::set_cputemperature(bool value) {
  _internal_set_cputemperature(value);
  // @@protoc_insertion_point(field_set:perfcat.CheckDeviceRsp.cpuTemperature)
}

// -------------------------------------------------------------------

// ProfileNtf

// int32 index = 1;
inline void ProfileNtf::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfileNtf::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfileNtf::index() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileNtf.index)
  return _internal_index();
}
inline void ProfileNtf::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void ProfileNtf::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:perfcat.ProfileNtf.index)
}

// .perfcat.CpuUsage cpuUsage = 2;
inline bool ProfileNtf::_internal_has_cpuusage() const {
  return this != internal_default_instance() && cpuusage_ != nullptr;
}
inline bool ProfileNtf::has_cpuusage() const {
  return _internal_has_cpuusage();
}
inline void ProfileNtf::clear_cpuusage() {
  if (GetArena() == nullptr && cpuusage_ != nullptr) {
    delete cpuusage_;
  }
  cpuusage_ = nullptr;
}
inline const ::perfcat::CpuUsage& ProfileNtf::_internal_cpuusage() const {
  const ::perfcat::CpuUsage* p = cpuusage_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perfcat::CpuUsage*>(
      &::perfcat::_CpuUsage_default_instance_);
}
inline const ::perfcat::CpuUsage& ProfileNtf::cpuusage() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileNtf.cpuUsage)
  return _internal_cpuusage();
}
inline void ProfileNtf::unsafe_arena_set_allocated_cpuusage(
    ::perfcat::CpuUsage* cpuusage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cpuusage_);
  }
  cpuusage_ = cpuusage;
  if (cpuusage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.ProfileNtf.cpuUsage)
}
inline ::perfcat::CpuUsage* ProfileNtf::release_cpuusage() {
  
  ::perfcat::CpuUsage* temp = cpuusage_;
  cpuusage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perfcat::CpuUsage* ProfileNtf::unsafe_arena_release_cpuusage() {
  // @@protoc_insertion_point(field_release:perfcat.ProfileNtf.cpuUsage)
  
  ::perfcat::CpuUsage* temp = cpuusage_;
  cpuusage_ = nullptr;
  return temp;
}
inline ::perfcat::CpuUsage* ProfileNtf::_internal_mutable_cpuusage() {
  
  if (cpuusage_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfcat::CpuUsage>(GetArena());
    cpuusage_ = p;
  }
  return cpuusage_;
}
inline ::perfcat::CpuUsage* ProfileNtf::mutable_cpuusage() {
  // @@protoc_insertion_point(field_mutable:perfcat.ProfileNtf.cpuUsage)
  return _internal_mutable_cpuusage();
}
inline void ProfileNtf::set_allocated_cpuusage(::perfcat::CpuUsage* cpuusage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cpuusage_;
  }
  if (cpuusage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cpuusage);
    if (message_arena != submessage_arena) {
      cpuusage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpuusage, submessage_arena);
    }
    
  } else {
    
  }
  cpuusage_ = cpuusage;
  // @@protoc_insertion_point(field_set_allocated:perfcat.ProfileNtf.cpuUsage)
}

// .perfcat.CpuFreq cpuFreq = 3;
inline bool ProfileNtf::_internal_has_cpufreq() const {
  return this != internal_default_instance() && cpufreq_ != nullptr;
}
inline bool ProfileNtf::has_cpufreq() const {
  return _internal_has_cpufreq();
}
inline void ProfileNtf::clear_cpufreq() {
  if (GetArena() == nullptr && cpufreq_ != nullptr) {
    delete cpufreq_;
  }
  cpufreq_ = nullptr;
}
inline const ::perfcat::CpuFreq& ProfileNtf::_internal_cpufreq() const {
  const ::perfcat::CpuFreq* p = cpufreq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perfcat::CpuFreq*>(
      &::perfcat::_CpuFreq_default_instance_);
}
inline const ::perfcat::CpuFreq& ProfileNtf::cpufreq() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileNtf.cpuFreq)
  return _internal_cpufreq();
}
inline void ProfileNtf::unsafe_arena_set_allocated_cpufreq(
    ::perfcat::CpuFreq* cpufreq) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cpufreq_);
  }
  cpufreq_ = cpufreq;
  if (cpufreq) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.ProfileNtf.cpuFreq)
}
inline ::perfcat::CpuFreq* ProfileNtf::release_cpufreq() {
  
  ::perfcat::CpuFreq* temp = cpufreq_;
  cpufreq_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perfcat::CpuFreq* ProfileNtf::unsafe_arena_release_cpufreq() {
  // @@protoc_insertion_point(field_release:perfcat.ProfileNtf.cpuFreq)
  
  ::perfcat::CpuFreq* temp = cpufreq_;
  cpufreq_ = nullptr;
  return temp;
}
inline ::perfcat::CpuFreq* ProfileNtf::_internal_mutable_cpufreq() {
  
  if (cpufreq_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfcat::CpuFreq>(GetArena());
    cpufreq_ = p;
  }
  return cpufreq_;
}
inline ::perfcat::CpuFreq* ProfileNtf::mutable_cpufreq() {
  // @@protoc_insertion_point(field_mutable:perfcat.ProfileNtf.cpuFreq)
  return _internal_mutable_cpufreq();
}
inline void ProfileNtf::set_allocated_cpufreq(::perfcat::CpuFreq* cpufreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cpufreq_;
  }
  if (cpufreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cpufreq);
    if (message_arena != submessage_arena) {
      cpufreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpufreq, submessage_arena);
    }
    
  } else {
    
  }
  cpufreq_ = cpufreq;
  // @@protoc_insertion_point(field_set_allocated:perfcat.ProfileNtf.cpuFreq)
}

// .perfcat.GpuUsage gpuUsage = 4;
inline bool ProfileNtf::_internal_has_gpuusage() const {
  return this != internal_default_instance() && gpuusage_ != nullptr;
}
inline bool ProfileNtf::has_gpuusage() const {
  return _internal_has_gpuusage();
}
inline void ProfileNtf::clear_gpuusage() {
  if (GetArena() == nullptr && gpuusage_ != nullptr) {
    delete gpuusage_;
  }
  gpuusage_ = nullptr;
}
inline const ::perfcat::GpuUsage& ProfileNtf::_internal_gpuusage() const {
  const ::perfcat::GpuUsage* p = gpuusage_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perfcat::GpuUsage*>(
      &::perfcat::_GpuUsage_default_instance_);
}
inline const ::perfcat::GpuUsage& ProfileNtf::gpuusage() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileNtf.gpuUsage)
  return _internal_gpuusage();
}
inline void ProfileNtf::unsafe_arena_set_allocated_gpuusage(
    ::perfcat::GpuUsage* gpuusage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gpuusage_);
  }
  gpuusage_ = gpuusage;
  if (gpuusage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.ProfileNtf.gpuUsage)
}
inline ::perfcat::GpuUsage* ProfileNtf::release_gpuusage() {
  
  ::perfcat::GpuUsage* temp = gpuusage_;
  gpuusage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perfcat::GpuUsage* ProfileNtf::unsafe_arena_release_gpuusage() {
  // @@protoc_insertion_point(field_release:perfcat.ProfileNtf.gpuUsage)
  
  ::perfcat::GpuUsage* temp = gpuusage_;
  gpuusage_ = nullptr;
  return temp;
}
inline ::perfcat::GpuUsage* ProfileNtf::_internal_mutable_gpuusage() {
  
  if (gpuusage_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfcat::GpuUsage>(GetArena());
    gpuusage_ = p;
  }
  return gpuusage_;
}
inline ::perfcat::GpuUsage* ProfileNtf::mutable_gpuusage() {
  // @@protoc_insertion_point(field_mutable:perfcat.ProfileNtf.gpuUsage)
  return _internal_mutable_gpuusage();
}
inline void ProfileNtf::set_allocated_gpuusage(::perfcat::GpuUsage* gpuusage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gpuusage_;
  }
  if (gpuusage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gpuusage);
    if (message_arena != submessage_arena) {
      gpuusage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gpuusage, submessage_arena);
    }
    
  } else {
    
  }
  gpuusage_ = gpuusage;
  // @@protoc_insertion_point(field_set_allocated:perfcat.ProfileNtf.gpuUsage)
}

// .perfcat.GpuFreq gpuFreq = 5;
inline bool ProfileNtf::_internal_has_gpufreq() const {
  return this != internal_default_instance() && gpufreq_ != nullptr;
}
inline bool ProfileNtf::has_gpufreq() const {
  return _internal_has_gpufreq();
}
inline void ProfileNtf::clear_gpufreq() {
  if (GetArena() == nullptr && gpufreq_ != nullptr) {
    delete gpufreq_;
  }
  gpufreq_ = nullptr;
}
inline const ::perfcat::GpuFreq& ProfileNtf::_internal_gpufreq() const {
  const ::perfcat::GpuFreq* p = gpufreq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perfcat::GpuFreq*>(
      &::perfcat::_GpuFreq_default_instance_);
}
inline const ::perfcat::GpuFreq& ProfileNtf::gpufreq() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileNtf.gpuFreq)
  return _internal_gpufreq();
}
inline void ProfileNtf::unsafe_arena_set_allocated_gpufreq(
    ::perfcat::GpuFreq* gpufreq) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gpufreq_);
  }
  gpufreq_ = gpufreq;
  if (gpufreq) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.ProfileNtf.gpuFreq)
}
inline ::perfcat::GpuFreq* ProfileNtf::release_gpufreq() {
  
  ::perfcat::GpuFreq* temp = gpufreq_;
  gpufreq_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perfcat::GpuFreq* ProfileNtf::unsafe_arena_release_gpufreq() {
  // @@protoc_insertion_point(field_release:perfcat.ProfileNtf.gpuFreq)
  
  ::perfcat::GpuFreq* temp = gpufreq_;
  gpufreq_ = nullptr;
  return temp;
}
inline ::perfcat::GpuFreq* ProfileNtf::_internal_mutable_gpufreq() {
  
  if (gpufreq_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfcat::GpuFreq>(GetArena());
    gpufreq_ = p;
  }
  return gpufreq_;
}
inline ::perfcat::GpuFreq* ProfileNtf::mutable_gpufreq() {
  // @@protoc_insertion_point(field_mutable:perfcat.ProfileNtf.gpuFreq)
  return _internal_mutable_gpufreq();
}
inline void ProfileNtf::set_allocated_gpufreq(::perfcat::GpuFreq* gpufreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gpufreq_;
  }
  if (gpufreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gpufreq);
    if (message_arena != submessage_arena) {
      gpufreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gpufreq, submessage_arena);
    }
    
  } else {
    
  }
  gpufreq_ = gpufreq;
  // @@protoc_insertion_point(field_set_allocated:perfcat.ProfileNtf.gpuFreq)
}

// .perfcat.FPS fps = 6;
inline bool ProfileNtf::_internal_has_fps() const {
  return this != internal_default_instance() && fps_ != nullptr;
}
inline bool ProfileNtf::has_fps() const {
  return _internal_has_fps();
}
inline void ProfileNtf::clear_fps() {
  if (GetArena() == nullptr && fps_ != nullptr) {
    delete fps_;
  }
  fps_ = nullptr;
}
inline const ::perfcat::FPS& ProfileNtf::_internal_fps() const {
  const ::perfcat::FPS* p = fps_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perfcat::FPS*>(
      &::perfcat::_FPS_default_instance_);
}
inline const ::perfcat::FPS& ProfileNtf::fps() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileNtf.fps)
  return _internal_fps();
}
inline void ProfileNtf::unsafe_arena_set_allocated_fps(
    ::perfcat::FPS* fps) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fps_);
  }
  fps_ = fps;
  if (fps) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.ProfileNtf.fps)
}
inline ::perfcat::FPS* ProfileNtf::release_fps() {
  
  ::perfcat::FPS* temp = fps_;
  fps_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perfcat::FPS* ProfileNtf::unsafe_arena_release_fps() {
  // @@protoc_insertion_point(field_release:perfcat.ProfileNtf.fps)
  
  ::perfcat::FPS* temp = fps_;
  fps_ = nullptr;
  return temp;
}
inline ::perfcat::FPS* ProfileNtf::_internal_mutable_fps() {
  
  if (fps_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfcat::FPS>(GetArena());
    fps_ = p;
  }
  return fps_;
}
inline ::perfcat::FPS* ProfileNtf::mutable_fps() {
  // @@protoc_insertion_point(field_mutable:perfcat.ProfileNtf.fps)
  return _internal_mutable_fps();
}
inline void ProfileNtf::set_allocated_fps(::perfcat::FPS* fps) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fps_;
  }
  if (fps) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fps);
    if (message_arena != submessage_arena) {
      fps = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fps, submessage_arena);
    }
    
  } else {
    
  }
  fps_ = fps;
  // @@protoc_insertion_point(field_set_allocated:perfcat.ProfileNtf.fps)
}

// .perfcat.Screenshot screenshot = 9;
inline bool ProfileNtf::_internal_has_screenshot() const {
  return this != internal_default_instance() && screenshot_ != nullptr;
}
inline bool ProfileNtf::has_screenshot() const {
  return _internal_has_screenshot();
}
inline void ProfileNtf::clear_screenshot() {
  if (GetArena() == nullptr && screenshot_ != nullptr) {
    delete screenshot_;
  }
  screenshot_ = nullptr;
}
inline const ::perfcat::Screenshot& ProfileNtf::_internal_screenshot() const {
  const ::perfcat::Screenshot* p = screenshot_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perfcat::Screenshot*>(
      &::perfcat::_Screenshot_default_instance_);
}
inline const ::perfcat::Screenshot& ProfileNtf::screenshot() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileNtf.screenshot)
  return _internal_screenshot();
}
inline void ProfileNtf::unsafe_arena_set_allocated_screenshot(
    ::perfcat::Screenshot* screenshot) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(screenshot_);
  }
  screenshot_ = screenshot;
  if (screenshot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.ProfileNtf.screenshot)
}
inline ::perfcat::Screenshot* ProfileNtf::release_screenshot() {
  
  ::perfcat::Screenshot* temp = screenshot_;
  screenshot_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perfcat::Screenshot* ProfileNtf::unsafe_arena_release_screenshot() {
  // @@protoc_insertion_point(field_release:perfcat.ProfileNtf.screenshot)
  
  ::perfcat::Screenshot* temp = screenshot_;
  screenshot_ = nullptr;
  return temp;
}
inline ::perfcat::Screenshot* ProfileNtf::_internal_mutable_screenshot() {
  
  if (screenshot_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfcat::Screenshot>(GetArena());
    screenshot_ = p;
  }
  return screenshot_;
}
inline ::perfcat::Screenshot* ProfileNtf::mutable_screenshot() {
  // @@protoc_insertion_point(field_mutable:perfcat.ProfileNtf.screenshot)
  return _internal_mutable_screenshot();
}
inline void ProfileNtf::set_allocated_screenshot(::perfcat::Screenshot* screenshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete screenshot_;
  }
  if (screenshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(screenshot);
    if (message_arena != submessage_arena) {
      screenshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, screenshot, submessage_arena);
    }
    
  } else {
    
  }
  screenshot_ = screenshot;
  // @@protoc_insertion_point(field_set_allocated:perfcat.ProfileNtf.screenshot)
}

// .perfcat.Memory memory = 10;
inline bool ProfileNtf::_internal_has_memory() const {
  return this != internal_default_instance() && memory_ != nullptr;
}
inline bool ProfileNtf::has_memory() const {
  return _internal_has_memory();
}
inline void ProfileNtf::clear_memory() {
  if (GetArena() == nullptr && memory_ != nullptr) {
    delete memory_;
  }
  memory_ = nullptr;
}
inline const ::perfcat::Memory& ProfileNtf::_internal_memory() const {
  const ::perfcat::Memory* p = memory_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perfcat::Memory*>(
      &::perfcat::_Memory_default_instance_);
}
inline const ::perfcat::Memory& ProfileNtf::memory() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileNtf.memory)
  return _internal_memory();
}
inline void ProfileNtf::unsafe_arena_set_allocated_memory(
    ::perfcat::Memory* memory) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(memory_);
  }
  memory_ = memory;
  if (memory) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.ProfileNtf.memory)
}
inline ::perfcat::Memory* ProfileNtf::release_memory() {
  
  ::perfcat::Memory* temp = memory_;
  memory_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perfcat::Memory* ProfileNtf::unsafe_arena_release_memory() {
  // @@protoc_insertion_point(field_release:perfcat.ProfileNtf.memory)
  
  ::perfcat::Memory* temp = memory_;
  memory_ = nullptr;
  return temp;
}
inline ::perfcat::Memory* ProfileNtf::_internal_mutable_memory() {
  
  if (memory_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfcat::Memory>(GetArena());
    memory_ = p;
  }
  return memory_;
}
inline ::perfcat::Memory* ProfileNtf::mutable_memory() {
  // @@protoc_insertion_point(field_mutable:perfcat.ProfileNtf.memory)
  return _internal_mutable_memory();
}
inline void ProfileNtf::set_allocated_memory(::perfcat::Memory* memory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete memory_;
  }
  if (memory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(memory);
    if (message_arena != submessage_arena) {
      memory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memory, submessage_arena);
    }
    
  } else {
    
  }
  memory_ = memory;
  // @@protoc_insertion_point(field_set_allocated:perfcat.ProfileNtf.memory)
}

// .perfcat.Network network = 11;
inline bool ProfileNtf::_internal_has_network() const {
  return this != internal_default_instance() && network_ != nullptr;
}
inline bool ProfileNtf::has_network() const {
  return _internal_has_network();
}
inline void ProfileNtf::clear_network() {
  if (GetArena() == nullptr && network_ != nullptr) {
    delete network_;
  }
  network_ = nullptr;
}
inline const ::perfcat::Network& ProfileNtf::_internal_network() const {
  const ::perfcat::Network* p = network_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perfcat::Network*>(
      &::perfcat::_Network_default_instance_);
}
inline const ::perfcat::Network& ProfileNtf::network() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileNtf.network)
  return _internal_network();
}
inline void ProfileNtf::unsafe_arena_set_allocated_network(
    ::perfcat::Network* network) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_);
  }
  network_ = network;
  if (network) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.ProfileNtf.network)
}
inline ::perfcat::Network* ProfileNtf::release_network() {
  
  ::perfcat::Network* temp = network_;
  network_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perfcat::Network* ProfileNtf::unsafe_arena_release_network() {
  // @@protoc_insertion_point(field_release:perfcat.ProfileNtf.network)
  
  ::perfcat::Network* temp = network_;
  network_ = nullptr;
  return temp;
}
inline ::perfcat::Network* ProfileNtf::_internal_mutable_network() {
  
  if (network_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfcat::Network>(GetArena());
    network_ = p;
  }
  return network_;
}
inline ::perfcat::Network* ProfileNtf::mutable_network() {
  // @@protoc_insertion_point(field_mutable:perfcat.ProfileNtf.network)
  return _internal_mutable_network();
}
inline void ProfileNtf::set_allocated_network(::perfcat::Network* network) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete network_;
  }
  if (network) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(network);
    if (message_arena != submessage_arena) {
      network = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network, submessage_arena);
    }
    
  } else {
    
  }
  network_ = network;
  // @@protoc_insertion_point(field_set_allocated:perfcat.ProfileNtf.network)
}

// .perfcat.Power power = 12;
inline bool ProfileNtf::_internal_has_power() const {
  return this != internal_default_instance() && power_ != nullptr;
}
inline bool ProfileNtf::has_power() const {
  return _internal_has_power();
}
inline void ProfileNtf::clear_power() {
  if (GetArena() == nullptr && power_ != nullptr) {
    delete power_;
  }
  power_ = nullptr;
}
inline const ::perfcat::Power& ProfileNtf::_internal_power() const {
  const ::perfcat::Power* p = power_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perfcat::Power*>(
      &::perfcat::_Power_default_instance_);
}
inline const ::perfcat::Power& ProfileNtf::power() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileNtf.power)
  return _internal_power();
}
inline void ProfileNtf::unsafe_arena_set_allocated_power(
    ::perfcat::Power* power) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(power_);
  }
  power_ = power;
  if (power) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.ProfileNtf.power)
}
inline ::perfcat::Power* ProfileNtf::release_power() {
  
  ::perfcat::Power* temp = power_;
  power_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perfcat::Power* ProfileNtf::unsafe_arena_release_power() {
  // @@protoc_insertion_point(field_release:perfcat.ProfileNtf.power)
  
  ::perfcat::Power* temp = power_;
  power_ = nullptr;
  return temp;
}
inline ::perfcat::Power* ProfileNtf::_internal_mutable_power() {
  
  if (power_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfcat::Power>(GetArena());
    power_ = p;
  }
  return power_;
}
inline ::perfcat::Power* ProfileNtf::mutable_power() {
  // @@protoc_insertion_point(field_mutable:perfcat.ProfileNtf.power)
  return _internal_mutable_power();
}
inline void ProfileNtf::set_allocated_power(::perfcat::Power* power) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete power_;
  }
  if (power) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(power);
    if (message_arena != submessage_arena) {
      power = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, power, submessage_arena);
    }
    
  } else {
    
  }
  power_ = power;
  // @@protoc_insertion_point(field_set_allocated:perfcat.ProfileNtf.power)
}

// int64 timestamp = 13;
inline void ProfileNtf::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProfileNtf::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProfileNtf::timestamp() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileNtf.timestamp)
  return _internal_timestamp();
}
inline void ProfileNtf::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void ProfileNtf::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:perfcat.ProfileNtf.timestamp)
}

// .perfcat.Temp temp = 14;
inline bool ProfileNtf::_internal_has_temp() const {
  return this != internal_default_instance() && temp_ != nullptr;
}
inline bool ProfileNtf::has_temp() const {
  return _internal_has_temp();
}
inline void ProfileNtf::clear_temp() {
  if (GetArena() == nullptr && temp_ != nullptr) {
    delete temp_;
  }
  temp_ = nullptr;
}
inline const ::perfcat::Temp& ProfileNtf::_internal_temp() const {
  const ::perfcat::Temp* p = temp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perfcat::Temp*>(
      &::perfcat::_Temp_default_instance_);
}
inline const ::perfcat::Temp& ProfileNtf::temp() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileNtf.temp)
  return _internal_temp();
}
inline void ProfileNtf::unsafe_arena_set_allocated_temp(
    ::perfcat::Temp* temp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp_);
  }
  temp_ = temp;
  if (temp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.ProfileNtf.temp)
}
inline ::perfcat::Temp* ProfileNtf::release_temp() {
  
  ::perfcat::Temp* temp = temp_;
  temp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perfcat::Temp* ProfileNtf::unsafe_arena_release_temp() {
  // @@protoc_insertion_point(field_release:perfcat.ProfileNtf.temp)
  
  ::perfcat::Temp* temp = temp_;
  temp_ = nullptr;
  return temp;
}
inline ::perfcat::Temp* ProfileNtf::_internal_mutable_temp() {
  
  if (temp_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfcat::Temp>(GetArena());
    temp_ = p;
  }
  return temp_;
}
inline ::perfcat::Temp* ProfileNtf::mutable_temp() {
  // @@protoc_insertion_point(field_mutable:perfcat.ProfileNtf.temp)
  return _internal_mutable_temp();
}
inline void ProfileNtf::set_allocated_temp(::perfcat::Temp* temp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete temp_;
  }
  if (temp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(temp);
    if (message_arena != submessage_arena) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, temp, submessage_arena);
    }
    
  } else {
    
  }
  temp_ = temp;
  // @@protoc_insertion_point(field_set_allocated:perfcat.ProfileNtf.temp)
}

// .perfcat.FrameTime frameTime = 15;
inline bool ProfileNtf::_internal_has_frametime() const {
  return this != internal_default_instance() && frametime_ != nullptr;
}
inline bool ProfileNtf::has_frametime() const {
  return _internal_has_frametime();
}
inline void ProfileNtf::clear_frametime() {
  if (GetArena() == nullptr && frametime_ != nullptr) {
    delete frametime_;
  }
  frametime_ = nullptr;
}
inline const ::perfcat::FrameTime& ProfileNtf::_internal_frametime() const {
  const ::perfcat::FrameTime* p = frametime_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perfcat::FrameTime*>(
      &::perfcat::_FrameTime_default_instance_);
}
inline const ::perfcat::FrameTime& ProfileNtf::frametime() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileNtf.frameTime)
  return _internal_frametime();
}
inline void ProfileNtf::unsafe_arena_set_allocated_frametime(
    ::perfcat::FrameTime* frametime) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frametime_);
  }
  frametime_ = frametime;
  if (frametime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.ProfileNtf.frameTime)
}
inline ::perfcat::FrameTime* ProfileNtf::release_frametime() {
  
  ::perfcat::FrameTime* temp = frametime_;
  frametime_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perfcat::FrameTime* ProfileNtf::unsafe_arena_release_frametime() {
  // @@protoc_insertion_point(field_release:perfcat.ProfileNtf.frameTime)
  
  ::perfcat::FrameTime* temp = frametime_;
  frametime_ = nullptr;
  return temp;
}
inline ::perfcat::FrameTime* ProfileNtf::_internal_mutable_frametime() {
  
  if (frametime_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfcat::FrameTime>(GetArena());
    frametime_ = p;
  }
  return frametime_;
}
inline ::perfcat::FrameTime* ProfileNtf::mutable_frametime() {
  // @@protoc_insertion_point(field_mutable:perfcat.ProfileNtf.frameTime)
  return _internal_mutable_frametime();
}
inline void ProfileNtf::set_allocated_frametime(::perfcat::FrameTime* frametime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete frametime_;
  }
  if (frametime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(frametime);
    if (message_arena != submessage_arena) {
      frametime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frametime, submessage_arena);
    }
    
  } else {
    
  }
  frametime_ = frametime;
  // @@protoc_insertion_point(field_set_allocated:perfcat.ProfileNtf.frameTime)
}

// .perfcat.CoreUsage coreUsage = 16;
inline bool ProfileNtf::_internal_has_coreusage() const {
  return this != internal_default_instance() && coreusage_ != nullptr;
}
inline bool ProfileNtf::has_coreusage() const {
  return _internal_has_coreusage();
}
inline void ProfileNtf::clear_coreusage() {
  if (GetArena() == nullptr && coreusage_ != nullptr) {
    delete coreusage_;
  }
  coreusage_ = nullptr;
}
inline const ::perfcat::CoreUsage& ProfileNtf::_internal_coreusage() const {
  const ::perfcat::CoreUsage* p = coreusage_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perfcat::CoreUsage*>(
      &::perfcat::_CoreUsage_default_instance_);
}
inline const ::perfcat::CoreUsage& ProfileNtf::coreusage() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileNtf.coreUsage)
  return _internal_coreusage();
}
inline void ProfileNtf::unsafe_arena_set_allocated_coreusage(
    ::perfcat::CoreUsage* coreusage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coreusage_);
  }
  coreusage_ = coreusage;
  if (coreusage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.ProfileNtf.coreUsage)
}
inline ::perfcat::CoreUsage* ProfileNtf::release_coreusage() {
  
  ::perfcat::CoreUsage* temp = coreusage_;
  coreusage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perfcat::CoreUsage* ProfileNtf::unsafe_arena_release_coreusage() {
  // @@protoc_insertion_point(field_release:perfcat.ProfileNtf.coreUsage)
  
  ::perfcat::CoreUsage* temp = coreusage_;
  coreusage_ = nullptr;
  return temp;
}
inline ::perfcat::CoreUsage* ProfileNtf::_internal_mutable_coreusage() {
  
  if (coreusage_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfcat::CoreUsage>(GetArena());
    coreusage_ = p;
  }
  return coreusage_;
}
inline ::perfcat::CoreUsage* ProfileNtf::mutable_coreusage() {
  // @@protoc_insertion_point(field_mutable:perfcat.ProfileNtf.coreUsage)
  return _internal_mutable_coreusage();
}
inline void ProfileNtf::set_allocated_coreusage(::perfcat::CoreUsage* coreusage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete coreusage_;
  }
  if (coreusage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(coreusage);
    if (message_arena != submessage_arena) {
      coreusage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coreusage, submessage_arena);
    }
    
  } else {
    
  }
  coreusage_ = coreusage;
  // @@protoc_insertion_point(field_set_allocated:perfcat.ProfileNtf.coreUsage)
}

// .perfcat.VirtualMemory virtualMemory = 17;
inline bool ProfileNtf::_internal_has_virtualmemory() const {
  return this != internal_default_instance() && virtualmemory_ != nullptr;
}
inline bool ProfileNtf::has_virtualmemory() const {
  return _internal_has_virtualmemory();
}
inline void ProfileNtf::clear_virtualmemory() {
  if (GetArena() == nullptr && virtualmemory_ != nullptr) {
    delete virtualmemory_;
  }
  virtualmemory_ = nullptr;
}
inline const ::perfcat::VirtualMemory& ProfileNtf::_internal_virtualmemory() const {
  const ::perfcat::VirtualMemory* p = virtualmemory_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perfcat::VirtualMemory*>(
      &::perfcat::_VirtualMemory_default_instance_);
}
inline const ::perfcat::VirtualMemory& ProfileNtf::virtualmemory() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileNtf.virtualMemory)
  return _internal_virtualmemory();
}
inline void ProfileNtf::unsafe_arena_set_allocated_virtualmemory(
    ::perfcat::VirtualMemory* virtualmemory) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(virtualmemory_);
  }
  virtualmemory_ = virtualmemory;
  if (virtualmemory) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.ProfileNtf.virtualMemory)
}
inline ::perfcat::VirtualMemory* ProfileNtf::release_virtualmemory() {
  
  ::perfcat::VirtualMemory* temp = virtualmemory_;
  virtualmemory_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perfcat::VirtualMemory* ProfileNtf::unsafe_arena_release_virtualmemory() {
  // @@protoc_insertion_point(field_release:perfcat.ProfileNtf.virtualMemory)
  
  ::perfcat::VirtualMemory* temp = virtualmemory_;
  virtualmemory_ = nullptr;
  return temp;
}
inline ::perfcat::VirtualMemory* ProfileNtf::_internal_mutable_virtualmemory() {
  
  if (virtualmemory_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfcat::VirtualMemory>(GetArena());
    virtualmemory_ = p;
  }
  return virtualmemory_;
}
inline ::perfcat::VirtualMemory* ProfileNtf::mutable_virtualmemory() {
  // @@protoc_insertion_point(field_mutable:perfcat.ProfileNtf.virtualMemory)
  return _internal_mutable_virtualmemory();
}
inline void ProfileNtf::set_allocated_virtualmemory(::perfcat::VirtualMemory* virtualmemory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete virtualmemory_;
  }
  if (virtualmemory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(virtualmemory);
    if (message_arena != submessage_arena) {
      virtualmemory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, virtualmemory, submessage_arena);
    }
    
  } else {
    
  }
  virtualmemory_ = virtualmemory;
  // @@protoc_insertion_point(field_set_allocated:perfcat.ProfileNtf.virtualMemory)
}

// -------------------------------------------------------------------

// Screenshot

// bytes data = 1;
inline void Screenshot::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Screenshot::data() const {
  // @@protoc_insertion_point(field_get:perfcat.Screenshot.data)
  return _internal_data();
}
inline void Screenshot::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:perfcat.Screenshot.data)
}
inline std::string* Screenshot::mutable_data() {
  // @@protoc_insertion_point(field_mutable:perfcat.Screenshot.data)
  return _internal_mutable_data();
}
inline const std::string& Screenshot::_internal_data() const {
  return data_.Get();
}
inline void Screenshot::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Screenshot::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:perfcat.Screenshot.data)
}
inline void Screenshot::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:perfcat.Screenshot.data)
}
inline void Screenshot::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:perfcat.Screenshot.data)
}
inline std::string* Screenshot::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Screenshot::release_data() {
  // @@protoc_insertion_point(field_release:perfcat.Screenshot.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Screenshot::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:perfcat.Screenshot.data)
}

// .perfcat.Screenshot.Orientation orientation = 3;
inline void Screenshot::clear_orientation() {
  orientation_ = 0;
}
inline ::perfcat::Screenshot_Orientation Screenshot::_internal_orientation() const {
  return static_cast< ::perfcat::Screenshot_Orientation >(orientation_);
}
inline ::perfcat::Screenshot_Orientation Screenshot::orientation() const {
  // @@protoc_insertion_point(field_get:perfcat.Screenshot.orientation)
  return _internal_orientation();
}
inline void Screenshot::_internal_set_orientation(::perfcat::Screenshot_Orientation value) {
  
  orientation_ = value;
}
inline void Screenshot::set_orientation(::perfcat::Screenshot_Orientation value) {
  _internal_set_orientation(value);
  // @@protoc_insertion_point(field_set:perfcat.Screenshot.orientation)
}

// -------------------------------------------------------------------

// VirtualMemory

// int32 virtualMemory = 1;
inline void VirtualMemory::clear_virtualmemory() {
  virtualmemory_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VirtualMemory::_internal_virtualmemory() const {
  return virtualmemory_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VirtualMemory::virtualmemory() const {
  // @@protoc_insertion_point(field_get:perfcat.VirtualMemory.virtualMemory)
  return _internal_virtualmemory();
}
inline void VirtualMemory::_internal_set_virtualmemory(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  virtualmemory_ = value;
}
inline void VirtualMemory::set_virtualmemory(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_virtualmemory(value);
  // @@protoc_insertion_point(field_set:perfcat.VirtualMemory.virtualMemory)
}

// -------------------------------------------------------------------

// Power

// int32 current = 1;
inline void Power::clear_current() {
  current_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Power::_internal_current() const {
  return current_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Power::current() const {
  // @@protoc_insertion_point(field_get:perfcat.Power.current)
  return _internal_current();
}
inline void Power::_internal_set_current(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  current_ = value;
}
inline void Power::set_current(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_current(value);
  // @@protoc_insertion_point(field_set:perfcat.Power.current)
}

// int32 voltage = 2;
inline void Power::clear_voltage() {
  voltage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Power::_internal_voltage() const {
  return voltage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Power::voltage() const {
  // @@protoc_insertion_point(field_get:perfcat.Power.voltage)
  return _internal_voltage();
}
inline void Power::_internal_set_voltage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  voltage_ = value;
}
inline void Power::set_voltage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_voltage(value);
  // @@protoc_insertion_point(field_set:perfcat.Power.voltage)
}

// -------------------------------------------------------------------

// Temp

// int32 temp = 1;
inline void Temp::clear_temp() {
  temp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Temp::_internal_temp() const {
  return temp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Temp::temp() const {
  // @@protoc_insertion_point(field_get:perfcat.Temp.temp)
  return _internal_temp();
}
inline void Temp::_internal_set_temp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  temp_ = value;
}
inline void Temp::set_temp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_temp(value);
  // @@protoc_insertion_point(field_set:perfcat.Temp.temp)
}

// -------------------------------------------------------------------

// CpuUsage

// float appUsage = 1;
inline void CpuUsage::clear_appusage() {
  appusage_ = 0;
}
inline float CpuUsage::_internal_appusage() const {
  return appusage_;
}
inline float CpuUsage::appusage() const {
  // @@protoc_insertion_point(field_get:perfcat.CpuUsage.appUsage)
  return _internal_appusage();
}
inline void CpuUsage::_internal_set_appusage(float value) {
  
  appusage_ = value;
}
inline void CpuUsage::set_appusage(float value) {
  _internal_set_appusage(value);
  // @@protoc_insertion_point(field_set:perfcat.CpuUsage.appUsage)
}

// float totalUsage = 2;
inline void CpuUsage::clear_totalusage() {
  totalusage_ = 0;
}
inline float CpuUsage::_internal_totalusage() const {
  return totalusage_;
}
inline float CpuUsage::totalusage() const {
  // @@protoc_insertion_point(field_get:perfcat.CpuUsage.totalUsage)
  return _internal_totalusage();
}
inline void CpuUsage::_internal_set_totalusage(float value) {
  
  totalusage_ = value;
}
inline void CpuUsage::set_totalusage(float value) {
  _internal_set_totalusage(value);
  // @@protoc_insertion_point(field_set:perfcat.CpuUsage.totalUsage)
}

// -------------------------------------------------------------------

// FPS

// float fps = 1;
inline void FPS::clear_fps() {
  fps_ = 0;
}
inline float FPS::_internal_fps() const {
  return fps_;
}
inline float FPS::fps() const {
  // @@protoc_insertion_point(field_get:perfcat.FPS.fps)
  return _internal_fps();
}
inline void FPS::_internal_set_fps(float value) {
  
  fps_ = value;
}
inline void FPS::set_fps(float value) {
  _internal_set_fps(value);
  // @@protoc_insertion_point(field_set:perfcat.FPS.fps)
}

// int32 jank = 3;
inline void FPS::clear_jank() {
  jank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FPS::_internal_jank() const {
  return jank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FPS::jank() const {
  // @@protoc_insertion_point(field_get:perfcat.FPS.jank)
  return _internal_jank();
}
inline void FPS::_internal_set_jank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  jank_ = value;
}
inline void FPS::set_jank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_jank(value);
  // @@protoc_insertion_point(field_set:perfcat.FPS.jank)
}

// int32 bigJank = 4;
inline void FPS::clear_bigjank() {
  bigjank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FPS::_internal_bigjank() const {
  return bigjank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FPS::bigjank() const {
  // @@protoc_insertion_point(field_get:perfcat.FPS.bigJank)
  return _internal_bigjank();
}
inline void FPS::_internal_set_bigjank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bigjank_ = value;
}
inline void FPS::set_bigjank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bigjank(value);
  // @@protoc_insertion_point(field_set:perfcat.FPS.bigJank)
}

// -------------------------------------------------------------------

// CoreUsage

// repeated float coreUsage = 1;
inline int CoreUsage::_internal_coreusage_size() const {
  return coreusage_.size();
}
inline int CoreUsage::coreusage_size() const {
  return _internal_coreusage_size();
}
inline void CoreUsage::clear_coreusage() {
  coreusage_.Clear();
}
inline float CoreUsage::_internal_coreusage(int index) const {
  return coreusage_.Get(index);
}
inline float CoreUsage::coreusage(int index) const {
  // @@protoc_insertion_point(field_get:perfcat.CoreUsage.coreUsage)
  return _internal_coreusage(index);
}
inline void CoreUsage::set_coreusage(int index, float value) {
  coreusage_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfcat.CoreUsage.coreUsage)
}
inline void CoreUsage::_internal_add_coreusage(float value) {
  coreusage_.Add(value);
}
inline void CoreUsage::add_coreusage(float value) {
  _internal_add_coreusage(value);
  // @@protoc_insertion_point(field_add:perfcat.CoreUsage.coreUsage)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CoreUsage::_internal_coreusage() const {
  return coreusage_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CoreUsage::coreusage() const {
  // @@protoc_insertion_point(field_list:perfcat.CoreUsage.coreUsage)
  return _internal_coreusage();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CoreUsage::_internal_mutable_coreusage() {
  return &coreusage_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CoreUsage::mutable_coreusage() {
  // @@protoc_insertion_point(field_mutable_list:perfcat.CoreUsage.coreUsage)
  return _internal_mutable_coreusage();
}

// -------------------------------------------------------------------

// FrameTime

// repeated int64 frameTime = 1;
inline int FrameTime::_internal_frametime_size() const {
  return frametime_.size();
}
inline int FrameTime::frametime_size() const {
  return _internal_frametime_size();
}
inline void FrameTime::clear_frametime() {
  frametime_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameTime::_internal_frametime(int index) const {
  return frametime_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameTime::frametime(int index) const {
  // @@protoc_insertion_point(field_get:perfcat.FrameTime.frameTime)
  return _internal_frametime(index);
}
inline void FrameTime::set_frametime(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  frametime_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfcat.FrameTime.frameTime)
}
inline void FrameTime::_internal_add_frametime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  frametime_.Add(value);
}
inline void FrameTime::add_frametime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_frametime(value);
  // @@protoc_insertion_point(field_add:perfcat.FrameTime.frameTime)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
FrameTime::_internal_frametime() const {
  return frametime_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
FrameTime::frametime() const {
  // @@protoc_insertion_point(field_list:perfcat.FrameTime.frameTime)
  return _internal_frametime();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
FrameTime::_internal_mutable_frametime() {
  return &frametime_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
FrameTime::mutable_frametime() {
  // @@protoc_insertion_point(field_mutable_list:perfcat.FrameTime.frameTime)
  return _internal_mutable_frametime();
}

// -------------------------------------------------------------------

// Network

// int32 upload = 1;
inline void Network::clear_upload() {
  upload_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Network::_internal_upload() const {
  return upload_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Network::upload() const {
  // @@protoc_insertion_point(field_get:perfcat.Network.upload)
  return _internal_upload();
}
inline void Network::_internal_set_upload(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  upload_ = value;
}
inline void Network::set_upload(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_upload(value);
  // @@protoc_insertion_point(field_set:perfcat.Network.upload)
}

// int32 download = 2;
inline void Network::clear_download() {
  download_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Network::_internal_download() const {
  return download_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Network::download() const {
  // @@protoc_insertion_point(field_get:perfcat.Network.download)
  return _internal_download();
}
inline void Network::_internal_set_download(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  download_ = value;
}
inline void Network::set_download(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_download(value);
  // @@protoc_insertion_point(field_set:perfcat.Network.download)
}

// -------------------------------------------------------------------

// Memory

// int32 pss = 1;
inline void Memory::clear_pss() {
  pss_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Memory::_internal_pss() const {
  return pss_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Memory::pss() const {
  // @@protoc_insertion_point(field_get:perfcat.Memory.pss)
  return _internal_pss();
}
inline void Memory::_internal_set_pss(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pss_ = value;
}
inline void Memory::set_pss(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pss(value);
  // @@protoc_insertion_point(field_set:perfcat.Memory.pss)
}

// int32 swap = 2;
inline void Memory::clear_swap() {
  swap_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Memory::_internal_swap() const {
  return swap_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Memory::swap() const {
  // @@protoc_insertion_point(field_get:perfcat.Memory.swap)
  return _internal_swap();
}
inline void Memory::_internal_set_swap(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  swap_ = value;
}
inline void Memory::set_swap(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_swap(value);
  // @@protoc_insertion_point(field_set:perfcat.Memory.swap)
}

// int32 virtualMemory = 3;
inline void Memory::clear_virtualmemory() {
  virtualmemory_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Memory::_internal_virtualmemory() const {
  return virtualmemory_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Memory::virtualmemory() const {
  // @@protoc_insertion_point(field_get:perfcat.Memory.virtualMemory)
  return _internal_virtualmemory();
}
inline void Memory::_internal_set_virtualmemory(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  virtualmemory_ = value;
}
inline void Memory::set_virtualmemory(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_virtualmemory(value);
  // @@protoc_insertion_point(field_set:perfcat.Memory.virtualMemory)
}

// .perfcat.MemoryDetail memoryDetail = 5;
inline bool Memory::_internal_has_memorydetail() const {
  return this != internal_default_instance() && memorydetail_ != nullptr;
}
inline bool Memory::has_memorydetail() const {
  return _internal_has_memorydetail();
}
inline void Memory::clear_memorydetail() {
  if (GetArena() == nullptr && memorydetail_ != nullptr) {
    delete memorydetail_;
  }
  memorydetail_ = nullptr;
}
inline const ::perfcat::MemoryDetail& Memory::_internal_memorydetail() const {
  const ::perfcat::MemoryDetail* p = memorydetail_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perfcat::MemoryDetail*>(
      &::perfcat::_MemoryDetail_default_instance_);
}
inline const ::perfcat::MemoryDetail& Memory::memorydetail() const {
  // @@protoc_insertion_point(field_get:perfcat.Memory.memoryDetail)
  return _internal_memorydetail();
}
inline void Memory::unsafe_arena_set_allocated_memorydetail(
    ::perfcat::MemoryDetail* memorydetail) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(memorydetail_);
  }
  memorydetail_ = memorydetail;
  if (memorydetail) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.Memory.memoryDetail)
}
inline ::perfcat::MemoryDetail* Memory::release_memorydetail() {
  
  ::perfcat::MemoryDetail* temp = memorydetail_;
  memorydetail_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perfcat::MemoryDetail* Memory::unsafe_arena_release_memorydetail() {
  // @@protoc_insertion_point(field_release:perfcat.Memory.memoryDetail)
  
  ::perfcat::MemoryDetail* temp = memorydetail_;
  memorydetail_ = nullptr;
  return temp;
}
inline ::perfcat::MemoryDetail* Memory::_internal_mutable_memorydetail() {
  
  if (memorydetail_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfcat::MemoryDetail>(GetArena());
    memorydetail_ = p;
  }
  return memorydetail_;
}
inline ::perfcat::MemoryDetail* Memory::mutable_memorydetail() {
  // @@protoc_insertion_point(field_mutable:perfcat.Memory.memoryDetail)
  return _internal_mutable_memorydetail();
}
inline void Memory::set_allocated_memorydetail(::perfcat::MemoryDetail* memorydetail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete memorydetail_;
  }
  if (memorydetail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(memorydetail);
    if (message_arena != submessage_arena) {
      memorydetail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memorydetail, submessage_arena);
    }
    
  } else {
    
  }
  memorydetail_ = memorydetail;
  // @@protoc_insertion_point(field_set_allocated:perfcat.Memory.memoryDetail)
}

// -------------------------------------------------------------------

// MemoryDetail

// int32 gfx = 1;
inline void MemoryDetail::clear_gfx() {
  gfx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemoryDetail::_internal_gfx() const {
  return gfx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemoryDetail::gfx() const {
  // @@protoc_insertion_point(field_get:perfcat.MemoryDetail.gfx)
  return _internal_gfx();
}
inline void MemoryDetail::_internal_set_gfx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gfx_ = value;
}
inline void MemoryDetail::set_gfx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gfx(value);
  // @@protoc_insertion_point(field_set:perfcat.MemoryDetail.gfx)
}

// int32 gl = 2;
inline void MemoryDetail::clear_gl() {
  gl_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemoryDetail::_internal_gl() const {
  return gl_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemoryDetail::gl() const {
  // @@protoc_insertion_point(field_get:perfcat.MemoryDetail.gl)
  return _internal_gl();
}
inline void MemoryDetail::_internal_set_gl(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gl_ = value;
}
inline void MemoryDetail::set_gl(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gl(value);
  // @@protoc_insertion_point(field_set:perfcat.MemoryDetail.gl)
}

// int32 nativePss = 3;
inline void MemoryDetail::clear_nativepss() {
  nativepss_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemoryDetail::_internal_nativepss() const {
  return nativepss_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemoryDetail::nativepss() const {
  // @@protoc_insertion_point(field_get:perfcat.MemoryDetail.nativePss)
  return _internal_nativepss();
}
inline void MemoryDetail::_internal_set_nativepss(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nativepss_ = value;
}
inline void MemoryDetail::set_nativepss(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nativepss(value);
  // @@protoc_insertion_point(field_set:perfcat.MemoryDetail.nativePss)
}

// int32 unknown = 4;
inline void MemoryDetail::clear_unknown() {
  unknown_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemoryDetail::_internal_unknown() const {
  return unknown_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MemoryDetail::unknown() const {
  // @@protoc_insertion_point(field_get:perfcat.MemoryDetail.unknown)
  return _internal_unknown();
}
inline void MemoryDetail::_internal_set_unknown(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  unknown_ = value;
}
inline void MemoryDetail::set_unknown(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_unknown(value);
  // @@protoc_insertion_point(field_set:perfcat.MemoryDetail.unknown)
}

// -------------------------------------------------------------------

// GpuFreq

// int32 gpuFreq = 1;
inline void GpuFreq::clear_gpufreq() {
  gpufreq_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpuFreq::_internal_gpufreq() const {
  return gpufreq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpuFreq::gpufreq() const {
  // @@protoc_insertion_point(field_get:perfcat.GpuFreq.gpuFreq)
  return _internal_gpufreq();
}
inline void GpuFreq::_internal_set_gpufreq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gpufreq_ = value;
}
inline void GpuFreq::set_gpufreq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gpufreq(value);
  // @@protoc_insertion_point(field_set:perfcat.GpuFreq.gpuFreq)
}

// -------------------------------------------------------------------

// GpuUsage

// float gpuUsage = 1;
inline void GpuUsage::clear_gpuusage() {
  gpuusage_ = 0;
}
inline float GpuUsage::_internal_gpuusage() const {
  return gpuusage_;
}
inline float GpuUsage::gpuusage() const {
  // @@protoc_insertion_point(field_get:perfcat.GpuUsage.gpuUsage)
  return _internal_gpuusage();
}
inline void GpuUsage::_internal_set_gpuusage(float value) {
  
  gpuusage_ = value;
}
inline void GpuUsage::set_gpuusage(float value) {
  _internal_set_gpuusage(value);
  // @@protoc_insertion_point(field_set:perfcat.GpuUsage.gpuUsage)
}

// -------------------------------------------------------------------

// CpuFreq

// repeated int32 cpuFreq = 1;
inline int CpuFreq::_internal_cpufreq_size() const {
  return cpufreq_.size();
}
inline int CpuFreq::cpufreq_size() const {
  return _internal_cpufreq_size();
}
inline void CpuFreq::clear_cpufreq() {
  cpufreq_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CpuFreq::_internal_cpufreq(int index) const {
  return cpufreq_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CpuFreq::cpufreq(int index) const {
  // @@protoc_insertion_point(field_get:perfcat.CpuFreq.cpuFreq)
  return _internal_cpufreq(index);
}
inline void CpuFreq::set_cpufreq(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  cpufreq_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfcat.CpuFreq.cpuFreq)
}
inline void CpuFreq::_internal_add_cpufreq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  cpufreq_.Add(value);
}
inline void CpuFreq::add_cpufreq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_cpufreq(value);
  // @@protoc_insertion_point(field_add:perfcat.CpuFreq.cpuFreq)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CpuFreq::_internal_cpufreq() const {
  return cpufreq_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CpuFreq::cpufreq() const {
  // @@protoc_insertion_point(field_list:perfcat.CpuFreq.cpuFreq)
  return _internal_cpufreq();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CpuFreq::_internal_mutable_cpufreq() {
  return &cpufreq_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CpuFreq::mutable_cpufreq() {
  // @@protoc_insertion_point(field_mutable_list:perfcat.CpuFreq.cpuFreq)
  return _internal_mutable_cpufreq();
}

// -------------------------------------------------------------------

// GetCpuMaxFreqReq

// -------------------------------------------------------------------

// GetCpuMaxFreqRsp

// repeated int32 minFreq = 1;
inline int GetCpuMaxFreqRsp::_internal_minfreq_size() const {
  return minfreq_.size();
}
inline int GetCpuMaxFreqRsp::minfreq_size() const {
  return _internal_minfreq_size();
}
inline void GetCpuMaxFreqRsp::clear_minfreq() {
  minfreq_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetCpuMaxFreqRsp::_internal_minfreq(int index) const {
  return minfreq_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetCpuMaxFreqRsp::minfreq(int index) const {
  // @@protoc_insertion_point(field_get:perfcat.GetCpuMaxFreqRsp.minFreq)
  return _internal_minfreq(index);
}
inline void GetCpuMaxFreqRsp::set_minfreq(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  minfreq_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfcat.GetCpuMaxFreqRsp.minFreq)
}
inline void GetCpuMaxFreqRsp::_internal_add_minfreq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  minfreq_.Add(value);
}
inline void GetCpuMaxFreqRsp::add_minfreq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_minfreq(value);
  // @@protoc_insertion_point(field_add:perfcat.GetCpuMaxFreqRsp.minFreq)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GetCpuMaxFreqRsp::_internal_minfreq() const {
  return minfreq_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GetCpuMaxFreqRsp::minfreq() const {
  // @@protoc_insertion_point(field_list:perfcat.GetCpuMaxFreqRsp.minFreq)
  return _internal_minfreq();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GetCpuMaxFreqRsp::_internal_mutable_minfreq() {
  return &minfreq_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GetCpuMaxFreqRsp::mutable_minfreq() {
  // @@protoc_insertion_point(field_mutable_list:perfcat.GetCpuMaxFreqRsp.minFreq)
  return _internal_mutable_minfreq();
}

// repeated int32 maxFreq = 2;
inline int GetCpuMaxFreqRsp::_internal_maxfreq_size() const {
  return maxfreq_.size();
}
inline int GetCpuMaxFreqRsp::maxfreq_size() const {
  return _internal_maxfreq_size();
}
inline void GetCpuMaxFreqRsp::clear_maxfreq() {
  maxfreq_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetCpuMaxFreqRsp::_internal_maxfreq(int index) const {
  return maxfreq_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetCpuMaxFreqRsp::maxfreq(int index) const {
  // @@protoc_insertion_point(field_get:perfcat.GetCpuMaxFreqRsp.maxFreq)
  return _internal_maxfreq(index);
}
inline void GetCpuMaxFreqRsp::set_maxfreq(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  maxfreq_.Set(index, value);
  // @@protoc_insertion_point(field_set:perfcat.GetCpuMaxFreqRsp.maxFreq)
}
inline void GetCpuMaxFreqRsp::_internal_add_maxfreq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  maxfreq_.Add(value);
}
inline void GetCpuMaxFreqRsp::add_maxfreq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_maxfreq(value);
  // @@protoc_insertion_point(field_add:perfcat.GetCpuMaxFreqRsp.maxFreq)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GetCpuMaxFreqRsp::_internal_maxfreq() const {
  return maxfreq_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GetCpuMaxFreqRsp::maxfreq() const {
  // @@protoc_insertion_point(field_list:perfcat.GetCpuMaxFreqRsp.maxFreq)
  return _internal_maxfreq();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GetCpuMaxFreqRsp::_internal_mutable_maxfreq() {
  return &maxfreq_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GetCpuMaxFreqRsp::mutable_maxfreq() {
  // @@protoc_insertion_point(field_mutable_list:perfcat.GetCpuMaxFreqRsp.maxFreq)
  return _internal_mutable_maxfreq();
}

// -------------------------------------------------------------------

// ToggleInterestingFiledNTF

// int32 dataType = 1;
inline void ToggleInterestingFiledNTF::clear_datatype() {
  datatype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ToggleInterestingFiledNTF::_internal_datatype() const {
  return datatype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ToggleInterestingFiledNTF::datatype() const {
  // @@protoc_insertion_point(field_get:perfcat.ToggleInterestingFiledNTF.dataType)
  return _internal_datatype();
}
inline void ToggleInterestingFiledNTF::_internal_set_datatype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  datatype_ = value;
}
inline void ToggleInterestingFiledNTF::set_datatype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_datatype(value);
  // @@protoc_insertion_point(field_set:perfcat.ToggleInterestingFiledNTF.dataType)
}

// -------------------------------------------------------------------

// ProfileStartedNTF

// -------------------------------------------------------------------

// ProfileStoppedNTF

// -------------------------------------------------------------------

// ProcessNotFoundNTF

// -------------------------------------------------------------------

// ProcessFoundNTF

// -------------------------------------------------------------------

// GetBatteryInfoReq

// -------------------------------------------------------------------

// GetBatteryInfoRsp

// .perfcat.Power power = 1;
inline bool GetBatteryInfoRsp::_internal_has_power() const {
  return this != internal_default_instance() && power_ != nullptr;
}
inline bool GetBatteryInfoRsp::has_power() const {
  return _internal_has_power();
}
inline void GetBatteryInfoRsp::clear_power() {
  if (GetArena() == nullptr && power_ != nullptr) {
    delete power_;
  }
  power_ = nullptr;
}
inline const ::perfcat::Power& GetBatteryInfoRsp::_internal_power() const {
  const ::perfcat::Power* p = power_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perfcat::Power*>(
      &::perfcat::_Power_default_instance_);
}
inline const ::perfcat::Power& GetBatteryInfoRsp::power() const {
  // @@protoc_insertion_point(field_get:perfcat.GetBatteryInfoRsp.power)
  return _internal_power();
}
inline void GetBatteryInfoRsp::unsafe_arena_set_allocated_power(
    ::perfcat::Power* power) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(power_);
  }
  power_ = power;
  if (power) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.GetBatteryInfoRsp.power)
}
inline ::perfcat::Power* GetBatteryInfoRsp::release_power() {
  
  ::perfcat::Power* temp = power_;
  power_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perfcat::Power* GetBatteryInfoRsp::unsafe_arena_release_power() {
  // @@protoc_insertion_point(field_release:perfcat.GetBatteryInfoRsp.power)
  
  ::perfcat::Power* temp = power_;
  power_ = nullptr;
  return temp;
}
inline ::perfcat::Power* GetBatteryInfoRsp::_internal_mutable_power() {
  
  if (power_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfcat::Power>(GetArena());
    power_ = p;
  }
  return power_;
}
inline ::perfcat::Power* GetBatteryInfoRsp::mutable_power() {
  // @@protoc_insertion_point(field_mutable:perfcat.GetBatteryInfoRsp.power)
  return _internal_mutable_power();
}
inline void GetBatteryInfoRsp::set_allocated_power(::perfcat::Power* power) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete power_;
  }
  if (power) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(power);
    if (message_arena != submessage_arena) {
      power = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, power, submessage_arena);
    }
    
  } else {
    
  }
  power_ = power;
  // @@protoc_insertion_point(field_set_allocated:perfcat.GetBatteryInfoRsp.power)
}

// -------------------------------------------------------------------

// AppClosedNTF

// -------------------------------------------------------------------

// ProfileNTFACK

// int32 index = 1;
inline void ProfileNTFACK::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfileNTFACK::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfileNTFACK::index() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileNTFACK.index)
  return _internal_index();
}
inline void ProfileNTFACK::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void ProfileNTFACK::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:perfcat.ProfileNTFACK.index)
}

// -------------------------------------------------------------------

// PrepareWifiProfileNTF

// -------------------------------------------------------------------

// GetAppInfoReq

// -------------------------------------------------------------------

// GetAppInfoRsp

// repeated .perfcat.AppInfo appInfo = 1;
inline int GetAppInfoRsp::_internal_appinfo_size() const {
  return appinfo_.size();
}
inline int GetAppInfoRsp::appinfo_size() const {
  return _internal_appinfo_size();
}
inline void GetAppInfoRsp::clear_appinfo() {
  appinfo_.Clear();
}
inline ::perfcat::AppInfo* GetAppInfoRsp::mutable_appinfo(int index) {
  // @@protoc_insertion_point(field_mutable:perfcat.GetAppInfoRsp.appInfo)
  return appinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfcat::AppInfo >*
GetAppInfoRsp::mutable_appinfo() {
  // @@protoc_insertion_point(field_mutable_list:perfcat.GetAppInfoRsp.appInfo)
  return &appinfo_;
}
inline const ::perfcat::AppInfo& GetAppInfoRsp::_internal_appinfo(int index) const {
  return appinfo_.Get(index);
}
inline const ::perfcat::AppInfo& GetAppInfoRsp::appinfo(int index) const {
  // @@protoc_insertion_point(field_get:perfcat.GetAppInfoRsp.appInfo)
  return _internal_appinfo(index);
}
inline ::perfcat::AppInfo* GetAppInfoRsp::_internal_add_appinfo() {
  return appinfo_.Add();
}
inline ::perfcat::AppInfo* GetAppInfoRsp::add_appinfo() {
  // @@protoc_insertion_point(field_add:perfcat.GetAppInfoRsp.appInfo)
  return _internal_add_appinfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfcat::AppInfo >&
GetAppInfoRsp::appinfo() const {
  // @@protoc_insertion_point(field_list:perfcat.GetAppInfoRsp.appInfo)
  return appinfo_;
}

// -------------------------------------------------------------------

// AppInfo

// string packageName = 1;
inline void AppInfo::clear_packagename() {
  packagename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AppInfo::packagename() const {
  // @@protoc_insertion_point(field_get:perfcat.AppInfo.packageName)
  return _internal_packagename();
}
inline void AppInfo::set_packagename(const std::string& value) {
  _internal_set_packagename(value);
  // @@protoc_insertion_point(field_set:perfcat.AppInfo.packageName)
}
inline std::string* AppInfo::mutable_packagename() {
  // @@protoc_insertion_point(field_mutable:perfcat.AppInfo.packageName)
  return _internal_mutable_packagename();
}
inline const std::string& AppInfo::_internal_packagename() const {
  return packagename_.Get();
}
inline void AppInfo::_internal_set_packagename(const std::string& value) {
  
  packagename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppInfo::set_packagename(std::string&& value) {
  
  packagename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:perfcat.AppInfo.packageName)
}
inline void AppInfo::set_packagename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  packagename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:perfcat.AppInfo.packageName)
}
inline void AppInfo::set_packagename(const char* value,
    size_t size) {
  
  packagename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:perfcat.AppInfo.packageName)
}
inline std::string* AppInfo::_internal_mutable_packagename() {
  
  return packagename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppInfo::release_packagename() {
  // @@protoc_insertion_point(field_release:perfcat.AppInfo.packageName)
  return packagename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppInfo::set_allocated_packagename(std::string* packagename) {
  if (packagename != nullptr) {
    
  } else {
    
  }
  packagename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), packagename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:perfcat.AppInfo.packageName)
}

// string version = 2;
inline void AppInfo::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AppInfo::version() const {
  // @@protoc_insertion_point(field_get:perfcat.AppInfo.version)
  return _internal_version();
}
inline void AppInfo::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:perfcat.AppInfo.version)
}
inline std::string* AppInfo::mutable_version() {
  // @@protoc_insertion_point(field_mutable:perfcat.AppInfo.version)
  return _internal_mutable_version();
}
inline const std::string& AppInfo::_internal_version() const {
  return version_.Get();
}
inline void AppInfo::_internal_set_version(const std::string& value) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppInfo::set_version(std::string&& value) {
  
  version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:perfcat.AppInfo.version)
}
inline void AppInfo::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:perfcat.AppInfo.version)
}
inline void AppInfo::set_version(const char* value,
    size_t size) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:perfcat.AppInfo.version)
}
inline std::string* AppInfo::_internal_mutable_version() {
  
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppInfo::release_version() {
  // @@protoc_insertion_point(field_release:perfcat.AppInfo.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppInfo::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:perfcat.AppInfo.version)
}

// bytes icon = 3;
inline void AppInfo::clear_icon() {
  icon_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AppInfo::icon() const {
  // @@protoc_insertion_point(field_get:perfcat.AppInfo.icon)
  return _internal_icon();
}
inline void AppInfo::set_icon(const std::string& value) {
  _internal_set_icon(value);
  // @@protoc_insertion_point(field_set:perfcat.AppInfo.icon)
}
inline std::string* AppInfo::mutable_icon() {
  // @@protoc_insertion_point(field_mutable:perfcat.AppInfo.icon)
  return _internal_mutable_icon();
}
inline const std::string& AppInfo::_internal_icon() const {
  return icon_.Get();
}
inline void AppInfo::_internal_set_icon(const std::string& value) {
  
  icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppInfo::set_icon(std::string&& value) {
  
  icon_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:perfcat.AppInfo.icon)
}
inline void AppInfo::set_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:perfcat.AppInfo.icon)
}
inline void AppInfo::set_icon(const void* value,
    size_t size) {
  
  icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:perfcat.AppInfo.icon)
}
inline std::string* AppInfo::_internal_mutable_icon() {
  
  return icon_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppInfo::release_icon() {
  // @@protoc_insertion_point(field_release:perfcat.AppInfo.icon)
  return icon_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppInfo::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    
  } else {
    
  }
  icon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:perfcat.AppInfo.icon)
}

// string label = 4;
inline void AppInfo::clear_label() {
  label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AppInfo::label() const {
  // @@protoc_insertion_point(field_get:perfcat.AppInfo.label)
  return _internal_label();
}
inline void AppInfo::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:perfcat.AppInfo.label)
}
inline std::string* AppInfo::mutable_label() {
  // @@protoc_insertion_point(field_mutable:perfcat.AppInfo.label)
  return _internal_mutable_label();
}
inline const std::string& AppInfo::_internal_label() const {
  return label_.Get();
}
inline void AppInfo::_internal_set_label(const std::string& value) {
  
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppInfo::set_label(std::string&& value) {
  
  label_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:perfcat.AppInfo.label)
}
inline void AppInfo::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:perfcat.AppInfo.label)
}
inline void AppInfo::set_label(const char* value,
    size_t size) {
  
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:perfcat.AppInfo.label)
}
inline std::string* AppInfo::_internal_mutable_label() {
  
  return label_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppInfo::release_label() {
  // @@protoc_insertion_point(field_release:perfcat.AppInfo.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppInfo::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:perfcat.AppInfo.label)
}

// int32 pid = 5;
inline void AppInfo::clear_pid() {
  pid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppInfo::_internal_pid() const {
  return pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppInfo::pid() const {
  // @@protoc_insertion_point(field_get:perfcat.AppInfo.pid)
  return _internal_pid();
}
inline void AppInfo::_internal_set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pid_ = value;
}
inline void AppInfo::set_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:perfcat.AppInfo.pid)
}

// repeated string processList = 6;
inline int AppInfo::_internal_processlist_size() const {
  return processlist_.size();
}
inline int AppInfo::processlist_size() const {
  return _internal_processlist_size();
}
inline void AppInfo::clear_processlist() {
  processlist_.Clear();
}
inline std::string* AppInfo::add_processlist() {
  // @@protoc_insertion_point(field_add_mutable:perfcat.AppInfo.processList)
  return _internal_add_processlist();
}
inline const std::string& AppInfo::_internal_processlist(int index) const {
  return processlist_.Get(index);
}
inline const std::string& AppInfo::processlist(int index) const {
  // @@protoc_insertion_point(field_get:perfcat.AppInfo.processList)
  return _internal_processlist(index);
}
inline std::string* AppInfo::mutable_processlist(int index) {
  // @@protoc_insertion_point(field_mutable:perfcat.AppInfo.processList)
  return processlist_.Mutable(index);
}
inline void AppInfo::set_processlist(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:perfcat.AppInfo.processList)
  processlist_.Mutable(index)->assign(value);
}
inline void AppInfo::set_processlist(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:perfcat.AppInfo.processList)
  processlist_.Mutable(index)->assign(std::move(value));
}
inline void AppInfo::set_processlist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  processlist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perfcat.AppInfo.processList)
}
inline void AppInfo::set_processlist(int index, const char* value, size_t size) {
  processlist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perfcat.AppInfo.processList)
}
inline std::string* AppInfo::_internal_add_processlist() {
  return processlist_.Add();
}
inline void AppInfo::add_processlist(const std::string& value) {
  processlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perfcat.AppInfo.processList)
}
inline void AppInfo::add_processlist(std::string&& value) {
  processlist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:perfcat.AppInfo.processList)
}
inline void AppInfo::add_processlist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  processlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perfcat.AppInfo.processList)
}
inline void AppInfo::add_processlist(const char* value, size_t size) {
  processlist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perfcat.AppInfo.processList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AppInfo::processlist() const {
  // @@protoc_insertion_point(field_list:perfcat.AppInfo.processList)
  return processlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AppInfo::mutable_processlist() {
  // @@protoc_insertion_point(field_mutable_list:perfcat.AppInfo.processList)
  return &processlist_;
}

// bool isSystemApp = 7;
inline void AppInfo::clear_issystemapp() {
  issystemapp_ = false;
}
inline bool AppInfo::_internal_issystemapp() const {
  return issystemapp_;
}
inline bool AppInfo::issystemapp() const {
  // @@protoc_insertion_point(field_get:perfcat.AppInfo.isSystemApp)
  return _internal_issystemapp();
}
inline void AppInfo::_internal_set_issystemapp(bool value) {
  
  issystemapp_ = value;
}
inline void AppInfo::set_issystemapp(bool value) {
  _internal_set_issystemapp(value);
  // @@protoc_insertion_point(field_set:perfcat.AppInfo.isSystemApp)
}

// bool isDebuggable = 8;
inline void AppInfo::clear_isdebuggable() {
  isdebuggable_ = false;
}
inline bool AppInfo::_internal_isdebuggable() const {
  return isdebuggable_;
}
inline bool AppInfo::isdebuggable() const {
  // @@protoc_insertion_point(field_get:perfcat.AppInfo.isDebuggable)
  return _internal_isdebuggable();
}
inline void AppInfo::_internal_set_isdebuggable(bool value) {
  
  isdebuggable_ = value;
}
inline void AppInfo::set_isdebuggable(bool value) {
  _internal_set_isdebuggable(value);
  // @@protoc_insertion_point(field_set:perfcat.AppInfo.isDebuggable)
}

// -------------------------------------------------------------------

// EmptyRsp

// -------------------------------------------------------------------

// HelloReq

// -------------------------------------------------------------------

// ExecuteShellCommandReq

// -------------------------------------------------------------------

// ExecuteShellCommandRsp

// -------------------------------------------------------------------

// RegisterAppReq

// -------------------------------------------------------------------

// ResumeProfileReq

// -------------------------------------------------------------------

// ResumeProfileRsp

// -------------------------------------------------------------------

// GetDataFromAppReq

// -------------------------------------------------------------------

// GetDataFromAppRsp

// -------------------------------------------------------------------

// SetScreenshotIntervalReq

// -------------------------------------------------------------------

// EnableFloatingWindowReq

// -------------------------------------------------------------------

// GetScreenInfoReq

// -------------------------------------------------------------------

// GetScreenInfoRsp

// float screenSize = 1;
inline void GetScreenInfoRsp::clear_screensize() {
  screensize_ = 0;
}
inline float GetScreenInfoRsp::_internal_screensize() const {
  return screensize_;
}
inline float GetScreenInfoRsp::screensize() const {
  // @@protoc_insertion_point(field_get:perfcat.GetScreenInfoRsp.screenSize)
  return _internal_screensize();
}
inline void GetScreenInfoRsp::_internal_set_screensize(float value) {
  
  screensize_ = value;
}
inline void GetScreenInfoRsp::set_screensize(float value) {
  _internal_set_screensize(value);
  // @@protoc_insertion_point(field_set:perfcat.GetScreenInfoRsp.screenSize)
}

// int32 width = 2;
inline void GetScreenInfoRsp::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetScreenInfoRsp::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetScreenInfoRsp::width() const {
  // @@protoc_insertion_point(field_get:perfcat.GetScreenInfoRsp.width)
  return _internal_width();
}
inline void GetScreenInfoRsp::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void GetScreenInfoRsp::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:perfcat.GetScreenInfoRsp.width)
}

// int32 height = 3;
inline void GetScreenInfoRsp::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetScreenInfoRsp::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetScreenInfoRsp::height() const {
  // @@protoc_insertion_point(field_get:perfcat.GetScreenInfoRsp.height)
  return _internal_height();
}
inline void GetScreenInfoRsp::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void GetScreenInfoRsp::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:perfcat.GetScreenInfoRsp.height)
}

// -------------------------------------------------------------------

// GetLMKThresholdReq

// -------------------------------------------------------------------

// GetLMKThresholdRsp

// int32 memoryThreshold = 1;
inline void GetLMKThresholdRsp::clear_memorythreshold() {
  memorythreshold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLMKThresholdRsp::_internal_memorythreshold() const {
  return memorythreshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetLMKThresholdRsp::memorythreshold() const {
  // @@protoc_insertion_point(field_get:perfcat.GetLMKThresholdRsp.memoryThreshold)
  return _internal_memorythreshold();
}
inline void GetLMKThresholdRsp::_internal_set_memorythreshold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  memorythreshold_ = value;
}
inline void GetLMKThresholdRsp::set_memorythreshold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_memorythreshold(value);
  // @@protoc_insertion_point(field_set:perfcat.GetLMKThresholdRsp.memoryThreshold)
}

// -------------------------------------------------------------------

// CheckOverlayPermissionReq

// -------------------------------------------------------------------

// CheckOverlayPermissionRsp

// bool overLayPermission = 1;
inline void CheckOverlayPermissionRsp::clear_overlaypermission() {
  overlaypermission_ = false;
}
inline bool CheckOverlayPermissionRsp::_internal_overlaypermission() const {
  return overlaypermission_;
}
inline bool CheckOverlayPermissionRsp::overlaypermission() const {
  // @@protoc_insertion_point(field_get:perfcat.CheckOverlayPermissionRsp.overLayPermission)
  return _internal_overlaypermission();
}
inline void CheckOverlayPermissionRsp::_internal_set_overlaypermission(bool value) {
  
  overlaypermission_ = value;
}
inline void CheckOverlayPermissionRsp::set_overlaypermission(bool value) {
  _internal_set_overlaypermission(value);
  // @@protoc_insertion_point(field_set:perfcat.CheckOverlayPermissionRsp.overLayPermission)
}

// -------------------------------------------------------------------

// AppHelloReq

// -------------------------------------------------------------------

// AppHelloRsp

// string message = 1;
inline void AppHelloRsp::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AppHelloRsp::message() const {
  // @@protoc_insertion_point(field_get:perfcat.AppHelloRsp.message)
  return _internal_message();
}
inline void AppHelloRsp::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:perfcat.AppHelloRsp.message)
}
inline std::string* AppHelloRsp::mutable_message() {
  // @@protoc_insertion_point(field_mutable:perfcat.AppHelloRsp.message)
  return _internal_mutable_message();
}
inline const std::string& AppHelloRsp::_internal_message() const {
  return message_.Get();
}
inline void AppHelloRsp::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppHelloRsp::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:perfcat.AppHelloRsp.message)
}
inline void AppHelloRsp::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:perfcat.AppHelloRsp.message)
}
inline void AppHelloRsp::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:perfcat.AppHelloRsp.message)
}
inline std::string* AppHelloRsp::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppHelloRsp::release_message() {
  // @@protoc_insertion_point(field_release:perfcat.AppHelloRsp.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppHelloRsp::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:perfcat.AppHelloRsp.message)
}

// -------------------------------------------------------------------

// ProfileIOSNtf

// int32 index = 1;
inline void ProfileIOSNtf::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfileIOSNtf::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProfileIOSNtf::index() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileIOSNtf.index)
  return _internal_index();
}
inline void ProfileIOSNtf::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void ProfileIOSNtf::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:perfcat.ProfileIOSNtf.index)
}

// int64 timestamp = 2;
inline void ProfileIOSNtf::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProfileIOSNtf::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProfileIOSNtf::timestamp() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileIOSNtf.timestamp)
  return _internal_timestamp();
}
inline void ProfileIOSNtf::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void ProfileIOSNtf::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:perfcat.ProfileIOSNtf.timestamp)
}

// .perfcat.Screenshot screenshot = 3;
inline bool ProfileIOSNtf::_internal_has_screenshot() const {
  return this != internal_default_instance() && screenshot_ != nullptr;
}
inline bool ProfileIOSNtf::has_screenshot() const {
  return _internal_has_screenshot();
}
inline void ProfileIOSNtf::clear_screenshot() {
  if (GetArena() == nullptr && screenshot_ != nullptr) {
    delete screenshot_;
  }
  screenshot_ = nullptr;
}
inline const ::perfcat::Screenshot& ProfileIOSNtf::_internal_screenshot() const {
  const ::perfcat::Screenshot* p = screenshot_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perfcat::Screenshot*>(
      &::perfcat::_Screenshot_default_instance_);
}
inline const ::perfcat::Screenshot& ProfileIOSNtf::screenshot() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileIOSNtf.screenshot)
  return _internal_screenshot();
}
inline void ProfileIOSNtf::unsafe_arena_set_allocated_screenshot(
    ::perfcat::Screenshot* screenshot) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(screenshot_);
  }
  screenshot_ = screenshot;
  if (screenshot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.ProfileIOSNtf.screenshot)
}
inline ::perfcat::Screenshot* ProfileIOSNtf::release_screenshot() {
  
  ::perfcat::Screenshot* temp = screenshot_;
  screenshot_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perfcat::Screenshot* ProfileIOSNtf::unsafe_arena_release_screenshot() {
  // @@protoc_insertion_point(field_release:perfcat.ProfileIOSNtf.screenshot)
  
  ::perfcat::Screenshot* temp = screenshot_;
  screenshot_ = nullptr;
  return temp;
}
inline ::perfcat::Screenshot* ProfileIOSNtf::_internal_mutable_screenshot() {
  
  if (screenshot_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfcat::Screenshot>(GetArena());
    screenshot_ = p;
  }
  return screenshot_;
}
inline ::perfcat::Screenshot* ProfileIOSNtf::mutable_screenshot() {
  // @@protoc_insertion_point(field_mutable:perfcat.ProfileIOSNtf.screenshot)
  return _internal_mutable_screenshot();
}
inline void ProfileIOSNtf::set_allocated_screenshot(::perfcat::Screenshot* screenshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete screenshot_;
  }
  if (screenshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(screenshot);
    if (message_arena != submessage_arena) {
      screenshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, screenshot, submessage_arena);
    }
    
  } else {
    
  }
  screenshot_ = screenshot;
  // @@protoc_insertion_point(field_set_allocated:perfcat.ProfileIOSNtf.screenshot)
}

// .perfcat.FPS fps = 4;
inline bool ProfileIOSNtf::_internal_has_fps() const {
  return this != internal_default_instance() && fps_ != nullptr;
}
inline bool ProfileIOSNtf::has_fps() const {
  return _internal_has_fps();
}
inline void ProfileIOSNtf::clear_fps() {
  if (GetArena() == nullptr && fps_ != nullptr) {
    delete fps_;
  }
  fps_ = nullptr;
}
inline const ::perfcat::FPS& ProfileIOSNtf::_internal_fps() const {
  const ::perfcat::FPS* p = fps_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perfcat::FPS*>(
      &::perfcat::_FPS_default_instance_);
}
inline const ::perfcat::FPS& ProfileIOSNtf::fps() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileIOSNtf.fps)
  return _internal_fps();
}
inline void ProfileIOSNtf::unsafe_arena_set_allocated_fps(
    ::perfcat::FPS* fps) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fps_);
  }
  fps_ = fps;
  if (fps) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.ProfileIOSNtf.fps)
}
inline ::perfcat::FPS* ProfileIOSNtf::release_fps() {
  
  ::perfcat::FPS* temp = fps_;
  fps_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perfcat::FPS* ProfileIOSNtf::unsafe_arena_release_fps() {
  // @@protoc_insertion_point(field_release:perfcat.ProfileIOSNtf.fps)
  
  ::perfcat::FPS* temp = fps_;
  fps_ = nullptr;
  return temp;
}
inline ::perfcat::FPS* ProfileIOSNtf::_internal_mutable_fps() {
  
  if (fps_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfcat::FPS>(GetArena());
    fps_ = p;
  }
  return fps_;
}
inline ::perfcat::FPS* ProfileIOSNtf::mutable_fps() {
  // @@protoc_insertion_point(field_mutable:perfcat.ProfileIOSNtf.fps)
  return _internal_mutable_fps();
}
inline void ProfileIOSNtf::set_allocated_fps(::perfcat::FPS* fps) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fps_;
  }
  if (fps) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fps);
    if (message_arena != submessage_arena) {
      fps = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fps, submessage_arena);
    }
    
  } else {
    
  }
  fps_ = fps;
  // @@protoc_insertion_point(field_set_allocated:perfcat.ProfileIOSNtf.fps)
}

// .perfcat.iOSFrameTime frameTime = 5;
inline bool ProfileIOSNtf::_internal_has_frametime() const {
  return this != internal_default_instance() && frametime_ != nullptr;
}
inline bool ProfileIOSNtf::has_frametime() const {
  return _internal_has_frametime();
}
inline void ProfileIOSNtf::clear_frametime() {
  if (GetArena() == nullptr && frametime_ != nullptr) {
    delete frametime_;
  }
  frametime_ = nullptr;
}
inline const ::perfcat::iOSFrameTime& ProfileIOSNtf::_internal_frametime() const {
  const ::perfcat::iOSFrameTime* p = frametime_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perfcat::iOSFrameTime*>(
      &::perfcat::_iOSFrameTime_default_instance_);
}
inline const ::perfcat::iOSFrameTime& ProfileIOSNtf::frametime() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileIOSNtf.frameTime)
  return _internal_frametime();
}
inline void ProfileIOSNtf::unsafe_arena_set_allocated_frametime(
    ::perfcat::iOSFrameTime* frametime) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frametime_);
  }
  frametime_ = frametime;
  if (frametime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.ProfileIOSNtf.frameTime)
}
inline ::perfcat::iOSFrameTime* ProfileIOSNtf::release_frametime() {
  
  ::perfcat::iOSFrameTime* temp = frametime_;
  frametime_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perfcat::iOSFrameTime* ProfileIOSNtf::unsafe_arena_release_frametime() {
  // @@protoc_insertion_point(field_release:perfcat.ProfileIOSNtf.frameTime)
  
  ::perfcat::iOSFrameTime* temp = frametime_;
  frametime_ = nullptr;
  return temp;
}
inline ::perfcat::iOSFrameTime* ProfileIOSNtf::_internal_mutable_frametime() {
  
  if (frametime_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfcat::iOSFrameTime>(GetArena());
    frametime_ = p;
  }
  return frametime_;
}
inline ::perfcat::iOSFrameTime* ProfileIOSNtf::mutable_frametime() {
  // @@protoc_insertion_point(field_mutable:perfcat.ProfileIOSNtf.frameTime)
  return _internal_mutable_frametime();
}
inline void ProfileIOSNtf::set_allocated_frametime(::perfcat::iOSFrameTime* frametime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete frametime_;
  }
  if (frametime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(frametime);
    if (message_arena != submessage_arena) {
      frametime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frametime, submessage_arena);
    }
    
  } else {
    
  }
  frametime_ = frametime;
  // @@protoc_insertion_point(field_set_allocated:perfcat.ProfileIOSNtf.frameTime)
}

// .perfcat.CpuUsage cpuUsage = 6;
inline bool ProfileIOSNtf::_internal_has_cpuusage() const {
  return this != internal_default_instance() && cpuusage_ != nullptr;
}
inline bool ProfileIOSNtf::has_cpuusage() const {
  return _internal_has_cpuusage();
}
inline void ProfileIOSNtf::clear_cpuusage() {
  if (GetArena() == nullptr && cpuusage_ != nullptr) {
    delete cpuusage_;
  }
  cpuusage_ = nullptr;
}
inline const ::perfcat::CpuUsage& ProfileIOSNtf::_internal_cpuusage() const {
  const ::perfcat::CpuUsage* p = cpuusage_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perfcat::CpuUsage*>(
      &::perfcat::_CpuUsage_default_instance_);
}
inline const ::perfcat::CpuUsage& ProfileIOSNtf::cpuusage() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileIOSNtf.cpuUsage)
  return _internal_cpuusage();
}
inline void ProfileIOSNtf::unsafe_arena_set_allocated_cpuusage(
    ::perfcat::CpuUsage* cpuusage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cpuusage_);
  }
  cpuusage_ = cpuusage;
  if (cpuusage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.ProfileIOSNtf.cpuUsage)
}
inline ::perfcat::CpuUsage* ProfileIOSNtf::release_cpuusage() {
  
  ::perfcat::CpuUsage* temp = cpuusage_;
  cpuusage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perfcat::CpuUsage* ProfileIOSNtf::unsafe_arena_release_cpuusage() {
  // @@protoc_insertion_point(field_release:perfcat.ProfileIOSNtf.cpuUsage)
  
  ::perfcat::CpuUsage* temp = cpuusage_;
  cpuusage_ = nullptr;
  return temp;
}
inline ::perfcat::CpuUsage* ProfileIOSNtf::_internal_mutable_cpuusage() {
  
  if (cpuusage_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfcat::CpuUsage>(GetArena());
    cpuusage_ = p;
  }
  return cpuusage_;
}
inline ::perfcat::CpuUsage* ProfileIOSNtf::mutable_cpuusage() {
  // @@protoc_insertion_point(field_mutable:perfcat.ProfileIOSNtf.cpuUsage)
  return _internal_mutable_cpuusage();
}
inline void ProfileIOSNtf::set_allocated_cpuusage(::perfcat::CpuUsage* cpuusage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cpuusage_;
  }
  if (cpuusage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cpuusage);
    if (message_arena != submessage_arena) {
      cpuusage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpuusage, submessage_arena);
    }
    
  } else {
    
  }
  cpuusage_ = cpuusage;
  // @@protoc_insertion_point(field_set_allocated:perfcat.ProfileIOSNtf.cpuUsage)
}

// .perfcat.iOSMemory memory = 7;
inline bool ProfileIOSNtf::_internal_has_memory() const {
  return this != internal_default_instance() && memory_ != nullptr;
}
inline bool ProfileIOSNtf::has_memory() const {
  return _internal_has_memory();
}
inline void ProfileIOSNtf::clear_memory() {
  if (GetArena() == nullptr && memory_ != nullptr) {
    delete memory_;
  }
  memory_ = nullptr;
}
inline const ::perfcat::iOSMemory& ProfileIOSNtf::_internal_memory() const {
  const ::perfcat::iOSMemory* p = memory_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perfcat::iOSMemory*>(
      &::perfcat::_iOSMemory_default_instance_);
}
inline const ::perfcat::iOSMemory& ProfileIOSNtf::memory() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileIOSNtf.memory)
  return _internal_memory();
}
inline void ProfileIOSNtf::unsafe_arena_set_allocated_memory(
    ::perfcat::iOSMemory* memory) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(memory_);
  }
  memory_ = memory;
  if (memory) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.ProfileIOSNtf.memory)
}
inline ::perfcat::iOSMemory* ProfileIOSNtf::release_memory() {
  
  ::perfcat::iOSMemory* temp = memory_;
  memory_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perfcat::iOSMemory* ProfileIOSNtf::unsafe_arena_release_memory() {
  // @@protoc_insertion_point(field_release:perfcat.ProfileIOSNtf.memory)
  
  ::perfcat::iOSMemory* temp = memory_;
  memory_ = nullptr;
  return temp;
}
inline ::perfcat::iOSMemory* ProfileIOSNtf::_internal_mutable_memory() {
  
  if (memory_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfcat::iOSMemory>(GetArena());
    memory_ = p;
  }
  return memory_;
}
inline ::perfcat::iOSMemory* ProfileIOSNtf::mutable_memory() {
  // @@protoc_insertion_point(field_mutable:perfcat.ProfileIOSNtf.memory)
  return _internal_mutable_memory();
}
inline void ProfileIOSNtf::set_allocated_memory(::perfcat::iOSMemory* memory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete memory_;
  }
  if (memory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(memory);
    if (message_arena != submessage_arena) {
      memory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memory, submessage_arena);
    }
    
  } else {
    
  }
  memory_ = memory;
  // @@protoc_insertion_point(field_set_allocated:perfcat.ProfileIOSNtf.memory)
}

// .perfcat.iOSGpuUsage gpuUsage = 8;
inline bool ProfileIOSNtf::_internal_has_gpuusage() const {
  return this != internal_default_instance() && gpuusage_ != nullptr;
}
inline bool ProfileIOSNtf::has_gpuusage() const {
  return _internal_has_gpuusage();
}
inline void ProfileIOSNtf::clear_gpuusage() {
  if (GetArena() == nullptr && gpuusage_ != nullptr) {
    delete gpuusage_;
  }
  gpuusage_ = nullptr;
}
inline const ::perfcat::iOSGpuUsage& ProfileIOSNtf::_internal_gpuusage() const {
  const ::perfcat::iOSGpuUsage* p = gpuusage_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perfcat::iOSGpuUsage*>(
      &::perfcat::_iOSGpuUsage_default_instance_);
}
inline const ::perfcat::iOSGpuUsage& ProfileIOSNtf::gpuusage() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileIOSNtf.gpuUsage)
  return _internal_gpuusage();
}
inline void ProfileIOSNtf::unsafe_arena_set_allocated_gpuusage(
    ::perfcat::iOSGpuUsage* gpuusage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gpuusage_);
  }
  gpuusage_ = gpuusage;
  if (gpuusage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.ProfileIOSNtf.gpuUsage)
}
inline ::perfcat::iOSGpuUsage* ProfileIOSNtf::release_gpuusage() {
  
  ::perfcat::iOSGpuUsage* temp = gpuusage_;
  gpuusage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perfcat::iOSGpuUsage* ProfileIOSNtf::unsafe_arena_release_gpuusage() {
  // @@protoc_insertion_point(field_release:perfcat.ProfileIOSNtf.gpuUsage)
  
  ::perfcat::iOSGpuUsage* temp = gpuusage_;
  gpuusage_ = nullptr;
  return temp;
}
inline ::perfcat::iOSGpuUsage* ProfileIOSNtf::_internal_mutable_gpuusage() {
  
  if (gpuusage_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfcat::iOSGpuUsage>(GetArena());
    gpuusage_ = p;
  }
  return gpuusage_;
}
inline ::perfcat::iOSGpuUsage* ProfileIOSNtf::mutable_gpuusage() {
  // @@protoc_insertion_point(field_mutable:perfcat.ProfileIOSNtf.gpuUsage)
  return _internal_mutable_gpuusage();
}
inline void ProfileIOSNtf::set_allocated_gpuusage(::perfcat::iOSGpuUsage* gpuusage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gpuusage_;
  }
  if (gpuusage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gpuusage);
    if (message_arena != submessage_arena) {
      gpuusage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gpuusage, submessage_arena);
    }
    
  } else {
    
  }
  gpuusage_ = gpuusage;
  // @@protoc_insertion_point(field_set_allocated:perfcat.ProfileIOSNtf.gpuUsage)
}

// .perfcat.Network network = 9;
inline bool ProfileIOSNtf::_internal_has_network() const {
  return this != internal_default_instance() && network_ != nullptr;
}
inline bool ProfileIOSNtf::has_network() const {
  return _internal_has_network();
}
inline void ProfileIOSNtf::clear_network() {
  if (GetArena() == nullptr && network_ != nullptr) {
    delete network_;
  }
  network_ = nullptr;
}
inline const ::perfcat::Network& ProfileIOSNtf::_internal_network() const {
  const ::perfcat::Network* p = network_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perfcat::Network*>(
      &::perfcat::_Network_default_instance_);
}
inline const ::perfcat::Network& ProfileIOSNtf::network() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileIOSNtf.network)
  return _internal_network();
}
inline void ProfileIOSNtf::unsafe_arena_set_allocated_network(
    ::perfcat::Network* network) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_);
  }
  network_ = network;
  if (network) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.ProfileIOSNtf.network)
}
inline ::perfcat::Network* ProfileIOSNtf::release_network() {
  
  ::perfcat::Network* temp = network_;
  network_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perfcat::Network* ProfileIOSNtf::unsafe_arena_release_network() {
  // @@protoc_insertion_point(field_release:perfcat.ProfileIOSNtf.network)
  
  ::perfcat::Network* temp = network_;
  network_ = nullptr;
  return temp;
}
inline ::perfcat::Network* ProfileIOSNtf::_internal_mutable_network() {
  
  if (network_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfcat::Network>(GetArena());
    network_ = p;
  }
  return network_;
}
inline ::perfcat::Network* ProfileIOSNtf::mutable_network() {
  // @@protoc_insertion_point(field_mutable:perfcat.ProfileIOSNtf.network)
  return _internal_mutable_network();
}
inline void ProfileIOSNtf::set_allocated_network(::perfcat::Network* network) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete network_;
  }
  if (network) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(network);
    if (message_arena != submessage_arena) {
      network = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network, submessage_arena);
    }
    
  } else {
    
  }
  network_ = network;
  // @@protoc_insertion_point(field_set_allocated:perfcat.ProfileIOSNtf.network)
}

// .perfcat.Power power = 10;
inline bool ProfileIOSNtf::_internal_has_power() const {
  return this != internal_default_instance() && power_ != nullptr;
}
inline bool ProfileIOSNtf::has_power() const {
  return _internal_has_power();
}
inline void ProfileIOSNtf::clear_power() {
  if (GetArena() == nullptr && power_ != nullptr) {
    delete power_;
  }
  power_ = nullptr;
}
inline const ::perfcat::Power& ProfileIOSNtf::_internal_power() const {
  const ::perfcat::Power* p = power_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perfcat::Power*>(
      &::perfcat::_Power_default_instance_);
}
inline const ::perfcat::Power& ProfileIOSNtf::power() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileIOSNtf.power)
  return _internal_power();
}
inline void ProfileIOSNtf::unsafe_arena_set_allocated_power(
    ::perfcat::Power* power) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(power_);
  }
  power_ = power;
  if (power) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.ProfileIOSNtf.power)
}
inline ::perfcat::Power* ProfileIOSNtf::release_power() {
  
  ::perfcat::Power* temp = power_;
  power_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perfcat::Power* ProfileIOSNtf::unsafe_arena_release_power() {
  // @@protoc_insertion_point(field_release:perfcat.ProfileIOSNtf.power)
  
  ::perfcat::Power* temp = power_;
  power_ = nullptr;
  return temp;
}
inline ::perfcat::Power* ProfileIOSNtf::_internal_mutable_power() {
  
  if (power_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfcat::Power>(GetArena());
    power_ = p;
  }
  return power_;
}
inline ::perfcat::Power* ProfileIOSNtf::mutable_power() {
  // @@protoc_insertion_point(field_mutable:perfcat.ProfileIOSNtf.power)
  return _internal_mutable_power();
}
inline void ProfileIOSNtf::set_allocated_power(::perfcat::Power* power) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete power_;
  }
  if (power) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(power);
    if (message_arena != submessage_arena) {
      power = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, power, submessage_arena);
    }
    
  } else {
    
  }
  power_ = power;
  // @@protoc_insertion_point(field_set_allocated:perfcat.ProfileIOSNtf.power)
}

// .perfcat.iOSContextSwitch contextSwitch = 11;
inline bool ProfileIOSNtf::_internal_has_contextswitch() const {
  return this != internal_default_instance() && contextswitch_ != nullptr;
}
inline bool ProfileIOSNtf::has_contextswitch() const {
  return _internal_has_contextswitch();
}
inline void ProfileIOSNtf::clear_contextswitch() {
  if (GetArena() == nullptr && contextswitch_ != nullptr) {
    delete contextswitch_;
  }
  contextswitch_ = nullptr;
}
inline const ::perfcat::iOSContextSwitch& ProfileIOSNtf::_internal_contextswitch() const {
  const ::perfcat::iOSContextSwitch* p = contextswitch_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perfcat::iOSContextSwitch*>(
      &::perfcat::_iOSContextSwitch_default_instance_);
}
inline const ::perfcat::iOSContextSwitch& ProfileIOSNtf::contextswitch() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileIOSNtf.contextSwitch)
  return _internal_contextswitch();
}
inline void ProfileIOSNtf::unsafe_arena_set_allocated_contextswitch(
    ::perfcat::iOSContextSwitch* contextswitch) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contextswitch_);
  }
  contextswitch_ = contextswitch;
  if (contextswitch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.ProfileIOSNtf.contextSwitch)
}
inline ::perfcat::iOSContextSwitch* ProfileIOSNtf::release_contextswitch() {
  
  ::perfcat::iOSContextSwitch* temp = contextswitch_;
  contextswitch_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perfcat::iOSContextSwitch* ProfileIOSNtf::unsafe_arena_release_contextswitch() {
  // @@protoc_insertion_point(field_release:perfcat.ProfileIOSNtf.contextSwitch)
  
  ::perfcat::iOSContextSwitch* temp = contextswitch_;
  contextswitch_ = nullptr;
  return temp;
}
inline ::perfcat::iOSContextSwitch* ProfileIOSNtf::_internal_mutable_contextswitch() {
  
  if (contextswitch_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfcat::iOSContextSwitch>(GetArena());
    contextswitch_ = p;
  }
  return contextswitch_;
}
inline ::perfcat::iOSContextSwitch* ProfileIOSNtf::mutable_contextswitch() {
  // @@protoc_insertion_point(field_mutable:perfcat.ProfileIOSNtf.contextSwitch)
  return _internal_mutable_contextswitch();
}
inline void ProfileIOSNtf::set_allocated_contextswitch(::perfcat::iOSContextSwitch* contextswitch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete contextswitch_;
  }
  if (contextswitch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(contextswitch);
    if (message_arena != submessage_arena) {
      contextswitch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contextswitch, submessage_arena);
    }
    
  } else {
    
  }
  contextswitch_ = contextswitch;
  // @@protoc_insertion_point(field_set_allocated:perfcat.ProfileIOSNtf.contextSwitch)
}

// .perfcat.iOSWakeups wakeups = 12;
inline bool ProfileIOSNtf::_internal_has_wakeups() const {
  return this != internal_default_instance() && wakeups_ != nullptr;
}
inline bool ProfileIOSNtf::has_wakeups() const {
  return _internal_has_wakeups();
}
inline void ProfileIOSNtf::clear_wakeups() {
  if (GetArena() == nullptr && wakeups_ != nullptr) {
    delete wakeups_;
  }
  wakeups_ = nullptr;
}
inline const ::perfcat::iOSWakeups& ProfileIOSNtf::_internal_wakeups() const {
  const ::perfcat::iOSWakeups* p = wakeups_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perfcat::iOSWakeups*>(
      &::perfcat::_iOSWakeups_default_instance_);
}
inline const ::perfcat::iOSWakeups& ProfileIOSNtf::wakeups() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileIOSNtf.wakeups)
  return _internal_wakeups();
}
inline void ProfileIOSNtf::unsafe_arena_set_allocated_wakeups(
    ::perfcat::iOSWakeups* wakeups) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wakeups_);
  }
  wakeups_ = wakeups;
  if (wakeups) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.ProfileIOSNtf.wakeups)
}
inline ::perfcat::iOSWakeups* ProfileIOSNtf::release_wakeups() {
  
  ::perfcat::iOSWakeups* temp = wakeups_;
  wakeups_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perfcat::iOSWakeups* ProfileIOSNtf::unsafe_arena_release_wakeups() {
  // @@protoc_insertion_point(field_release:perfcat.ProfileIOSNtf.wakeups)
  
  ::perfcat::iOSWakeups* temp = wakeups_;
  wakeups_ = nullptr;
  return temp;
}
inline ::perfcat::iOSWakeups* ProfileIOSNtf::_internal_mutable_wakeups() {
  
  if (wakeups_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfcat::iOSWakeups>(GetArena());
    wakeups_ = p;
  }
  return wakeups_;
}
inline ::perfcat::iOSWakeups* ProfileIOSNtf::mutable_wakeups() {
  // @@protoc_insertion_point(field_mutable:perfcat.ProfileIOSNtf.wakeups)
  return _internal_mutable_wakeups();
}
inline void ProfileIOSNtf::set_allocated_wakeups(::perfcat::iOSWakeups* wakeups) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete wakeups_;
  }
  if (wakeups) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(wakeups);
    if (message_arena != submessage_arena) {
      wakeups = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wakeups, submessage_arena);
    }
    
  } else {
    
  }
  wakeups_ = wakeups;
  // @@protoc_insertion_point(field_set_allocated:perfcat.ProfileIOSNtf.wakeups)
}

// .perfcat.iOSEnergyUsage energyUsage = 13;
inline bool ProfileIOSNtf::_internal_has_energyusage() const {
  return this != internal_default_instance() && energyusage_ != nullptr;
}
inline bool ProfileIOSNtf::has_energyusage() const {
  return _internal_has_energyusage();
}
inline void ProfileIOSNtf::clear_energyusage() {
  if (GetArena() == nullptr && energyusage_ != nullptr) {
    delete energyusage_;
  }
  energyusage_ = nullptr;
}
inline const ::perfcat::iOSEnergyUsage& ProfileIOSNtf::_internal_energyusage() const {
  const ::perfcat::iOSEnergyUsage* p = energyusage_;
  return p != nullptr ? *p : *reinterpret_cast<const ::perfcat::iOSEnergyUsage*>(
      &::perfcat::_iOSEnergyUsage_default_instance_);
}
inline const ::perfcat::iOSEnergyUsage& ProfileIOSNtf::energyusage() const {
  // @@protoc_insertion_point(field_get:perfcat.ProfileIOSNtf.energyUsage)
  return _internal_energyusage();
}
inline void ProfileIOSNtf::unsafe_arena_set_allocated_energyusage(
    ::perfcat::iOSEnergyUsage* energyusage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(energyusage_);
  }
  energyusage_ = energyusage;
  if (energyusage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:perfcat.ProfileIOSNtf.energyUsage)
}
inline ::perfcat::iOSEnergyUsage* ProfileIOSNtf::release_energyusage() {
  
  ::perfcat::iOSEnergyUsage* temp = energyusage_;
  energyusage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::perfcat::iOSEnergyUsage* ProfileIOSNtf::unsafe_arena_release_energyusage() {
  // @@protoc_insertion_point(field_release:perfcat.ProfileIOSNtf.energyUsage)
  
  ::perfcat::iOSEnergyUsage* temp = energyusage_;
  energyusage_ = nullptr;
  return temp;
}
inline ::perfcat::iOSEnergyUsage* ProfileIOSNtf::_internal_mutable_energyusage() {
  
  if (energyusage_ == nullptr) {
    auto* p = CreateMaybeMessage<::perfcat::iOSEnergyUsage>(GetArena());
    energyusage_ = p;
  }
  return energyusage_;
}
inline ::perfcat::iOSEnergyUsage* ProfileIOSNtf::mutable_energyusage() {
  // @@protoc_insertion_point(field_mutable:perfcat.ProfileIOSNtf.energyUsage)
  return _internal_mutable_energyusage();
}
inline void ProfileIOSNtf::set_allocated_energyusage(::perfcat::iOSEnergyUsage* energyusage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete energyusage_;
  }
  if (energyusage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(energyusage);
    if (message_arena != submessage_arena) {
      energyusage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, energyusage, submessage_arena);
    }
    
  } else {
    
  }
  energyusage_ = energyusage;
  // @@protoc_insertion_point(field_set_allocated:perfcat.ProfileIOSNtf.energyUsage)
}

// -------------------------------------------------------------------

// iOSFrameTime

// repeated .perfcat.iOSFrameRecord frameTime = 1;
inline int iOSFrameTime::_internal_frametime_size() const {
  return frametime_.size();
}
inline int iOSFrameTime::frametime_size() const {
  return _internal_frametime_size();
}
inline void iOSFrameTime::clear_frametime() {
  frametime_.Clear();
}
inline ::perfcat::iOSFrameRecord* iOSFrameTime::mutable_frametime(int index) {
  // @@protoc_insertion_point(field_mutable:perfcat.iOSFrameTime.frameTime)
  return frametime_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfcat::iOSFrameRecord >*
iOSFrameTime::mutable_frametime() {
  // @@protoc_insertion_point(field_mutable_list:perfcat.iOSFrameTime.frameTime)
  return &frametime_;
}
inline const ::perfcat::iOSFrameRecord& iOSFrameTime::_internal_frametime(int index) const {
  return frametime_.Get(index);
}
inline const ::perfcat::iOSFrameRecord& iOSFrameTime::frametime(int index) const {
  // @@protoc_insertion_point(field_get:perfcat.iOSFrameTime.frameTime)
  return _internal_frametime(index);
}
inline ::perfcat::iOSFrameRecord* iOSFrameTime::_internal_add_frametime() {
  return frametime_.Add();
}
inline ::perfcat::iOSFrameRecord* iOSFrameTime::add_frametime() {
  // @@protoc_insertion_point(field_add:perfcat.iOSFrameTime.frameTime)
  return _internal_add_frametime();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfcat::iOSFrameRecord >&
iOSFrameTime::frametime() const {
  // @@protoc_insertion_point(field_list:perfcat.iOSFrameTime.frameTime)
  return frametime_;
}

// -------------------------------------------------------------------

// iOSFrameRecord

// int64 timestamp = 1;
inline void iOSFrameRecord::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 iOSFrameRecord::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 iOSFrameRecord::timestamp() const {
  // @@protoc_insertion_point(field_get:perfcat.iOSFrameRecord.timestamp)
  return _internal_timestamp();
}
inline void iOSFrameRecord::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void iOSFrameRecord::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:perfcat.iOSFrameRecord.timestamp)
}

// float frameTime = 2;
inline void iOSFrameRecord::clear_frametime() {
  frametime_ = 0;
}
inline float iOSFrameRecord::_internal_frametime() const {
  return frametime_;
}
inline float iOSFrameRecord::frametime() const {
  // @@protoc_insertion_point(field_get:perfcat.iOSFrameRecord.frameTime)
  return _internal_frametime();
}
inline void iOSFrameRecord::_internal_set_frametime(float value) {
  
  frametime_ = value;
}
inline void iOSFrameRecord::set_frametime(float value) {
  _internal_set_frametime(value);
  // @@protoc_insertion_point(field_set:perfcat.iOSFrameRecord.frameTime)
}

// -------------------------------------------------------------------

// iOSMemory

// int32 memory = 1;
inline void iOSMemory::clear_memory() {
  memory_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 iOSMemory::_internal_memory() const {
  return memory_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 iOSMemory::memory() const {
  // @@protoc_insertion_point(field_get:perfcat.iOSMemory.memory)
  return _internal_memory();
}
inline void iOSMemory::_internal_set_memory(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  memory_ = value;
}
inline void iOSMemory::set_memory(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_memory(value);
  // @@protoc_insertion_point(field_set:perfcat.iOSMemory.memory)
}

// int32 virtualMemory = 2;
inline void iOSMemory::clear_virtualmemory() {
  virtualmemory_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 iOSMemory::_internal_virtualmemory() const {
  return virtualmemory_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 iOSMemory::virtualmemory() const {
  // @@protoc_insertion_point(field_get:perfcat.iOSMemory.virtualMemory)
  return _internal_virtualmemory();
}
inline void iOSMemory::_internal_set_virtualmemory(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  virtualmemory_ = value;
}
inline void iOSMemory::set_virtualmemory(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_virtualmemory(value);
  // @@protoc_insertion_point(field_set:perfcat.iOSMemory.virtualMemory)
}

// int32 realMemory = 3;
inline void iOSMemory::clear_realmemory() {
  realmemory_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 iOSMemory::_internal_realmemory() const {
  return realmemory_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 iOSMemory::realmemory() const {
  // @@protoc_insertion_point(field_get:perfcat.iOSMemory.realMemory)
  return _internal_realmemory();
}
inline void iOSMemory::_internal_set_realmemory(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  realmemory_ = value;
}
inline void iOSMemory::set_realmemory(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_realmemory(value);
  // @@protoc_insertion_point(field_set:perfcat.iOSMemory.realMemory)
}

// int32 xcodeMemory = 4;
inline void iOSMemory::clear_xcodememory() {
  xcodememory_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 iOSMemory::_internal_xcodememory() const {
  return xcodememory_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 iOSMemory::xcodememory() const {
  // @@protoc_insertion_point(field_get:perfcat.iOSMemory.xcodeMemory)
  return _internal_xcodememory();
}
inline void iOSMemory::_internal_set_xcodememory(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xcodememory_ = value;
}
inline void iOSMemory::set_xcodememory(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xcodememory(value);
  // @@protoc_insertion_point(field_set:perfcat.iOSMemory.xcodeMemory)
}

// -------------------------------------------------------------------

// iOSGpuUsage

// float gpuRender = 1;
inline void iOSGpuUsage::clear_gpurender() {
  gpurender_ = 0;
}
inline float iOSGpuUsage::_internal_gpurender() const {
  return gpurender_;
}
inline float iOSGpuUsage::gpurender() const {
  // @@protoc_insertion_point(field_get:perfcat.iOSGpuUsage.gpuRender)
  return _internal_gpurender();
}
inline void iOSGpuUsage::_internal_set_gpurender(float value) {
  
  gpurender_ = value;
}
inline void iOSGpuUsage::set_gpurender(float value) {
  _internal_set_gpurender(value);
  // @@protoc_insertion_point(field_set:perfcat.iOSGpuUsage.gpuRender)
}

// float gpuTiler = 2;
inline void iOSGpuUsage::clear_gputiler() {
  gputiler_ = 0;
}
inline float iOSGpuUsage::_internal_gputiler() const {
  return gputiler_;
}
inline float iOSGpuUsage::gputiler() const {
  // @@protoc_insertion_point(field_get:perfcat.iOSGpuUsage.gpuTiler)
  return _internal_gputiler();
}
inline void iOSGpuUsage::_internal_set_gputiler(float value) {
  
  gputiler_ = value;
}
inline void iOSGpuUsage::set_gputiler(float value) {
  _internal_set_gputiler(value);
  // @@protoc_insertion_point(field_set:perfcat.iOSGpuUsage.gpuTiler)
}

// float gpuDevice = 3;
inline void iOSGpuUsage::clear_gpudevice() {
  gpudevice_ = 0;
}
inline float iOSGpuUsage::_internal_gpudevice() const {
  return gpudevice_;
}
inline float iOSGpuUsage::gpudevice() const {
  // @@protoc_insertion_point(field_get:perfcat.iOSGpuUsage.gpuDevice)
  return _internal_gpudevice();
}
inline void iOSGpuUsage::_internal_set_gpudevice(float value) {
  
  gpudevice_ = value;
}
inline void iOSGpuUsage::set_gpudevice(float value) {
  _internal_set_gpudevice(value);
  // @@protoc_insertion_point(field_set:perfcat.iOSGpuUsage.gpuDevice)
}

// -------------------------------------------------------------------

// iOSContextSwitch

// int32 contextSwitch = 1;
inline void iOSContextSwitch::clear_contextswitch() {
  contextswitch_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 iOSContextSwitch::_internal_contextswitch() const {
  return contextswitch_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 iOSContextSwitch::contextswitch() const {
  // @@protoc_insertion_point(field_get:perfcat.iOSContextSwitch.contextSwitch)
  return _internal_contextswitch();
}
inline void iOSContextSwitch::_internal_set_contextswitch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  contextswitch_ = value;
}
inline void iOSContextSwitch::set_contextswitch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_contextswitch(value);
  // @@protoc_insertion_point(field_set:perfcat.iOSContextSwitch.contextSwitch)
}

// -------------------------------------------------------------------

// iOSWakeups

// int32 wakeups = 1;
inline void iOSWakeups::clear_wakeups() {
  wakeups_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 iOSWakeups::_internal_wakeups() const {
  return wakeups_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 iOSWakeups::wakeups() const {
  // @@protoc_insertion_point(field_get:perfcat.iOSWakeups.wakeups)
  return _internal_wakeups();
}
inline void iOSWakeups::_internal_set_wakeups(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wakeups_ = value;
}
inline void iOSWakeups::set_wakeups(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wakeups(value);
  // @@protoc_insertion_point(field_set:perfcat.iOSWakeups.wakeups)
}

// -------------------------------------------------------------------

// iOSEnergyUsage

// int32 cpuEnergy = 1;
inline void iOSEnergyUsage::clear_cpuenergy() {
  cpuenergy_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 iOSEnergyUsage::_internal_cpuenergy() const {
  return cpuenergy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 iOSEnergyUsage::cpuenergy() const {
  // @@protoc_insertion_point(field_get:perfcat.iOSEnergyUsage.cpuEnergy)
  return _internal_cpuenergy();
}
inline void iOSEnergyUsage::_internal_set_cpuenergy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cpuenergy_ = value;
}
inline void iOSEnergyUsage::set_cpuenergy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cpuenergy(value);
  // @@protoc_insertion_point(field_set:perfcat.iOSEnergyUsage.cpuEnergy)
}

// int32 gpuEnergy = 2;
inline void iOSEnergyUsage::clear_gpuenergy() {
  gpuenergy_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 iOSEnergyUsage::_internal_gpuenergy() const {
  return gpuenergy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 iOSEnergyUsage::gpuenergy() const {
  // @@protoc_insertion_point(field_get:perfcat.iOSEnergyUsage.gpuEnergy)
  return _internal_gpuenergy();
}
inline void iOSEnergyUsage::_internal_set_gpuenergy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gpuenergy_ = value;
}
inline void iOSEnergyUsage::set_gpuenergy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gpuenergy(value);
  // @@protoc_insertion_point(field_set:perfcat.iOSEnergyUsage.gpuEnergy)
}

// int32 networkEnergy = 3;
inline void iOSEnergyUsage::clear_networkenergy() {
  networkenergy_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 iOSEnergyUsage::_internal_networkenergy() const {
  return networkenergy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 iOSEnergyUsage::networkenergy() const {
  // @@protoc_insertion_point(field_get:perfcat.iOSEnergyUsage.networkEnergy)
  return _internal_networkenergy();
}
inline void iOSEnergyUsage::_internal_set_networkenergy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  networkenergy_ = value;
}
inline void iOSEnergyUsage::set_networkenergy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_networkenergy(value);
  // @@protoc_insertion_point(field_set:perfcat.iOSEnergyUsage.networkEnergy)
}

// int32 locationEnergy = 4;
inline void iOSEnergyUsage::clear_locationenergy() {
  locationenergy_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 iOSEnergyUsage::_internal_locationenergy() const {
  return locationenergy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 iOSEnergyUsage::locationenergy() const {
  // @@protoc_insertion_point(field_get:perfcat.iOSEnergyUsage.locationEnergy)
  return _internal_locationenergy();
}
inline void iOSEnergyUsage::_internal_set_locationenergy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  locationenergy_ = value;
}
inline void iOSEnergyUsage::set_locationenergy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_locationenergy(value);
  // @@protoc_insertion_point(field_set:perfcat.iOSEnergyUsage.locationEnergy)
}

// int32 displayEnergy = 5;
inline void iOSEnergyUsage::clear_displayenergy() {
  displayenergy_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 iOSEnergyUsage::_internal_displayenergy() const {
  return displayenergy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 iOSEnergyUsage::displayenergy() const {
  // @@protoc_insertion_point(field_get:perfcat.iOSEnergyUsage.displayEnergy)
  return _internal_displayenergy();
}
inline void iOSEnergyUsage::_internal_set_displayenergy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  displayenergy_ = value;
}
inline void iOSEnergyUsage::set_displayenergy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_displayenergy(value);
  // @@protoc_insertion_point(field_set:perfcat.iOSEnergyUsage.displayEnergy)
}

// int32 overheadEnergy = 6;
inline void iOSEnergyUsage::clear_overheadenergy() {
  overheadenergy_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 iOSEnergyUsage::_internal_overheadenergy() const {
  return overheadenergy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 iOSEnergyUsage::overheadenergy() const {
  // @@protoc_insertion_point(field_get:perfcat.iOSEnergyUsage.overheadEnergy)
  return _internal_overheadenergy();
}
inline void iOSEnergyUsage::_internal_set_overheadenergy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  overheadenergy_ = value;
}
inline void iOSEnergyUsage::set_overheadenergy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_overheadenergy(value);
  // @@protoc_insertion_point(field_set:perfcat.iOSEnergyUsage.overheadEnergy)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perfcat

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::perfcat::ProfileReq_DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::perfcat::ProfileReq_DataType>() {
  return ::perfcat::ProfileReq_DataType_descriptor();
}
template <> struct is_proto_enum< ::perfcat::Screenshot_Orientation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::perfcat::Screenshot_Orientation>() {
  return ::perfcat::Screenshot_Orientation_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_perfcat_2eproto
