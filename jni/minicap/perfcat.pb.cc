// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perfcat.proto

#include "perfcat.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppClosedNTF_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppHelloReq_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppHelloRsp_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppInfo_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckDeviceReq_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckDeviceRsp_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckOverlayPermissionReq_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckOverlayPermissionRsp_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CoreUsage_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CpuFreq_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CpuUsage_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EmptyRsp_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableFloatingWindowReq_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExecuteShellCommandReq_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExecuteShellCommandRsp_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FPS_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrameTime_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAppInfoReq_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetAppInfoRsp_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetBatteryInfoReq_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetBatteryInfoRsp_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetCpuMaxFreqReq_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetCpuMaxFreqRsp_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetDataFromAppReq_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetDataFromAppRsp_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetLMKThresholdReq_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetLMKThresholdRsp_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetMemoryUsageReq_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetMemoryUsageRsp_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetScreenInfoReq_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetScreenInfoRsp_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GpuFreq_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GpuUsage_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HelloReq_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Memory_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemoryDetail_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Network_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Power_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrepareWifiProfileNTF_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessFoundNTF_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessNotFoundNTF_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProfileApp_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileAppInfo_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileAppPidName_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_ProfileIOSNtf_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileNTFACK_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<13> scc_info_ProfileNtf_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfileReq_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileRsp_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileStartedNTF_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileStoppedNTF_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterAppReq_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResumeProfileReq_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResumeProfileRsp_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Screenshot_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetScreenshotIntervalReq_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopProfileReq_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopProfileRsp_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Temp_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ToggleInterestingFiledNTF_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VirtualMemory_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_iOSContextSwitch_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_iOSEnergyUsage_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_iOSFrameRecord_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_iOSFrameTime_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_iOSGpuUsage_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_iOSMemory_perfcat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_perfcat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_iOSWakeups_perfcat_2eproto;
namespace perfcat {
class PerfcatAppProtocolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerfcatAppProtocol> _instance;
  const ::perfcat::GetAppInfoReq* getappinforeq_;
  const ::perfcat::GetAppInfoRsp* getappinforsp_;
  const ::perfcat::GetScreenInfoReq* getscreeninforeq_;
  const ::perfcat::GetScreenInfoRsp* getscreeninforsp_;
  const ::perfcat::GetLMKThresholdReq* getlmkthresholdreq_;
  const ::perfcat::GetLMKThresholdRsp* getlmkthresholdrsp_;
  const ::perfcat::CheckOverlayPermissionReq* checkoverlaypermissionreq_;
  const ::perfcat::CheckOverlayPermissionRsp* checkoverlaypermissionrsp_;
  const ::perfcat::AppHelloReq* apphelloreq_;
  const ::perfcat::AppHelloRsp* apphellorsp_;
} _PerfcatAppProtocol_default_instance_;
class PerfcatServerProtocolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerfcatServerProtocol> _instance;
  const ::perfcat::ProfileReq* profilereq_;
  const ::perfcat::ProfileRsp* profilersp_;
  const ::perfcat::GetMemoryUsageReq* getmemoryusagereq_;
  const ::perfcat::GetMemoryUsageRsp* getmemoryusagersp_;
  const ::perfcat::StopProfileReq* stopprofilereq_;
  const ::perfcat::StopProfileRsp* stopprofilersp_;
  const ::perfcat::CheckDeviceReq* checkdevicereq_;
  const ::perfcat::CheckDeviceRsp* checkdevicersp_;
  const ::perfcat::ProfileNtf* profilentf_;
  const ::perfcat::GetCpuMaxFreqReq* getcpumaxfreqreq_;
  const ::perfcat::GetCpuMaxFreqRsp* getcpumaxfreqrsp_;
  const ::perfcat::ToggleInterestingFiledNTF* toggleinterestingfiledntf_;
  const ::perfcat::ProfileStartedNTF* profilestartedntf_;
  const ::perfcat::ProfileStoppedNTF* profilestoppedntf_;
  const ::perfcat::ProcessNotFoundNTF* processnotfoundntf_;
  const ::perfcat::ProcessFoundNTF* processfoundntf_;
  const ::perfcat::GetBatteryInfoReq* getbatteryinforeq_;
  const ::perfcat::GetBatteryInfoRsp* getbatteryinforsp_;
  const ::perfcat::AppClosedNTF* appclosedntf_;
  const ::perfcat::ProfileNTFACK* profilentfack_;
  const ::perfcat::PrepareWifiProfileNTF* preparewifiprofilentf_;
  const ::perfcat::GetAppInfoReq* getappinforeq_;
  const ::perfcat::GetAppInfoRsp* getappinforsp_;
  const ::perfcat::EmptyRsp* emptyrsp_;
  const ::perfcat::HelloReq* helloreq_;
  const ::perfcat::ExecuteShellCommandReq* executeshellcommandreq_;
  const ::perfcat::ExecuteShellCommandRsp* executeshellcommandrsp_;
  const ::perfcat::RegisterAppReq* registerappreq_;
  const ::perfcat::ResumeProfileReq* resumeprofilereq_;
  const ::perfcat::ResumeProfileRsp* resumeprofilersp_;
  const ::perfcat::GetDataFromAppReq* getdatafromappreq_;
  const ::perfcat::GetDataFromAppRsp* getdatafromapprsp_;
  const ::perfcat::SetScreenshotIntervalReq* setscreenshotintervalreq_;
  const ::perfcat::EnableFloatingWindowReq* enablefloatingwindowreq_;
  const ::perfcat::ProfileIOSNtf* profileiosntf_;
} _PerfcatServerProtocol_default_instance_;
class ProfileReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileReq> _instance;
} _ProfileReq_default_instance_;
class ProfileAppDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileApp> _instance;
  const ::perfcat::ProfileAppInfo* appinfo_;
  const ::perfcat::ProfileAppPidName* pidname_;
} _ProfileApp_default_instance_;
class ProfileAppPidNameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileAppPidName> _instance;
} _ProfileAppPidName_default_instance_;
class ProfileAppInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileAppInfo> _instance;
} _ProfileAppInfo_default_instance_;
class ProfileRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileRsp> _instance;
} _ProfileRsp_default_instance_;
class GetMemoryUsageReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMemoryUsageReq> _instance;
} _GetMemoryUsageReq_default_instance_;
class GetMemoryUsageRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMemoryUsageRsp> _instance;
} _GetMemoryUsageRsp_default_instance_;
class StopProfileReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopProfileReq> _instance;
} _StopProfileReq_default_instance_;
class StopProfileRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopProfileRsp> _instance;
} _StopProfileRsp_default_instance_;
class CheckDeviceReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckDeviceReq> _instance;
} _CheckDeviceReq_default_instance_;
class CheckDeviceRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckDeviceRsp> _instance;
} _CheckDeviceRsp_default_instance_;
class ProfileNtfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileNtf> _instance;
} _ProfileNtf_default_instance_;
class ScreenshotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Screenshot> _instance;
} _Screenshot_default_instance_;
class VirtualMemoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VirtualMemory> _instance;
} _VirtualMemory_default_instance_;
class PowerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Power> _instance;
} _Power_default_instance_;
class TempDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Temp> _instance;
} _Temp_default_instance_;
class CpuUsageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CpuUsage> _instance;
} _CpuUsage_default_instance_;
class FPSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FPS> _instance;
} _FPS_default_instance_;
class CoreUsageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CoreUsage> _instance;
} _CoreUsage_default_instance_;
class FrameTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameTime> _instance;
} _FrameTime_default_instance_;
class NetworkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Network> _instance;
} _Network_default_instance_;
class MemoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Memory> _instance;
} _Memory_default_instance_;
class MemoryDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemoryDetail> _instance;
} _MemoryDetail_default_instance_;
class GpuFreqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GpuFreq> _instance;
} _GpuFreq_default_instance_;
class GpuUsageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GpuUsage> _instance;
} _GpuUsage_default_instance_;
class CpuFreqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CpuFreq> _instance;
} _CpuFreq_default_instance_;
class GetCpuMaxFreqReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCpuMaxFreqReq> _instance;
} _GetCpuMaxFreqReq_default_instance_;
class GetCpuMaxFreqRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCpuMaxFreqRsp> _instance;
} _GetCpuMaxFreqRsp_default_instance_;
class ToggleInterestingFiledNTFDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ToggleInterestingFiledNTF> _instance;
} _ToggleInterestingFiledNTF_default_instance_;
class ProfileStartedNTFDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileStartedNTF> _instance;
} _ProfileStartedNTF_default_instance_;
class ProfileStoppedNTFDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileStoppedNTF> _instance;
} _ProfileStoppedNTF_default_instance_;
class ProcessNotFoundNTFDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessNotFoundNTF> _instance;
} _ProcessNotFoundNTF_default_instance_;
class ProcessFoundNTFDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessFoundNTF> _instance;
} _ProcessFoundNTF_default_instance_;
class GetBatteryInfoReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBatteryInfoReq> _instance;
} _GetBatteryInfoReq_default_instance_;
class GetBatteryInfoRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBatteryInfoRsp> _instance;
} _GetBatteryInfoRsp_default_instance_;
class AppClosedNTFDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppClosedNTF> _instance;
} _AppClosedNTF_default_instance_;
class ProfileNTFACKDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileNTFACK> _instance;
} _ProfileNTFACK_default_instance_;
class PrepareWifiProfileNTFDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrepareWifiProfileNTF> _instance;
} _PrepareWifiProfileNTF_default_instance_;
class GetAppInfoReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAppInfoReq> _instance;
} _GetAppInfoReq_default_instance_;
class GetAppInfoRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAppInfoRsp> _instance;
} _GetAppInfoRsp_default_instance_;
class AppInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppInfo> _instance;
} _AppInfo_default_instance_;
class EmptyRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EmptyRsp> _instance;
} _EmptyRsp_default_instance_;
class HelloReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HelloReq> _instance;
} _HelloReq_default_instance_;
class ExecuteShellCommandReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExecuteShellCommandReq> _instance;
} _ExecuteShellCommandReq_default_instance_;
class ExecuteShellCommandRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExecuteShellCommandRsp> _instance;
} _ExecuteShellCommandRsp_default_instance_;
class RegisterAppReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterAppReq> _instance;
} _RegisterAppReq_default_instance_;
class ResumeProfileReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResumeProfileReq> _instance;
} _ResumeProfileReq_default_instance_;
class ResumeProfileRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResumeProfileRsp> _instance;
} _ResumeProfileRsp_default_instance_;
class GetDataFromAppReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDataFromAppReq> _instance;
} _GetDataFromAppReq_default_instance_;
class GetDataFromAppRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDataFromAppRsp> _instance;
} _GetDataFromAppRsp_default_instance_;
class SetScreenshotIntervalReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetScreenshotIntervalReq> _instance;
} _SetScreenshotIntervalReq_default_instance_;
class EnableFloatingWindowReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnableFloatingWindowReq> _instance;
} _EnableFloatingWindowReq_default_instance_;
class GetScreenInfoReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetScreenInfoReq> _instance;
} _GetScreenInfoReq_default_instance_;
class GetScreenInfoRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetScreenInfoRsp> _instance;
} _GetScreenInfoRsp_default_instance_;
class GetLMKThresholdReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLMKThresholdReq> _instance;
} _GetLMKThresholdReq_default_instance_;
class GetLMKThresholdRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLMKThresholdRsp> _instance;
} _GetLMKThresholdRsp_default_instance_;
class CheckOverlayPermissionReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckOverlayPermissionReq> _instance;
} _CheckOverlayPermissionReq_default_instance_;
class CheckOverlayPermissionRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckOverlayPermissionRsp> _instance;
} _CheckOverlayPermissionRsp_default_instance_;
class AppHelloReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppHelloReq> _instance;
} _AppHelloReq_default_instance_;
class AppHelloRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppHelloRsp> _instance;
} _AppHelloRsp_default_instance_;
class ProfileIOSNtfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileIOSNtf> _instance;
} _ProfileIOSNtf_default_instance_;
class iOSFrameTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<iOSFrameTime> _instance;
} _iOSFrameTime_default_instance_;
class iOSFrameRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<iOSFrameRecord> _instance;
} _iOSFrameRecord_default_instance_;
class iOSMemoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<iOSMemory> _instance;
} _iOSMemory_default_instance_;
class iOSGpuUsageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<iOSGpuUsage> _instance;
} _iOSGpuUsage_default_instance_;
class iOSContextSwitchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<iOSContextSwitch> _instance;
} _iOSContextSwitch_default_instance_;
class iOSWakeupsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<iOSWakeups> _instance;
} _iOSWakeups_default_instance_;
class iOSEnergyUsageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<iOSEnergyUsage> _instance;
} _iOSEnergyUsage_default_instance_;
}  // namespace perfcat
static void InitDefaultsscc_info_AppClosedNTF_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_AppClosedNTF_default_instance_;
    new (ptr) ::perfcat::AppClosedNTF();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::AppClosedNTF::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppClosedNTF_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppClosedNTF_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_AppHelloReq_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_AppHelloReq_default_instance_;
    new (ptr) ::perfcat::AppHelloReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::AppHelloReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppHelloReq_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppHelloReq_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_AppHelloRsp_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_AppHelloRsp_default_instance_;
    new (ptr) ::perfcat::AppHelloRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::AppHelloRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppHelloRsp_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppHelloRsp_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_AppInfo_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_AppInfo_default_instance_;
    new (ptr) ::perfcat::AppInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::AppInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppInfo_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppInfo_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_CheckDeviceReq_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_CheckDeviceReq_default_instance_;
    new (ptr) ::perfcat::CheckDeviceReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::CheckDeviceReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckDeviceReq_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CheckDeviceReq_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_CheckDeviceRsp_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_CheckDeviceRsp_default_instance_;
    new (ptr) ::perfcat::CheckDeviceRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::CheckDeviceRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckDeviceRsp_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CheckDeviceRsp_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_CheckOverlayPermissionReq_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_CheckOverlayPermissionReq_default_instance_;
    new (ptr) ::perfcat::CheckOverlayPermissionReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::CheckOverlayPermissionReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckOverlayPermissionReq_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CheckOverlayPermissionReq_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_CheckOverlayPermissionRsp_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_CheckOverlayPermissionRsp_default_instance_;
    new (ptr) ::perfcat::CheckOverlayPermissionRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::CheckOverlayPermissionRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckOverlayPermissionRsp_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CheckOverlayPermissionRsp_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_CoreUsage_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_CoreUsage_default_instance_;
    new (ptr) ::perfcat::CoreUsage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::CoreUsage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CoreUsage_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CoreUsage_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_CpuFreq_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_CpuFreq_default_instance_;
    new (ptr) ::perfcat::CpuFreq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::CpuFreq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CpuFreq_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CpuFreq_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_CpuUsage_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_CpuUsage_default_instance_;
    new (ptr) ::perfcat::CpuUsage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::CpuUsage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CpuUsage_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CpuUsage_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_EmptyRsp_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_EmptyRsp_default_instance_;
    new (ptr) ::perfcat::EmptyRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::EmptyRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EmptyRsp_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EmptyRsp_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_EnableFloatingWindowReq_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_EnableFloatingWindowReq_default_instance_;
    new (ptr) ::perfcat::EnableFloatingWindowReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::EnableFloatingWindowReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnableFloatingWindowReq_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EnableFloatingWindowReq_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_ExecuteShellCommandReq_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_ExecuteShellCommandReq_default_instance_;
    new (ptr) ::perfcat::ExecuteShellCommandReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::ExecuteShellCommandReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExecuteShellCommandReq_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExecuteShellCommandReq_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_ExecuteShellCommandRsp_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_ExecuteShellCommandRsp_default_instance_;
    new (ptr) ::perfcat::ExecuteShellCommandRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::ExecuteShellCommandRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExecuteShellCommandRsp_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExecuteShellCommandRsp_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_FPS_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_FPS_default_instance_;
    new (ptr) ::perfcat::FPS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::FPS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FPS_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FPS_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_FrameTime_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_FrameTime_default_instance_;
    new (ptr) ::perfcat::FrameTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::FrameTime::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrameTime_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FrameTime_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_GetAppInfoReq_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_GetAppInfoReq_default_instance_;
    new (ptr) ::perfcat::GetAppInfoReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::GetAppInfoReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAppInfoReq_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetAppInfoReq_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_GetAppInfoRsp_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_GetAppInfoRsp_default_instance_;
    new (ptr) ::perfcat::GetAppInfoRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::GetAppInfoRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetAppInfoRsp_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetAppInfoRsp_perfcat_2eproto}, {
      &scc_info_AppInfo_perfcat_2eproto.base,}};

static void InitDefaultsscc_info_GetBatteryInfoReq_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_GetBatteryInfoReq_default_instance_;
    new (ptr) ::perfcat::GetBatteryInfoReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::GetBatteryInfoReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetBatteryInfoReq_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetBatteryInfoReq_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_GetBatteryInfoRsp_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_GetBatteryInfoRsp_default_instance_;
    new (ptr) ::perfcat::GetBatteryInfoRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::GetBatteryInfoRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetBatteryInfoRsp_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetBatteryInfoRsp_perfcat_2eproto}, {
      &scc_info_Power_perfcat_2eproto.base,}};

static void InitDefaultsscc_info_GetCpuMaxFreqReq_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_GetCpuMaxFreqReq_default_instance_;
    new (ptr) ::perfcat::GetCpuMaxFreqReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::GetCpuMaxFreqReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetCpuMaxFreqReq_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetCpuMaxFreqReq_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_GetCpuMaxFreqRsp_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_GetCpuMaxFreqRsp_default_instance_;
    new (ptr) ::perfcat::GetCpuMaxFreqRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::GetCpuMaxFreqRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetCpuMaxFreqRsp_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetCpuMaxFreqRsp_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_GetDataFromAppReq_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_GetDataFromAppReq_default_instance_;
    new (ptr) ::perfcat::GetDataFromAppReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::GetDataFromAppReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetDataFromAppReq_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetDataFromAppReq_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_GetDataFromAppRsp_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_GetDataFromAppRsp_default_instance_;
    new (ptr) ::perfcat::GetDataFromAppRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::GetDataFromAppRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetDataFromAppRsp_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetDataFromAppRsp_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_GetLMKThresholdReq_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_GetLMKThresholdReq_default_instance_;
    new (ptr) ::perfcat::GetLMKThresholdReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::GetLMKThresholdReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetLMKThresholdReq_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetLMKThresholdReq_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_GetLMKThresholdRsp_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_GetLMKThresholdRsp_default_instance_;
    new (ptr) ::perfcat::GetLMKThresholdRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::GetLMKThresholdRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetLMKThresholdRsp_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetLMKThresholdRsp_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_GetMemoryUsageReq_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_GetMemoryUsageReq_default_instance_;
    new (ptr) ::perfcat::GetMemoryUsageReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::GetMemoryUsageReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetMemoryUsageReq_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetMemoryUsageReq_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_GetMemoryUsageRsp_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_GetMemoryUsageRsp_default_instance_;
    new (ptr) ::perfcat::GetMemoryUsageRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::GetMemoryUsageRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetMemoryUsageRsp_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetMemoryUsageRsp_perfcat_2eproto}, {
      &scc_info_Memory_perfcat_2eproto.base,}};

static void InitDefaultsscc_info_GetScreenInfoReq_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_GetScreenInfoReq_default_instance_;
    new (ptr) ::perfcat::GetScreenInfoReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::GetScreenInfoReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetScreenInfoReq_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetScreenInfoReq_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_GetScreenInfoRsp_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_GetScreenInfoRsp_default_instance_;
    new (ptr) ::perfcat::GetScreenInfoRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::GetScreenInfoRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetScreenInfoRsp_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetScreenInfoRsp_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_GpuFreq_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_GpuFreq_default_instance_;
    new (ptr) ::perfcat::GpuFreq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::GpuFreq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GpuFreq_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GpuFreq_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_GpuUsage_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_GpuUsage_default_instance_;
    new (ptr) ::perfcat::GpuUsage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::GpuUsage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GpuUsage_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GpuUsage_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_HelloReq_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_HelloReq_default_instance_;
    new (ptr) ::perfcat::HelloReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::HelloReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HelloReq_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HelloReq_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_Memory_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_Memory_default_instance_;
    new (ptr) ::perfcat::Memory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::Memory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Memory_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Memory_perfcat_2eproto}, {
      &scc_info_MemoryDetail_perfcat_2eproto.base,}};

static void InitDefaultsscc_info_MemoryDetail_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_MemoryDetail_default_instance_;
    new (ptr) ::perfcat::MemoryDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::MemoryDetail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemoryDetail_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MemoryDetail_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_Network_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_Network_default_instance_;
    new (ptr) ::perfcat::Network();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::Network::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Network_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Network_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_PerfcatAppProtocol_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_PerfcatAppProtocol_default_instance_;
    new (ptr) ::perfcat::PerfcatAppProtocol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::PerfcatAppProtocol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_PerfcatAppProtocol_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, 0, InitDefaultsscc_info_PerfcatAppProtocol_perfcat_2eproto}, {
      &scc_info_GetAppInfoReq_perfcat_2eproto.base,
      &scc_info_GetAppInfoRsp_perfcat_2eproto.base,
      &scc_info_GetScreenInfoReq_perfcat_2eproto.base,
      &scc_info_GetScreenInfoRsp_perfcat_2eproto.base,
      &scc_info_GetLMKThresholdReq_perfcat_2eproto.base,
      &scc_info_GetLMKThresholdRsp_perfcat_2eproto.base,
      &scc_info_CheckOverlayPermissionReq_perfcat_2eproto.base,
      &scc_info_CheckOverlayPermissionRsp_perfcat_2eproto.base,
      &scc_info_AppHelloReq_perfcat_2eproto.base,
      &scc_info_AppHelloRsp_perfcat_2eproto.base,}};

static void InitDefaultsscc_info_PerfcatServerProtocol_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_PerfcatServerProtocol_default_instance_;
    new (ptr) ::perfcat::PerfcatServerProtocol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::PerfcatServerProtocol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<35> scc_info_PerfcatServerProtocol_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 35, 0, InitDefaultsscc_info_PerfcatServerProtocol_perfcat_2eproto}, {
      &scc_info_ProfileReq_perfcat_2eproto.base,
      &scc_info_ProfileRsp_perfcat_2eproto.base,
      &scc_info_GetMemoryUsageReq_perfcat_2eproto.base,
      &scc_info_GetMemoryUsageRsp_perfcat_2eproto.base,
      &scc_info_StopProfileReq_perfcat_2eproto.base,
      &scc_info_StopProfileRsp_perfcat_2eproto.base,
      &scc_info_CheckDeviceReq_perfcat_2eproto.base,
      &scc_info_CheckDeviceRsp_perfcat_2eproto.base,
      &scc_info_ProfileNtf_perfcat_2eproto.base,
      &scc_info_GetCpuMaxFreqReq_perfcat_2eproto.base,
      &scc_info_GetCpuMaxFreqRsp_perfcat_2eproto.base,
      &scc_info_ToggleInterestingFiledNTF_perfcat_2eproto.base,
      &scc_info_ProfileStartedNTF_perfcat_2eproto.base,
      &scc_info_ProfileStoppedNTF_perfcat_2eproto.base,
      &scc_info_ProcessNotFoundNTF_perfcat_2eproto.base,
      &scc_info_ProcessFoundNTF_perfcat_2eproto.base,
      &scc_info_GetBatteryInfoReq_perfcat_2eproto.base,
      &scc_info_GetBatteryInfoRsp_perfcat_2eproto.base,
      &scc_info_AppClosedNTF_perfcat_2eproto.base,
      &scc_info_ProfileNTFACK_perfcat_2eproto.base,
      &scc_info_PrepareWifiProfileNTF_perfcat_2eproto.base,
      &scc_info_GetAppInfoReq_perfcat_2eproto.base,
      &scc_info_GetAppInfoRsp_perfcat_2eproto.base,
      &scc_info_EmptyRsp_perfcat_2eproto.base,
      &scc_info_HelloReq_perfcat_2eproto.base,
      &scc_info_ExecuteShellCommandReq_perfcat_2eproto.base,
      &scc_info_ExecuteShellCommandRsp_perfcat_2eproto.base,
      &scc_info_RegisterAppReq_perfcat_2eproto.base,
      &scc_info_ResumeProfileReq_perfcat_2eproto.base,
      &scc_info_ResumeProfileRsp_perfcat_2eproto.base,
      &scc_info_GetDataFromAppReq_perfcat_2eproto.base,
      &scc_info_GetDataFromAppRsp_perfcat_2eproto.base,
      &scc_info_SetScreenshotIntervalReq_perfcat_2eproto.base,
      &scc_info_EnableFloatingWindowReq_perfcat_2eproto.base,
      &scc_info_ProfileIOSNtf_perfcat_2eproto.base,}};

static void InitDefaultsscc_info_Power_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_Power_default_instance_;
    new (ptr) ::perfcat::Power();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::Power::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Power_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Power_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_PrepareWifiProfileNTF_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_PrepareWifiProfileNTF_default_instance_;
    new (ptr) ::perfcat::PrepareWifiProfileNTF();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::PrepareWifiProfileNTF::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrepareWifiProfileNTF_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PrepareWifiProfileNTF_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_ProcessFoundNTF_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_ProcessFoundNTF_default_instance_;
    new (ptr) ::perfcat::ProcessFoundNTF();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::ProcessFoundNTF::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessFoundNTF_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProcessFoundNTF_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_ProcessNotFoundNTF_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_ProcessNotFoundNTF_default_instance_;
    new (ptr) ::perfcat::ProcessNotFoundNTF();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::ProcessNotFoundNTF::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProcessNotFoundNTF_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProcessNotFoundNTF_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_ProfileApp_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_ProfileApp_default_instance_;
    new (ptr) ::perfcat::ProfileApp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::ProfileApp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProfileApp_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ProfileApp_perfcat_2eproto}, {
      &scc_info_ProfileAppInfo_perfcat_2eproto.base,
      &scc_info_ProfileAppPidName_perfcat_2eproto.base,}};

static void InitDefaultsscc_info_ProfileAppInfo_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_ProfileAppInfo_default_instance_;
    new (ptr) ::perfcat::ProfileAppInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::ProfileAppInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileAppInfo_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProfileAppInfo_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_ProfileAppPidName_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_ProfileAppPidName_default_instance_;
    new (ptr) ::perfcat::ProfileAppPidName();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::ProfileAppPidName::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileAppPidName_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProfileAppPidName_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_ProfileIOSNtf_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_ProfileIOSNtf_default_instance_;
    new (ptr) ::perfcat::ProfileIOSNtf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::ProfileIOSNtf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_ProfileIOSNtf_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 11, 0, InitDefaultsscc_info_ProfileIOSNtf_perfcat_2eproto}, {
      &scc_info_Screenshot_perfcat_2eproto.base,
      &scc_info_FPS_perfcat_2eproto.base,
      &scc_info_iOSFrameTime_perfcat_2eproto.base,
      &scc_info_CpuUsage_perfcat_2eproto.base,
      &scc_info_iOSMemory_perfcat_2eproto.base,
      &scc_info_iOSGpuUsage_perfcat_2eproto.base,
      &scc_info_Network_perfcat_2eproto.base,
      &scc_info_Power_perfcat_2eproto.base,
      &scc_info_iOSContextSwitch_perfcat_2eproto.base,
      &scc_info_iOSWakeups_perfcat_2eproto.base,
      &scc_info_iOSEnergyUsage_perfcat_2eproto.base,}};

static void InitDefaultsscc_info_ProfileNTFACK_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_ProfileNTFACK_default_instance_;
    new (ptr) ::perfcat::ProfileNTFACK();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::ProfileNTFACK::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileNTFACK_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProfileNTFACK_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_ProfileNtf_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_ProfileNtf_default_instance_;
    new (ptr) ::perfcat::ProfileNtf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::ProfileNtf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<13> scc_info_ProfileNtf_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 13, 0, InitDefaultsscc_info_ProfileNtf_perfcat_2eproto}, {
      &scc_info_CpuUsage_perfcat_2eproto.base,
      &scc_info_CpuFreq_perfcat_2eproto.base,
      &scc_info_GpuUsage_perfcat_2eproto.base,
      &scc_info_GpuFreq_perfcat_2eproto.base,
      &scc_info_FPS_perfcat_2eproto.base,
      &scc_info_Screenshot_perfcat_2eproto.base,
      &scc_info_Memory_perfcat_2eproto.base,
      &scc_info_Network_perfcat_2eproto.base,
      &scc_info_Power_perfcat_2eproto.base,
      &scc_info_Temp_perfcat_2eproto.base,
      &scc_info_FrameTime_perfcat_2eproto.base,
      &scc_info_CoreUsage_perfcat_2eproto.base,
      &scc_info_VirtualMemory_perfcat_2eproto.base,}};

static void InitDefaultsscc_info_ProfileReq_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_ProfileReq_default_instance_;
    new (ptr) ::perfcat::ProfileReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::ProfileReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProfileReq_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProfileReq_perfcat_2eproto}, {
      &scc_info_ProfileApp_perfcat_2eproto.base,}};

static void InitDefaultsscc_info_ProfileRsp_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_ProfileRsp_default_instance_;
    new (ptr) ::perfcat::ProfileRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::ProfileRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileRsp_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProfileRsp_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_ProfileStartedNTF_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_ProfileStartedNTF_default_instance_;
    new (ptr) ::perfcat::ProfileStartedNTF();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::ProfileStartedNTF::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileStartedNTF_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProfileStartedNTF_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_ProfileStoppedNTF_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_ProfileStoppedNTF_default_instance_;
    new (ptr) ::perfcat::ProfileStoppedNTF();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::ProfileStoppedNTF::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileStoppedNTF_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProfileStoppedNTF_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_RegisterAppReq_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_RegisterAppReq_default_instance_;
    new (ptr) ::perfcat::RegisterAppReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::RegisterAppReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterAppReq_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegisterAppReq_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_ResumeProfileReq_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_ResumeProfileReq_default_instance_;
    new (ptr) ::perfcat::ResumeProfileReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::ResumeProfileReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResumeProfileReq_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResumeProfileReq_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_ResumeProfileRsp_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_ResumeProfileRsp_default_instance_;
    new (ptr) ::perfcat::ResumeProfileRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::ResumeProfileRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResumeProfileRsp_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResumeProfileRsp_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_Screenshot_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_Screenshot_default_instance_;
    new (ptr) ::perfcat::Screenshot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::Screenshot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Screenshot_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Screenshot_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_SetScreenshotIntervalReq_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_SetScreenshotIntervalReq_default_instance_;
    new (ptr) ::perfcat::SetScreenshotIntervalReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::SetScreenshotIntervalReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetScreenshotIntervalReq_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetScreenshotIntervalReq_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_StopProfileReq_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_StopProfileReq_default_instance_;
    new (ptr) ::perfcat::StopProfileReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::StopProfileReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopProfileReq_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopProfileReq_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_StopProfileRsp_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_StopProfileRsp_default_instance_;
    new (ptr) ::perfcat::StopProfileRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::StopProfileRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopProfileRsp_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopProfileRsp_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_Temp_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_Temp_default_instance_;
    new (ptr) ::perfcat::Temp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::Temp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Temp_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Temp_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_ToggleInterestingFiledNTF_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_ToggleInterestingFiledNTF_default_instance_;
    new (ptr) ::perfcat::ToggleInterestingFiledNTF();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::ToggleInterestingFiledNTF::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ToggleInterestingFiledNTF_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ToggleInterestingFiledNTF_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_VirtualMemory_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_VirtualMemory_default_instance_;
    new (ptr) ::perfcat::VirtualMemory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::VirtualMemory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VirtualMemory_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VirtualMemory_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_iOSContextSwitch_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_iOSContextSwitch_default_instance_;
    new (ptr) ::perfcat::iOSContextSwitch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::iOSContextSwitch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_iOSContextSwitch_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_iOSContextSwitch_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_iOSEnergyUsage_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_iOSEnergyUsage_default_instance_;
    new (ptr) ::perfcat::iOSEnergyUsage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::iOSEnergyUsage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_iOSEnergyUsage_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_iOSEnergyUsage_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_iOSFrameRecord_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_iOSFrameRecord_default_instance_;
    new (ptr) ::perfcat::iOSFrameRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::iOSFrameRecord::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_iOSFrameRecord_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_iOSFrameRecord_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_iOSFrameTime_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_iOSFrameTime_default_instance_;
    new (ptr) ::perfcat::iOSFrameTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::iOSFrameTime::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_iOSFrameTime_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_iOSFrameTime_perfcat_2eproto}, {
      &scc_info_iOSFrameRecord_perfcat_2eproto.base,}};

static void InitDefaultsscc_info_iOSGpuUsage_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_iOSGpuUsage_default_instance_;
    new (ptr) ::perfcat::iOSGpuUsage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::iOSGpuUsage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_iOSGpuUsage_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_iOSGpuUsage_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_iOSMemory_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_iOSMemory_default_instance_;
    new (ptr) ::perfcat::iOSMemory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::iOSMemory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_iOSMemory_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_iOSMemory_perfcat_2eproto}, {}};

static void InitDefaultsscc_info_iOSWakeups_perfcat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::perfcat::_iOSWakeups_default_instance_;
    new (ptr) ::perfcat::iOSWakeups();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::perfcat::iOSWakeups::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_iOSWakeups_perfcat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_iOSWakeups_perfcat_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_perfcat_2eproto[70];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_perfcat_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_perfcat_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_perfcat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::PerfcatAppProtocol, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::perfcat::PerfcatAppProtocol, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::perfcat::PerfcatAppProtocolDefaultTypeInternal, getappinforeq_),
  offsetof(::perfcat::PerfcatAppProtocolDefaultTypeInternal, getappinforsp_),
  offsetof(::perfcat::PerfcatAppProtocolDefaultTypeInternal, getscreeninforeq_),
  offsetof(::perfcat::PerfcatAppProtocolDefaultTypeInternal, getscreeninforsp_),
  offsetof(::perfcat::PerfcatAppProtocolDefaultTypeInternal, getlmkthresholdreq_),
  offsetof(::perfcat::PerfcatAppProtocolDefaultTypeInternal, getlmkthresholdrsp_),
  offsetof(::perfcat::PerfcatAppProtocolDefaultTypeInternal, checkoverlaypermissionreq_),
  offsetof(::perfcat::PerfcatAppProtocolDefaultTypeInternal, checkoverlaypermissionrsp_),
  offsetof(::perfcat::PerfcatAppProtocolDefaultTypeInternal, apphelloreq_),
  offsetof(::perfcat::PerfcatAppProtocolDefaultTypeInternal, apphellorsp_),
  PROTOBUF_FIELD_OFFSET(::perfcat::PerfcatAppProtocol, protocol_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::PerfcatServerProtocol, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::perfcat::PerfcatServerProtocol, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::perfcat::PerfcatServerProtocolDefaultTypeInternal, profilereq_),
  offsetof(::perfcat::PerfcatServerProtocolDefaultTypeInternal, profilersp_),
  offsetof(::perfcat::PerfcatServerProtocolDefaultTypeInternal, getmemoryusagereq_),
  offsetof(::perfcat::PerfcatServerProtocolDefaultTypeInternal, getmemoryusagersp_),
  offsetof(::perfcat::PerfcatServerProtocolDefaultTypeInternal, stopprofilereq_),
  offsetof(::perfcat::PerfcatServerProtocolDefaultTypeInternal, stopprofilersp_),
  offsetof(::perfcat::PerfcatServerProtocolDefaultTypeInternal, checkdevicereq_),
  offsetof(::perfcat::PerfcatServerProtocolDefaultTypeInternal, checkdevicersp_),
  offsetof(::perfcat::PerfcatServerProtocolDefaultTypeInternal, profilentf_),
  offsetof(::perfcat::PerfcatServerProtocolDefaultTypeInternal, getcpumaxfreqreq_),
  offsetof(::perfcat::PerfcatServerProtocolDefaultTypeInternal, getcpumaxfreqrsp_),
  offsetof(::perfcat::PerfcatServerProtocolDefaultTypeInternal, toggleinterestingfiledntf_),
  offsetof(::perfcat::PerfcatServerProtocolDefaultTypeInternal, profilestartedntf_),
  offsetof(::perfcat::PerfcatServerProtocolDefaultTypeInternal, profilestoppedntf_),
  offsetof(::perfcat::PerfcatServerProtocolDefaultTypeInternal, processnotfoundntf_),
  offsetof(::perfcat::PerfcatServerProtocolDefaultTypeInternal, processfoundntf_),
  offsetof(::perfcat::PerfcatServerProtocolDefaultTypeInternal, getbatteryinforeq_),
  offsetof(::perfcat::PerfcatServerProtocolDefaultTypeInternal, getbatteryinforsp_),
  offsetof(::perfcat::PerfcatServerProtocolDefaultTypeInternal, appclosedntf_),
  offsetof(::perfcat::PerfcatServerProtocolDefaultTypeInternal, profilentfack_),
  offsetof(::perfcat::PerfcatServerProtocolDefaultTypeInternal, preparewifiprofilentf_),
  offsetof(::perfcat::PerfcatServerProtocolDefaultTypeInternal, getappinforeq_),
  offsetof(::perfcat::PerfcatServerProtocolDefaultTypeInternal, getappinforsp_),
  offsetof(::perfcat::PerfcatServerProtocolDefaultTypeInternal, emptyrsp_),
  offsetof(::perfcat::PerfcatServerProtocolDefaultTypeInternal, helloreq_),
  offsetof(::perfcat::PerfcatServerProtocolDefaultTypeInternal, executeshellcommandreq_),
  offsetof(::perfcat::PerfcatServerProtocolDefaultTypeInternal, executeshellcommandrsp_),
  offsetof(::perfcat::PerfcatServerProtocolDefaultTypeInternal, registerappreq_),
  offsetof(::perfcat::PerfcatServerProtocolDefaultTypeInternal, resumeprofilereq_),
  offsetof(::perfcat::PerfcatServerProtocolDefaultTypeInternal, resumeprofilersp_),
  offsetof(::perfcat::PerfcatServerProtocolDefaultTypeInternal, getdatafromappreq_),
  offsetof(::perfcat::PerfcatServerProtocolDefaultTypeInternal, getdatafromapprsp_),
  offsetof(::perfcat::PerfcatServerProtocolDefaultTypeInternal, setscreenshotintervalreq_),
  offsetof(::perfcat::PerfcatServerProtocolDefaultTypeInternal, enablefloatingwindowreq_),
  offsetof(::perfcat::PerfcatServerProtocolDefaultTypeInternal, profileiosntf_),
  PROTOBUF_FIELD_OFFSET(::perfcat::PerfcatServerProtocol, protocol_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileReq, e2_),
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileReq, datatypes_),
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileReq, profileapp_),
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileReq, isusb_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileApp, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileApp, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::perfcat::ProfileAppDefaultTypeInternal, appinfo_),
  offsetof(::perfcat::ProfileAppDefaultTypeInternal, pidname_),
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileApp, target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileAppPidName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileAppPidName, pid_),
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileAppPidName, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileAppInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileAppInfo, processname_),
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileAppInfo, userid_),
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileAppInfo, packagename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileRsp, timestamp_),
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileRsp, errorcode_),
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileRsp, sessionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::GetMemoryUsageReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::GetMemoryUsageReq, pid_),
  PROTOBUF_FIELD_OFFSET(::perfcat::GetMemoryUsageReq, unknow_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::GetMemoryUsageRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::GetMemoryUsageRsp, memory_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::StopProfileReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::StopProfileRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::CheckDeviceReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::CheckDeviceRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::CheckDeviceRsp, e2_),
  PROTOBUF_FIELD_OFFSET(::perfcat::CheckDeviceRsp, gpufreq_),
  PROTOBUF_FIELD_OFFSET(::perfcat::CheckDeviceRsp, gpuusage_),
  PROTOBUF_FIELD_OFFSET(::perfcat::CheckDeviceRsp, sw0_),
  PROTOBUF_FIELD_OFFSET(::perfcat::CheckDeviceRsp, cputemperature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileNtf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileNtf, index_),
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileNtf, cpuusage_),
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileNtf, cpufreq_),
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileNtf, gpuusage_),
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileNtf, gpufreq_),
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileNtf, fps_),
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileNtf, screenshot_),
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileNtf, memory_),
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileNtf, network_),
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileNtf, power_),
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileNtf, timestamp_),
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileNtf, temp_),
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileNtf, frametime_),
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileNtf, coreusage_),
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileNtf, virtualmemory_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::Screenshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::Screenshot, data_),
  PROTOBUF_FIELD_OFFSET(::perfcat::Screenshot, orientation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::VirtualMemory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::VirtualMemory, virtualmemory_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::Power, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::Power, current_),
  PROTOBUF_FIELD_OFFSET(::perfcat::Power, voltage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::Temp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::Temp, temp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::CpuUsage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::CpuUsage, appusage_),
  PROTOBUF_FIELD_OFFSET(::perfcat::CpuUsage, totalusage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::FPS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::FPS, fps_),
  PROTOBUF_FIELD_OFFSET(::perfcat::FPS, jank_),
  PROTOBUF_FIELD_OFFSET(::perfcat::FPS, bigjank_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::CoreUsage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::CoreUsage, coreusage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::FrameTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::FrameTime, frametime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::Network, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::Network, upload_),
  PROTOBUF_FIELD_OFFSET(::perfcat::Network, download_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::Memory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::Memory, pss_),
  PROTOBUF_FIELD_OFFSET(::perfcat::Memory, swap_),
  PROTOBUF_FIELD_OFFSET(::perfcat::Memory, virtualmemory_),
  PROTOBUF_FIELD_OFFSET(::perfcat::Memory, memorydetail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::MemoryDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::MemoryDetail, gfx_),
  PROTOBUF_FIELD_OFFSET(::perfcat::MemoryDetail, gl_),
  PROTOBUF_FIELD_OFFSET(::perfcat::MemoryDetail, nativepss_),
  PROTOBUF_FIELD_OFFSET(::perfcat::MemoryDetail, unknown_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::GpuFreq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::GpuFreq, gpufreq_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::GpuUsage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::GpuUsage, gpuusage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::CpuFreq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::CpuFreq, cpufreq_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::GetCpuMaxFreqReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::GetCpuMaxFreqRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::GetCpuMaxFreqRsp, minfreq_),
  PROTOBUF_FIELD_OFFSET(::perfcat::GetCpuMaxFreqRsp, maxfreq_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::ToggleInterestingFiledNTF, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::ToggleInterestingFiledNTF, datatype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileStartedNTF, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileStoppedNTF, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::ProcessNotFoundNTF, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::ProcessFoundNTF, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::GetBatteryInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::GetBatteryInfoRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::GetBatteryInfoRsp, power_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::AppClosedNTF, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileNTFACK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileNTFACK, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::PrepareWifiProfileNTF, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::GetAppInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::GetAppInfoRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::GetAppInfoRsp, appinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::AppInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::AppInfo, packagename_),
  PROTOBUF_FIELD_OFFSET(::perfcat::AppInfo, version_),
  PROTOBUF_FIELD_OFFSET(::perfcat::AppInfo, icon_),
  PROTOBUF_FIELD_OFFSET(::perfcat::AppInfo, label_),
  PROTOBUF_FIELD_OFFSET(::perfcat::AppInfo, pid_),
  PROTOBUF_FIELD_OFFSET(::perfcat::AppInfo, processlist_),
  PROTOBUF_FIELD_OFFSET(::perfcat::AppInfo, issystemapp_),
  PROTOBUF_FIELD_OFFSET(::perfcat::AppInfo, isdebuggable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::EmptyRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::HelloReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::ExecuteShellCommandReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::ExecuteShellCommandRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::RegisterAppReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::ResumeProfileReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::ResumeProfileRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::GetDataFromAppReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::GetDataFromAppRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::SetScreenshotIntervalReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::EnableFloatingWindowReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::GetScreenInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::GetScreenInfoRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::GetScreenInfoRsp, screensize_),
  PROTOBUF_FIELD_OFFSET(::perfcat::GetScreenInfoRsp, width_),
  PROTOBUF_FIELD_OFFSET(::perfcat::GetScreenInfoRsp, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::GetLMKThresholdReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::GetLMKThresholdRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::GetLMKThresholdRsp, memorythreshold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::CheckOverlayPermissionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::CheckOverlayPermissionRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::CheckOverlayPermissionRsp, overlaypermission_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::AppHelloReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::AppHelloRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::AppHelloRsp, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileIOSNtf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileIOSNtf, index_),
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileIOSNtf, timestamp_),
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileIOSNtf, screenshot_),
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileIOSNtf, fps_),
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileIOSNtf, frametime_),
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileIOSNtf, cpuusage_),
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileIOSNtf, memory_),
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileIOSNtf, gpuusage_),
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileIOSNtf, network_),
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileIOSNtf, power_),
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileIOSNtf, contextswitch_),
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileIOSNtf, wakeups_),
  PROTOBUF_FIELD_OFFSET(::perfcat::ProfileIOSNtf, energyusage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::iOSFrameTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::iOSFrameTime, frametime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::iOSFrameRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::iOSFrameRecord, timestamp_),
  PROTOBUF_FIELD_OFFSET(::perfcat::iOSFrameRecord, frametime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::iOSMemory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::iOSMemory, memory_),
  PROTOBUF_FIELD_OFFSET(::perfcat::iOSMemory, virtualmemory_),
  PROTOBUF_FIELD_OFFSET(::perfcat::iOSMemory, realmemory_),
  PROTOBUF_FIELD_OFFSET(::perfcat::iOSMemory, xcodememory_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::iOSGpuUsage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::iOSGpuUsage, gpurender_),
  PROTOBUF_FIELD_OFFSET(::perfcat::iOSGpuUsage, gputiler_),
  PROTOBUF_FIELD_OFFSET(::perfcat::iOSGpuUsage, gpudevice_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::iOSContextSwitch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::iOSContextSwitch, contextswitch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::iOSWakeups, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::iOSWakeups, wakeups_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::perfcat::iOSEnergyUsage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::perfcat::iOSEnergyUsage, cpuenergy_),
  PROTOBUF_FIELD_OFFSET(::perfcat::iOSEnergyUsage, gpuenergy_),
  PROTOBUF_FIELD_OFFSET(::perfcat::iOSEnergyUsage, networkenergy_),
  PROTOBUF_FIELD_OFFSET(::perfcat::iOSEnergyUsage, locationenergy_),
  PROTOBUF_FIELD_OFFSET(::perfcat::iOSEnergyUsage, displayenergy_),
  PROTOBUF_FIELD_OFFSET(::perfcat::iOSEnergyUsage, overheadenergy_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::perfcat::PerfcatAppProtocol)},
  { 16, -1, sizeof(::perfcat::PerfcatServerProtocol)},
  { 57, -1, sizeof(::perfcat::ProfileReq)},
  { 66, -1, sizeof(::perfcat::ProfileApp)},
  { 74, -1, sizeof(::perfcat::ProfileAppPidName)},
  { 81, -1, sizeof(::perfcat::ProfileAppInfo)},
  { 89, -1, sizeof(::perfcat::ProfileRsp)},
  { 97, -1, sizeof(::perfcat::GetMemoryUsageReq)},
  { 104, -1, sizeof(::perfcat::GetMemoryUsageRsp)},
  { 110, -1, sizeof(::perfcat::StopProfileReq)},
  { 115, -1, sizeof(::perfcat::StopProfileRsp)},
  { 120, -1, sizeof(::perfcat::CheckDeviceReq)},
  { 125, -1, sizeof(::perfcat::CheckDeviceRsp)},
  { 135, -1, sizeof(::perfcat::ProfileNtf)},
  { 155, -1, sizeof(::perfcat::Screenshot)},
  { 162, -1, sizeof(::perfcat::VirtualMemory)},
  { 168, -1, sizeof(::perfcat::Power)},
  { 175, -1, sizeof(::perfcat::Temp)},
  { 181, -1, sizeof(::perfcat::CpuUsage)},
  { 188, -1, sizeof(::perfcat::FPS)},
  { 196, -1, sizeof(::perfcat::CoreUsage)},
  { 202, -1, sizeof(::perfcat::FrameTime)},
  { 208, -1, sizeof(::perfcat::Network)},
  { 215, -1, sizeof(::perfcat::Memory)},
  { 224, -1, sizeof(::perfcat::MemoryDetail)},
  { 233, -1, sizeof(::perfcat::GpuFreq)},
  { 239, -1, sizeof(::perfcat::GpuUsage)},
  { 245, -1, sizeof(::perfcat::CpuFreq)},
  { 251, -1, sizeof(::perfcat::GetCpuMaxFreqReq)},
  { 256, -1, sizeof(::perfcat::GetCpuMaxFreqRsp)},
  { 263, -1, sizeof(::perfcat::ToggleInterestingFiledNTF)},
  { 269, -1, sizeof(::perfcat::ProfileStartedNTF)},
  { 274, -1, sizeof(::perfcat::ProfileStoppedNTF)},
  { 279, -1, sizeof(::perfcat::ProcessNotFoundNTF)},
  { 284, -1, sizeof(::perfcat::ProcessFoundNTF)},
  { 289, -1, sizeof(::perfcat::GetBatteryInfoReq)},
  { 294, -1, sizeof(::perfcat::GetBatteryInfoRsp)},
  { 300, -1, sizeof(::perfcat::AppClosedNTF)},
  { 305, -1, sizeof(::perfcat::ProfileNTFACK)},
  { 311, -1, sizeof(::perfcat::PrepareWifiProfileNTF)},
  { 316, -1, sizeof(::perfcat::GetAppInfoReq)},
  { 321, -1, sizeof(::perfcat::GetAppInfoRsp)},
  { 327, -1, sizeof(::perfcat::AppInfo)},
  { 340, -1, sizeof(::perfcat::EmptyRsp)},
  { 345, -1, sizeof(::perfcat::HelloReq)},
  { 350, -1, sizeof(::perfcat::ExecuteShellCommandReq)},
  { 355, -1, sizeof(::perfcat::ExecuteShellCommandRsp)},
  { 360, -1, sizeof(::perfcat::RegisterAppReq)},
  { 365, -1, sizeof(::perfcat::ResumeProfileReq)},
  { 370, -1, sizeof(::perfcat::ResumeProfileRsp)},
  { 375, -1, sizeof(::perfcat::GetDataFromAppReq)},
  { 380, -1, sizeof(::perfcat::GetDataFromAppRsp)},
  { 385, -1, sizeof(::perfcat::SetScreenshotIntervalReq)},
  { 390, -1, sizeof(::perfcat::EnableFloatingWindowReq)},
  { 395, -1, sizeof(::perfcat::GetScreenInfoReq)},
  { 400, -1, sizeof(::perfcat::GetScreenInfoRsp)},
  { 408, -1, sizeof(::perfcat::GetLMKThresholdReq)},
  { 413, -1, sizeof(::perfcat::GetLMKThresholdRsp)},
  { 419, -1, sizeof(::perfcat::CheckOverlayPermissionReq)},
  { 424, -1, sizeof(::perfcat::CheckOverlayPermissionRsp)},
  { 430, -1, sizeof(::perfcat::AppHelloReq)},
  { 435, -1, sizeof(::perfcat::AppHelloRsp)},
  { 441, -1, sizeof(::perfcat::ProfileIOSNtf)},
  { 459, -1, sizeof(::perfcat::iOSFrameTime)},
  { 465, -1, sizeof(::perfcat::iOSFrameRecord)},
  { 472, -1, sizeof(::perfcat::iOSMemory)},
  { 481, -1, sizeof(::perfcat::iOSGpuUsage)},
  { 489, -1, sizeof(::perfcat::iOSContextSwitch)},
  { 495, -1, sizeof(::perfcat::iOSWakeups)},
  { 501, -1, sizeof(::perfcat::iOSEnergyUsage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_PerfcatAppProtocol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_PerfcatServerProtocol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_ProfileReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_ProfileApp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_ProfileAppPidName_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_ProfileAppInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_ProfileRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_GetMemoryUsageReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_GetMemoryUsageRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_StopProfileReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_StopProfileRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_CheckDeviceReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_CheckDeviceRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_ProfileNtf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_Screenshot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_VirtualMemory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_Power_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_Temp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_CpuUsage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_FPS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_CoreUsage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_FrameTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_Network_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_Memory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_MemoryDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_GpuFreq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_GpuUsage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_CpuFreq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_GetCpuMaxFreqReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_GetCpuMaxFreqRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_ToggleInterestingFiledNTF_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_ProfileStartedNTF_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_ProfileStoppedNTF_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_ProcessNotFoundNTF_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_ProcessFoundNTF_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_GetBatteryInfoReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_GetBatteryInfoRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_AppClosedNTF_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_ProfileNTFACK_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_PrepareWifiProfileNTF_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_GetAppInfoReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_GetAppInfoRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_AppInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_EmptyRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_HelloReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_ExecuteShellCommandReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_ExecuteShellCommandRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_RegisterAppReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_ResumeProfileReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_ResumeProfileRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_GetDataFromAppReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_GetDataFromAppRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_SetScreenshotIntervalReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_EnableFloatingWindowReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_GetScreenInfoReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_GetScreenInfoRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_GetLMKThresholdReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_GetLMKThresholdRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_CheckOverlayPermissionReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_CheckOverlayPermissionRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_AppHelloReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_AppHelloRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_ProfileIOSNtf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_iOSFrameTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_iOSFrameRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_iOSMemory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_iOSGpuUsage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_iOSContextSwitch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_iOSWakeups_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::perfcat::_iOSEnergyUsage_default_instance_),
};

const char descriptor_table_protodef_perfcat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rperfcat.proto\022\007perfcat\"\322\004\n\022PerfcatAppP"
  "rotocol\022/\n\rgetAppInfoReq\030\001 \001(\0132\026.perfcat"
  ".GetAppInfoReqH\000\022/\n\rgetAppInfoRsp\030\002 \001(\0132"
  "\026.perfcat.GetAppInfoRspH\000\0225\n\020getScreenIn"
  "foReq\030\003 \001(\0132\031.perfcat.GetScreenInfoReqH\000"
  "\0225\n\020getScreenInfoRsp\030\004 \001(\0132\031.perfcat.Get"
  "ScreenInfoRspH\000\0229\n\022getLMKThresholdReq\030\005 "
  "\001(\0132\033.perfcat.GetLMKThresholdReqH\000\0229\n\022ge"
  "tLMKThresholdRsp\030\006 \001(\0132\033.perfcat.GetLMKT"
  "hresholdRspH\000\022G\n\031checkOverlayPermissionR"
  "eq\030\007 \001(\0132\".perfcat.CheckOverlayPermissio"
  "nReqH\000\022G\n\031checkOverlayPermissionRsp\030\010 \001("
  "\0132\".perfcat.CheckOverlayPermissionRspH\000\022"
  "+\n\013AppHelloReq\030\t \001(\0132\024.perfcat.AppHelloR"
  "eqH\000\022+\n\013appHelloRsp\030\n \001(\0132\024.perfcat.AppH"
  "elloRspH\000B\n\n\010protocol\"\225\017\n\025PerfcatServerP"
  "rotocol\022)\n\nprofileReq\030\001 \001(\0132\023.perfcat.Pr"
  "ofileReqH\000\022)\n\nprofileRsp\030\002 \001(\0132\023.perfcat"
  ".ProfileRspH\000\0227\n\021getMemoryUsageReq\030\003 \001(\013"
  "2\032.perfcat.GetMemoryUsageReqH\000\0227\n\021getMem"
  "oryUsageRsp\030\004 \001(\0132\032.perfcat.GetMemoryUsa"
  "geRspH\000\0221\n\016stopProfileReq\030\005 \001(\0132\027.perfca"
  "t.StopProfileReqH\000\0221\n\016stopProfileRsp\030\006 \001"
  "(\0132\027.perfcat.StopProfileRspH\000\0221\n\016checkDe"
  "viceReq\030\007 \001(\0132\027.perfcat.CheckDeviceReqH\000"
  "\0221\n\016checkDeviceRsp\030\010 \001(\0132\027.perfcat.Check"
  "DeviceRspH\000\022)\n\nprofileNtf\030\t \001(\0132\023.perfca"
  "t.ProfileNtfH\000\0225\n\020getCpuMaxFreqReq\030\n \001(\013"
  "2\031.perfcat.GetCpuMaxFreqReqH\000\0225\n\020getCpuM"
  "axFreqRsp\030\013 \001(\0132\031.perfcat.GetCpuMaxFreqR"
  "spH\000\022G\n\031toggleInterestingFiledNTF\030\014 \001(\0132"
  "\".perfcat.ToggleInterestingFiledNTFH\000\0227\n"
  "\021profileStartedNTF\030\r \001(\0132\032.perfcat.Profi"
  "leStartedNTFH\000\0227\n\021profileStoppedNTF\030\016 \001("
  "\0132\032.perfcat.ProfileStoppedNTFH\000\0229\n\022proce"
  "ssNotFoundNTF\030\017 \001(\0132\033.perfcat.ProcessNot"
  "FoundNTFH\000\0223\n\017processFoundNTF\030\020 \001(\0132\030.pe"
  "rfcat.ProcessFoundNTFH\000\0227\n\021getBatteryInf"
  "oReq\030\021 \001(\0132\032.perfcat.GetBatteryInfoReqH\000"
  "\0227\n\021getBatteryInfoRsp\030\022 \001(\0132\032.perfcat.Ge"
  "tBatteryInfoRspH\000\022-\n\014appClosedNTF\030\023 \001(\0132"
  "\025.perfcat.AppClosedNTFH\000\022/\n\rprofileNTFAC"
  "K\030\024 \001(\0132\026.perfcat.ProfileNTFACKH\000\022\?\n\025pre"
  "pareWifiProfileNTF\030\025 \001(\0132\036.perfcat.Prepa"
  "reWifiProfileNTFH\000\022/\n\rgetAppInfoReq\030\026 \001("
  "\0132\026.perfcat.GetAppInfoReqH\000\022/\n\rgetAppInf"
  "oRsp\030\027 \001(\0132\026.perfcat.GetAppInfoRspH\000\022%\n\010"
  "emptyRsp\030\030 \001(\0132\021.perfcat.EmptyRspH\000\022%\n\010h"
  "elloReq\030\031 \001(\0132\021.perfcat.HelloReqH\000\022A\n\026ex"
  "ecuteShellCommandReq\030\032 \001(\0132\037.perfcat.Exe"
  "cuteShellCommandReqH\000\022A\n\026executeShellCom"
  "mandRsp\030\033 \001(\0132\037.perfcat.ExecuteShellComm"
  "andRspH\000\0221\n\016registerAppReq\030\034 \001(\0132\027.perfc"
  "at.RegisterAppReqH\000\0225\n\020resumeProfileReq\030"
  "\035 \001(\0132\031.perfcat.ResumeProfileReqH\000\0225\n\020re"
  "sumeProfileRsp\030\036 \001(\0132\031.perfcat.ResumePro"
  "fileRspH\000\0227\n\021getDataFromAppReq\030\037 \001(\0132\032.p"
  "erfcat.GetDataFromAppReqH\000\0227\n\021getDataFro"
  "mAppRsp\030  \001(\0132\032.perfcat.GetDataFromAppRs"
  "pH\000\022E\n\030setScreenshotIntervalReq\030! \001(\0132!."
  "perfcat.SetScreenshotIntervalReqH\000\022C\n\027en"
  "ableFloatingWindowReq\030\" \001(\0132 .perfcat.En"
  "ableFloatingWindowReqH\000\0220\n\rprofileIOSNtf"
  "\030\221N \001(\0132\026.perfcat.ProfileIOSNtfH\000B\n\n\010pro"
  "tocol\"\272\003\n\nProfileReq\022\n\n\002e2\030\001 \001(\005\022/\n\tdata"
  "Types\030\002 \003(\0162\034.perfcat.ProfileReq.DataTyp"
  "e\022\'\n\nprofileApp\030\003 \001(\0132\023.perfcat.ProfileA"
  "pp\022\r\n\005isUSB\030\004 \001(\010\"\266\002\n\010DataType\022\017\n\013DATAID"
  "_NONE\020\000\022\r\n\tCPU_USAGE\020\001\022\022\n\016CORE_FREQUENCY"
  "\020\002\022\r\n\tGPU_USAGE\020\003\022\014\n\010GPU_FREQ\020\004\022\007\n\003FPS\020\005"
  "\022\021\n\rNETWORK_USAGE\020\006\022\017\n\013SCREEN_SHOT\020\010\022\n\n\006"
  "MEMORY\020\t\022\013\n\007BATTERY\020\n\022\023\n\017CPU_TEMPERATURE"
  "\020\013\022\016\n\nFRAME_TIME\020\014\022\031\n\025ANDROID_MEMORY_DET"
  "AIL\020\r\022\016\n\nCORE_USAGE\020\016\022\016\n\nCTX_SWITCH\020\017\022\n\n"
  "\006WAKEUP\020\020\022\021\n\rIOS_GPU_USAGE\020\021\022\024\n\020IOS_ENER"
  "GY_USAGE\020\022\"q\n\nProfileApp\022*\n\007appInfo\030\001 \001("
  "\0132\027.perfcat.ProfileAppInfoH\000\022-\n\007pidName\030"
  "\002 \001(\0132\032.perfcat.ProfileAppPidNameH\000B\010\n\006t"
  "arget\".\n\021ProfileAppPidName\022\013\n\003pid\030\001 \001(\005\022"
  "\014\n\004name\030\002 \001(\t\"J\n\016ProfileAppInfo\022\023\n\013proce"
  "ssName\030\001 \001(\t\022\016\n\006userId\030\002 \001(\005\022\023\n\013packageN"
  "ame\030\003 \001(\t\"E\n\nProfileRsp\022\021\n\ttimestamp\030\001 \001"
  "(\003\022\021\n\terrorCode\030\002 \001(\005\022\021\n\tsessionId\030\003 \001(\005"
  "\"0\n\021GetMemoryUsageReq\022\013\n\003pid\030\001 \001(\005\022\016\n\006un"
  "know\030\002 \001(\003\"4\n\021GetMemoryUsageRsp\022\037\n\006memor"
  "y\030\001 \001(\0132\017.perfcat.Memory\"\020\n\016StopProfileR"
  "eq\"\020\n\016StopProfileRsp\"\020\n\016CheckDeviceReq\"d"
  "\n\016CheckDeviceRsp\022\n\n\002e2\030\001 \001(\010\022\017\n\007gpuFreq\030"
  "\002 \001(\010\022\020\n\010gpuUsage\030\003 \001(\010\022\013\n\003sw0\030\004 \001(\010\022\026\n\016"
  "cpuTemperature\030\005 \001(\010\"\377\003\n\nProfileNtf\022\r\n\005i"
  "ndex\030\001 \001(\005\022#\n\010cpuUsage\030\002 \001(\0132\021.perfcat.C"
  "puUsage\022!\n\007cpuFreq\030\003 \001(\0132\020.perfcat.CpuFr"
  "eq\022#\n\010gpuUsage\030\004 \001(\0132\021.perfcat.GpuUsage\022"
  "!\n\007gpuFreq\030\005 \001(\0132\020.perfcat.GpuFreq\022\031\n\003fp"
  "s\030\006 \001(\0132\014.perfcat.FPS\022\'\n\nscreenshot\030\t \001("
  "\0132\023.perfcat.Screenshot\022\037\n\006memory\030\n \001(\0132\017"
  ".perfcat.Memory\022!\n\007network\030\013 \001(\0132\020.perfc"
  "at.Network\022\035\n\005power\030\014 \001(\0132\016.perfcat.Powe"
  "r\022\021\n\ttimestamp\030\r \001(\003\022\033\n\004temp\030\016 \001(\0132\r.per"
  "fcat.Temp\022%\n\tframeTime\030\017 \001(\0132\022.perfcat.F"
  "rameTime\022%\n\tcoreUsage\030\020 \001(\0132\022.perfcat.Co"
  "reUsage\022-\n\rvirtualMemory\030\021 \001(\0132\026.perfcat"
  ".VirtualMemory\"\240\001\n\nScreenshot\022\014\n\004data\030\001 "
  "\001(\014\0224\n\013orientation\030\003 \001(\0162\037.perfcat.Scree"
  "nshot.Orientation\"N\n\013Orientation\022\010\n\004none"
  "\020\000\022\022\n\016landscape_left\020\001\022\023\n\017landscape_righ"
  "t\020\002\022\014\n\010portrait\020\003\"&\n\rVirtualMemory\022\025\n\rvi"
  "rtualMemory\030\001 \001(\005\")\n\005Power\022\017\n\007current\030\001 "
  "\001(\005\022\017\n\007voltage\030\002 \001(\005\"\024\n\004Temp\022\014\n\004temp\030\001 \001"
  "(\005\"0\n\010CpuUsage\022\020\n\010appUsage\030\001 \001(\002\022\022\n\ntota"
  "lUsage\030\002 \001(\002\"1\n\003FPS\022\013\n\003fps\030\001 \001(\002\022\014\n\004jank"
  "\030\003 \001(\005\022\017\n\007bigJank\030\004 \001(\005\"\036\n\tCoreUsage\022\021\n\t"
  "coreUsage\030\001 \003(\002\"\036\n\tFrameTime\022\021\n\tframeTim"
  "e\030\001 \003(\003\"+\n\007Network\022\016\n\006upload\030\001 \001(\005\022\020\n\010do"
  "wnload\030\002 \001(\005\"g\n\006Memory\022\013\n\003pss\030\001 \001(\005\022\014\n\004s"
  "wap\030\002 \001(\005\022\025\n\rvirtualMemory\030\003 \001(\005\022+\n\014memo"
  "ryDetail\030\005 \001(\0132\025.perfcat.MemoryDetail\"K\n"
  "\014MemoryDetail\022\013\n\003gfx\030\001 \001(\005\022\n\n\002gl\030\002 \001(\005\022\021"
  "\n\tnativePss\030\003 \001(\005\022\017\n\007unknown\030\004 \001(\005\"\032\n\007Gp"
  "uFreq\022\017\n\007gpuFreq\030\001 \001(\005\"\034\n\010GpuUsage\022\020\n\010gp"
  "uUsage\030\001 \001(\002\"\032\n\007CpuFreq\022\017\n\007cpuFreq\030\001 \003(\005"
  "\"\022\n\020GetCpuMaxFreqReq\"4\n\020GetCpuMaxFreqRsp"
  "\022\017\n\007minFreq\030\001 \003(\005\022\017\n\007maxFreq\030\002 \003(\005\"-\n\031To"
  "ggleInterestingFiledNTF\022\020\n\010dataType\030\001 \001("
  "\005\"\023\n\021ProfileStartedNTF\"\023\n\021ProfileStopped"
  "NTF\"\024\n\022ProcessNotFoundNTF\"\021\n\017ProcessFoun"
  "dNTF\"\023\n\021GetBatteryInfoReq\"2\n\021GetBatteryI"
  "nfoRsp\022\035\n\005power\030\001 \001(\0132\016.perfcat.Power\"\016\n"
  "\014AppClosedNTF\"\036\n\rProfileNTFACK\022\r\n\005index\030"
  "\001 \001(\005\"\027\n\025PrepareWifiProfileNTF\"\017\n\rGetApp"
  "InfoReq\"2\n\rGetAppInfoRsp\022!\n\007appInfo\030\001 \003("
  "\0132\020.perfcat.AppInfo\"\231\001\n\007AppInfo\022\023\n\013packa"
  "geName\030\001 \001(\t\022\017\n\007version\030\002 \001(\t\022\014\n\004icon\030\003 "
  "\001(\014\022\r\n\005label\030\004 \001(\t\022\013\n\003pid\030\005 \001(\005\022\023\n\013proce"
  "ssList\030\006 \003(\t\022\023\n\013isSystemApp\030\007 \001(\010\022\024\n\014isD"
  "ebuggable\030\010 \001(\010\"\n\n\010EmptyRsp\"\n\n\010HelloReq\""
  "\030\n\026ExecuteShellCommandReq\"\030\n\026ExecuteShel"
  "lCommandRsp\"\020\n\016RegisterAppReq\"\022\n\020ResumeP"
  "rofileReq\"\022\n\020ResumeProfileRsp\"\023\n\021GetData"
  "FromAppReq\"\023\n\021GetDataFromAppRsp\"\032\n\030SetSc"
  "reenshotIntervalReq\"\031\n\027EnableFloatingWin"
  "dowReq\"\022\n\020GetScreenInfoReq\"E\n\020GetScreenI"
  "nfoRsp\022\022\n\nscreenSize\030\001 \001(\002\022\r\n\005width\030\002 \001("
  "\005\022\016\n\006height\030\003 \001(\005\"\024\n\022GetLMKThresholdReq\""
  "-\n\022GetLMKThresholdRsp\022\027\n\017memoryThreshold"
  "\030\001 \001(\005\"\033\n\031CheckOverlayPermissionReq\"6\n\031C"
  "heckOverlayPermissionRsp\022\031\n\021overLayPermi"
  "ssion\030\001 \001(\010\"\r\n\013AppHelloReq\"\036\n\013AppHelloRs"
  "p\022\017\n\007message\030\001 \001(\t\"\330\003\n\rProfileIOSNtf\022\r\n\005"
  "index\030\001 \001(\005\022\021\n\ttimestamp\030\002 \001(\003\022\'\n\nscreen"
  "shot\030\003 \001(\0132\023.perfcat.Screenshot\022\031\n\003fps\030\004"
  " \001(\0132\014.perfcat.FPS\022(\n\tframeTime\030\005 \001(\0132\025."
  "perfcat.iOSFrameTime\022#\n\010cpuUsage\030\006 \001(\0132\021"
  ".perfcat.CpuUsage\022\"\n\006memory\030\007 \001(\0132\022.perf"
  "cat.iOSMemory\022&\n\010gpuUsage\030\010 \001(\0132\024.perfca"
  "t.iOSGpuUsage\022!\n\007network\030\t \001(\0132\020.perfcat"
  ".Network\022\035\n\005power\030\n \001(\0132\016.perfcat.Power\022"
  "0\n\rcontextSwitch\030\013 \001(\0132\031.perfcat.iOSCont"
  "extSwitch\022$\n\007wakeups\030\014 \001(\0132\023.perfcat.iOS"
  "Wakeups\022,\n\013energyUsage\030\r \001(\0132\027.perfcat.i"
  "OSEnergyUsage\":\n\014iOSFrameTime\022*\n\tframeTi"
  "me\030\001 \003(\0132\027.perfcat.iOSFrameRecord\"6\n\016iOS"
  "FrameRecord\022\021\n\ttimestamp\030\001 \001(\003\022\021\n\tframeT"
  "ime\030\002 \001(\002\"[\n\tiOSMemory\022\016\n\006memory\030\001 \001(\005\022\025"
  "\n\rvirtualMemory\030\002 \001(\005\022\022\n\nrealMemory\030\003 \001("
  "\005\022\023\n\013xcodeMemory\030\004 \001(\005\"E\n\013iOSGpuUsage\022\021\n"
  "\tgpuRender\030\001 \001(\002\022\020\n\010gpuTiler\030\002 \001(\002\022\021\n\tgp"
  "uDevice\030\003 \001(\002\")\n\020iOSContextSwitch\022\025\n\rcon"
  "textSwitch\030\001 \001(\005\"\035\n\niOSWakeups\022\017\n\007wakeup"
  "s\030\001 \001(\005\"\224\001\n\016iOSEnergyUsage\022\021\n\tcpuEnergy\030"
  "\001 \001(\005\022\021\n\tgpuEnergy\030\002 \001(\005\022\025\n\rnetworkEnerg"
  "y\030\003 \001(\005\022\026\n\016locationEnergy\030\004 \001(\005\022\025\n\rdispl"
  "ayEnergy\030\005 \001(\005\022\026\n\016overheadEnergy\030\006 \001(\005B+"
  "\n\031cn.testplus.perfcat.protoB\014PerfcatProt"
  "oP\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_perfcat_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_perfcat_2eproto_sccs[70] = {
  &scc_info_AppClosedNTF_perfcat_2eproto.base,
  &scc_info_AppHelloReq_perfcat_2eproto.base,
  &scc_info_AppHelloRsp_perfcat_2eproto.base,
  &scc_info_AppInfo_perfcat_2eproto.base,
  &scc_info_CheckDeviceReq_perfcat_2eproto.base,
  &scc_info_CheckDeviceRsp_perfcat_2eproto.base,
  &scc_info_CheckOverlayPermissionReq_perfcat_2eproto.base,
  &scc_info_CheckOverlayPermissionRsp_perfcat_2eproto.base,
  &scc_info_CoreUsage_perfcat_2eproto.base,
  &scc_info_CpuFreq_perfcat_2eproto.base,
  &scc_info_CpuUsage_perfcat_2eproto.base,
  &scc_info_EmptyRsp_perfcat_2eproto.base,
  &scc_info_EnableFloatingWindowReq_perfcat_2eproto.base,
  &scc_info_ExecuteShellCommandReq_perfcat_2eproto.base,
  &scc_info_ExecuteShellCommandRsp_perfcat_2eproto.base,
  &scc_info_FPS_perfcat_2eproto.base,
  &scc_info_FrameTime_perfcat_2eproto.base,
  &scc_info_GetAppInfoReq_perfcat_2eproto.base,
  &scc_info_GetAppInfoRsp_perfcat_2eproto.base,
  &scc_info_GetBatteryInfoReq_perfcat_2eproto.base,
  &scc_info_GetBatteryInfoRsp_perfcat_2eproto.base,
  &scc_info_GetCpuMaxFreqReq_perfcat_2eproto.base,
  &scc_info_GetCpuMaxFreqRsp_perfcat_2eproto.base,
  &scc_info_GetDataFromAppReq_perfcat_2eproto.base,
  &scc_info_GetDataFromAppRsp_perfcat_2eproto.base,
  &scc_info_GetLMKThresholdReq_perfcat_2eproto.base,
  &scc_info_GetLMKThresholdRsp_perfcat_2eproto.base,
  &scc_info_GetMemoryUsageReq_perfcat_2eproto.base,
  &scc_info_GetMemoryUsageRsp_perfcat_2eproto.base,
  &scc_info_GetScreenInfoReq_perfcat_2eproto.base,
  &scc_info_GetScreenInfoRsp_perfcat_2eproto.base,
  &scc_info_GpuFreq_perfcat_2eproto.base,
  &scc_info_GpuUsage_perfcat_2eproto.base,
  &scc_info_HelloReq_perfcat_2eproto.base,
  &scc_info_Memory_perfcat_2eproto.base,
  &scc_info_MemoryDetail_perfcat_2eproto.base,
  &scc_info_Network_perfcat_2eproto.base,
  &scc_info_PerfcatAppProtocol_perfcat_2eproto.base,
  &scc_info_PerfcatServerProtocol_perfcat_2eproto.base,
  &scc_info_Power_perfcat_2eproto.base,
  &scc_info_PrepareWifiProfileNTF_perfcat_2eproto.base,
  &scc_info_ProcessFoundNTF_perfcat_2eproto.base,
  &scc_info_ProcessNotFoundNTF_perfcat_2eproto.base,
  &scc_info_ProfileApp_perfcat_2eproto.base,
  &scc_info_ProfileAppInfo_perfcat_2eproto.base,
  &scc_info_ProfileAppPidName_perfcat_2eproto.base,
  &scc_info_ProfileIOSNtf_perfcat_2eproto.base,
  &scc_info_ProfileNTFACK_perfcat_2eproto.base,
  &scc_info_ProfileNtf_perfcat_2eproto.base,
  &scc_info_ProfileReq_perfcat_2eproto.base,
  &scc_info_ProfileRsp_perfcat_2eproto.base,
  &scc_info_ProfileStartedNTF_perfcat_2eproto.base,
  &scc_info_ProfileStoppedNTF_perfcat_2eproto.base,
  &scc_info_RegisterAppReq_perfcat_2eproto.base,
  &scc_info_ResumeProfileReq_perfcat_2eproto.base,
  &scc_info_ResumeProfileRsp_perfcat_2eproto.base,
  &scc_info_Screenshot_perfcat_2eproto.base,
  &scc_info_SetScreenshotIntervalReq_perfcat_2eproto.base,
  &scc_info_StopProfileReq_perfcat_2eproto.base,
  &scc_info_StopProfileRsp_perfcat_2eproto.base,
  &scc_info_Temp_perfcat_2eproto.base,
  &scc_info_ToggleInterestingFiledNTF_perfcat_2eproto.base,
  &scc_info_VirtualMemory_perfcat_2eproto.base,
  &scc_info_iOSContextSwitch_perfcat_2eproto.base,
  &scc_info_iOSEnergyUsage_perfcat_2eproto.base,
  &scc_info_iOSFrameRecord_perfcat_2eproto.base,
  &scc_info_iOSFrameTime_perfcat_2eproto.base,
  &scc_info_iOSGpuUsage_perfcat_2eproto.base,
  &scc_info_iOSMemory_perfcat_2eproto.base,
  &scc_info_iOSWakeups_perfcat_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_perfcat_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_perfcat_2eproto = {
  false, false, descriptor_table_protodef_perfcat_2eproto, "perfcat.proto", 6971,
  &descriptor_table_perfcat_2eproto_once, descriptor_table_perfcat_2eproto_sccs, descriptor_table_perfcat_2eproto_deps, 70, 0,
  schemas, file_default_instances, TableStruct_perfcat_2eproto::offsets,
  file_level_metadata_perfcat_2eproto, 70, file_level_enum_descriptors_perfcat_2eproto, file_level_service_descriptors_perfcat_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_perfcat_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_perfcat_2eproto)), true);
namespace perfcat {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProfileReq_DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_perfcat_2eproto);
  return file_level_enum_descriptors_perfcat_2eproto[0];
}
bool ProfileReq_DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ProfileReq_DataType ProfileReq::DATAID_NONE;
constexpr ProfileReq_DataType ProfileReq::CPU_USAGE;
constexpr ProfileReq_DataType ProfileReq::CORE_FREQUENCY;
constexpr ProfileReq_DataType ProfileReq::GPU_USAGE;
constexpr ProfileReq_DataType ProfileReq::GPU_FREQ;
constexpr ProfileReq_DataType ProfileReq::FPS;
constexpr ProfileReq_DataType ProfileReq::NETWORK_USAGE;
constexpr ProfileReq_DataType ProfileReq::SCREEN_SHOT;
constexpr ProfileReq_DataType ProfileReq::MEMORY;
constexpr ProfileReq_DataType ProfileReq::BATTERY;
constexpr ProfileReq_DataType ProfileReq::CPU_TEMPERATURE;
constexpr ProfileReq_DataType ProfileReq::FRAME_TIME;
constexpr ProfileReq_DataType ProfileReq::ANDROID_MEMORY_DETAIL;
constexpr ProfileReq_DataType ProfileReq::CORE_USAGE;
constexpr ProfileReq_DataType ProfileReq::CTX_SWITCH;
constexpr ProfileReq_DataType ProfileReq::WAKEUP;
constexpr ProfileReq_DataType ProfileReq::IOS_GPU_USAGE;
constexpr ProfileReq_DataType ProfileReq::IOS_ENERGY_USAGE;
constexpr ProfileReq_DataType ProfileReq::DataType_MIN;
constexpr ProfileReq_DataType ProfileReq::DataType_MAX;
constexpr int ProfileReq::DataType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Screenshot_Orientation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_perfcat_2eproto);
  return file_level_enum_descriptors_perfcat_2eproto[1];
}
bool Screenshot_Orientation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Screenshot_Orientation Screenshot::none;
constexpr Screenshot_Orientation Screenshot::landscape_left;
constexpr Screenshot_Orientation Screenshot::landscape_right;
constexpr Screenshot_Orientation Screenshot::portrait;
constexpr Screenshot_Orientation Screenshot::Orientation_MIN;
constexpr Screenshot_Orientation Screenshot::Orientation_MAX;
constexpr int Screenshot::Orientation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void PerfcatAppProtocol::InitAsDefaultInstance() {
  ::perfcat::_PerfcatAppProtocol_default_instance_.getappinforeq_ = const_cast< ::perfcat::GetAppInfoReq*>(
      ::perfcat::GetAppInfoReq::internal_default_instance());
  ::perfcat::_PerfcatAppProtocol_default_instance_.getappinforsp_ = const_cast< ::perfcat::GetAppInfoRsp*>(
      ::perfcat::GetAppInfoRsp::internal_default_instance());
  ::perfcat::_PerfcatAppProtocol_default_instance_.getscreeninforeq_ = const_cast< ::perfcat::GetScreenInfoReq*>(
      ::perfcat::GetScreenInfoReq::internal_default_instance());
  ::perfcat::_PerfcatAppProtocol_default_instance_.getscreeninforsp_ = const_cast< ::perfcat::GetScreenInfoRsp*>(
      ::perfcat::GetScreenInfoRsp::internal_default_instance());
  ::perfcat::_PerfcatAppProtocol_default_instance_.getlmkthresholdreq_ = const_cast< ::perfcat::GetLMKThresholdReq*>(
      ::perfcat::GetLMKThresholdReq::internal_default_instance());
  ::perfcat::_PerfcatAppProtocol_default_instance_.getlmkthresholdrsp_ = const_cast< ::perfcat::GetLMKThresholdRsp*>(
      ::perfcat::GetLMKThresholdRsp::internal_default_instance());
  ::perfcat::_PerfcatAppProtocol_default_instance_.checkoverlaypermissionreq_ = const_cast< ::perfcat::CheckOverlayPermissionReq*>(
      ::perfcat::CheckOverlayPermissionReq::internal_default_instance());
  ::perfcat::_PerfcatAppProtocol_default_instance_.checkoverlaypermissionrsp_ = const_cast< ::perfcat::CheckOverlayPermissionRsp*>(
      ::perfcat::CheckOverlayPermissionRsp::internal_default_instance());
  ::perfcat::_PerfcatAppProtocol_default_instance_.apphelloreq_ = const_cast< ::perfcat::AppHelloReq*>(
      ::perfcat::AppHelloReq::internal_default_instance());
  ::perfcat::_PerfcatAppProtocol_default_instance_.apphellorsp_ = const_cast< ::perfcat::AppHelloRsp*>(
      ::perfcat::AppHelloRsp::internal_default_instance());
}
class PerfcatAppProtocol::_Internal {
 public:
  static const ::perfcat::GetAppInfoReq& getappinforeq(const PerfcatAppProtocol* msg);
  static const ::perfcat::GetAppInfoRsp& getappinforsp(const PerfcatAppProtocol* msg);
  static const ::perfcat::GetScreenInfoReq& getscreeninforeq(const PerfcatAppProtocol* msg);
  static const ::perfcat::GetScreenInfoRsp& getscreeninforsp(const PerfcatAppProtocol* msg);
  static const ::perfcat::GetLMKThresholdReq& getlmkthresholdreq(const PerfcatAppProtocol* msg);
  static const ::perfcat::GetLMKThresholdRsp& getlmkthresholdrsp(const PerfcatAppProtocol* msg);
  static const ::perfcat::CheckOverlayPermissionReq& checkoverlaypermissionreq(const PerfcatAppProtocol* msg);
  static const ::perfcat::CheckOverlayPermissionRsp& checkoverlaypermissionrsp(const PerfcatAppProtocol* msg);
  static const ::perfcat::AppHelloReq& apphelloreq(const PerfcatAppProtocol* msg);
  static const ::perfcat::AppHelloRsp& apphellorsp(const PerfcatAppProtocol* msg);
};

const ::perfcat::GetAppInfoReq&
PerfcatAppProtocol::_Internal::getappinforeq(const PerfcatAppProtocol* msg) {
  return *msg->protocol_.getappinforeq_;
}
const ::perfcat::GetAppInfoRsp&
PerfcatAppProtocol::_Internal::getappinforsp(const PerfcatAppProtocol* msg) {
  return *msg->protocol_.getappinforsp_;
}
const ::perfcat::GetScreenInfoReq&
PerfcatAppProtocol::_Internal::getscreeninforeq(const PerfcatAppProtocol* msg) {
  return *msg->protocol_.getscreeninforeq_;
}
const ::perfcat::GetScreenInfoRsp&
PerfcatAppProtocol::_Internal::getscreeninforsp(const PerfcatAppProtocol* msg) {
  return *msg->protocol_.getscreeninforsp_;
}
const ::perfcat::GetLMKThresholdReq&
PerfcatAppProtocol::_Internal::getlmkthresholdreq(const PerfcatAppProtocol* msg) {
  return *msg->protocol_.getlmkthresholdreq_;
}
const ::perfcat::GetLMKThresholdRsp&
PerfcatAppProtocol::_Internal::getlmkthresholdrsp(const PerfcatAppProtocol* msg) {
  return *msg->protocol_.getlmkthresholdrsp_;
}
const ::perfcat::CheckOverlayPermissionReq&
PerfcatAppProtocol::_Internal::checkoverlaypermissionreq(const PerfcatAppProtocol* msg) {
  return *msg->protocol_.checkoverlaypermissionreq_;
}
const ::perfcat::CheckOverlayPermissionRsp&
PerfcatAppProtocol::_Internal::checkoverlaypermissionrsp(const PerfcatAppProtocol* msg) {
  return *msg->protocol_.checkoverlaypermissionrsp_;
}
const ::perfcat::AppHelloReq&
PerfcatAppProtocol::_Internal::apphelloreq(const PerfcatAppProtocol* msg) {
  return *msg->protocol_.apphelloreq_;
}
const ::perfcat::AppHelloRsp&
PerfcatAppProtocol::_Internal::apphellorsp(const PerfcatAppProtocol* msg) {
  return *msg->protocol_.apphellorsp_;
}
void PerfcatAppProtocol::set_allocated_getappinforeq(::perfcat::GetAppInfoReq* getappinforeq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (getappinforeq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getappinforeq);
    if (message_arena != submessage_arena) {
      getappinforeq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getappinforeq, submessage_arena);
    }
    set_has_getappinforeq();
    protocol_.getappinforeq_ = getappinforeq;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatAppProtocol.getAppInfoReq)
}
void PerfcatAppProtocol::set_allocated_getappinforsp(::perfcat::GetAppInfoRsp* getappinforsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (getappinforsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getappinforsp);
    if (message_arena != submessage_arena) {
      getappinforsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getappinforsp, submessage_arena);
    }
    set_has_getappinforsp();
    protocol_.getappinforsp_ = getappinforsp;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatAppProtocol.getAppInfoRsp)
}
void PerfcatAppProtocol::set_allocated_getscreeninforeq(::perfcat::GetScreenInfoReq* getscreeninforeq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (getscreeninforeq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getscreeninforeq);
    if (message_arena != submessage_arena) {
      getscreeninforeq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getscreeninforeq, submessage_arena);
    }
    set_has_getscreeninforeq();
    protocol_.getscreeninforeq_ = getscreeninforeq;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatAppProtocol.getScreenInfoReq)
}
void PerfcatAppProtocol::set_allocated_getscreeninforsp(::perfcat::GetScreenInfoRsp* getscreeninforsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (getscreeninforsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getscreeninforsp);
    if (message_arena != submessage_arena) {
      getscreeninforsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getscreeninforsp, submessage_arena);
    }
    set_has_getscreeninforsp();
    protocol_.getscreeninforsp_ = getscreeninforsp;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatAppProtocol.getScreenInfoRsp)
}
void PerfcatAppProtocol::set_allocated_getlmkthresholdreq(::perfcat::GetLMKThresholdReq* getlmkthresholdreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (getlmkthresholdreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getlmkthresholdreq);
    if (message_arena != submessage_arena) {
      getlmkthresholdreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getlmkthresholdreq, submessage_arena);
    }
    set_has_getlmkthresholdreq();
    protocol_.getlmkthresholdreq_ = getlmkthresholdreq;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatAppProtocol.getLMKThresholdReq)
}
void PerfcatAppProtocol::set_allocated_getlmkthresholdrsp(::perfcat::GetLMKThresholdRsp* getlmkthresholdrsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (getlmkthresholdrsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getlmkthresholdrsp);
    if (message_arena != submessage_arena) {
      getlmkthresholdrsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getlmkthresholdrsp, submessage_arena);
    }
    set_has_getlmkthresholdrsp();
    protocol_.getlmkthresholdrsp_ = getlmkthresholdrsp;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatAppProtocol.getLMKThresholdRsp)
}
void PerfcatAppProtocol::set_allocated_checkoverlaypermissionreq(::perfcat::CheckOverlayPermissionReq* checkoverlaypermissionreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (checkoverlaypermissionreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(checkoverlaypermissionreq);
    if (message_arena != submessage_arena) {
      checkoverlaypermissionreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, checkoverlaypermissionreq, submessage_arena);
    }
    set_has_checkoverlaypermissionreq();
    protocol_.checkoverlaypermissionreq_ = checkoverlaypermissionreq;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatAppProtocol.checkOverlayPermissionReq)
}
void PerfcatAppProtocol::set_allocated_checkoverlaypermissionrsp(::perfcat::CheckOverlayPermissionRsp* checkoverlaypermissionrsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (checkoverlaypermissionrsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(checkoverlaypermissionrsp);
    if (message_arena != submessage_arena) {
      checkoverlaypermissionrsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, checkoverlaypermissionrsp, submessage_arena);
    }
    set_has_checkoverlaypermissionrsp();
    protocol_.checkoverlaypermissionrsp_ = checkoverlaypermissionrsp;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatAppProtocol.checkOverlayPermissionRsp)
}
void PerfcatAppProtocol::set_allocated_apphelloreq(::perfcat::AppHelloReq* apphelloreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (apphelloreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(apphelloreq);
    if (message_arena != submessage_arena) {
      apphelloreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apphelloreq, submessage_arena);
    }
    set_has_apphelloreq();
    protocol_.apphelloreq_ = apphelloreq;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatAppProtocol.AppHelloReq)
}
void PerfcatAppProtocol::set_allocated_apphellorsp(::perfcat::AppHelloRsp* apphellorsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (apphellorsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(apphellorsp);
    if (message_arena != submessage_arena) {
      apphellorsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apphellorsp, submessage_arena);
    }
    set_has_apphellorsp();
    protocol_.apphellorsp_ = apphellorsp;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatAppProtocol.appHelloRsp)
}
PerfcatAppProtocol::PerfcatAppProtocol(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.PerfcatAppProtocol)
}
PerfcatAppProtocol::PerfcatAppProtocol(const PerfcatAppProtocol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_protocol();
  switch (from.protocol_case()) {
    case kGetAppInfoReq: {
      _internal_mutable_getappinforeq()->::perfcat::GetAppInfoReq::MergeFrom(from._internal_getappinforeq());
      break;
    }
    case kGetAppInfoRsp: {
      _internal_mutable_getappinforsp()->::perfcat::GetAppInfoRsp::MergeFrom(from._internal_getappinforsp());
      break;
    }
    case kGetScreenInfoReq: {
      _internal_mutable_getscreeninforeq()->::perfcat::GetScreenInfoReq::MergeFrom(from._internal_getscreeninforeq());
      break;
    }
    case kGetScreenInfoRsp: {
      _internal_mutable_getscreeninforsp()->::perfcat::GetScreenInfoRsp::MergeFrom(from._internal_getscreeninforsp());
      break;
    }
    case kGetLMKThresholdReq: {
      _internal_mutable_getlmkthresholdreq()->::perfcat::GetLMKThresholdReq::MergeFrom(from._internal_getlmkthresholdreq());
      break;
    }
    case kGetLMKThresholdRsp: {
      _internal_mutable_getlmkthresholdrsp()->::perfcat::GetLMKThresholdRsp::MergeFrom(from._internal_getlmkthresholdrsp());
      break;
    }
    case kCheckOverlayPermissionReq: {
      _internal_mutable_checkoverlaypermissionreq()->::perfcat::CheckOverlayPermissionReq::MergeFrom(from._internal_checkoverlaypermissionreq());
      break;
    }
    case kCheckOverlayPermissionRsp: {
      _internal_mutable_checkoverlaypermissionrsp()->::perfcat::CheckOverlayPermissionRsp::MergeFrom(from._internal_checkoverlaypermissionrsp());
      break;
    }
    case kAppHelloReq: {
      _internal_mutable_apphelloreq()->::perfcat::AppHelloReq::MergeFrom(from._internal_apphelloreq());
      break;
    }
    case kAppHelloRsp: {
      _internal_mutable_apphellorsp()->::perfcat::AppHelloRsp::MergeFrom(from._internal_apphellorsp());
      break;
    }
    case PROTOCOL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfcat.PerfcatAppProtocol)
}

void PerfcatAppProtocol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PerfcatAppProtocol_perfcat_2eproto.base);
  clear_has_protocol();
}

PerfcatAppProtocol::~PerfcatAppProtocol() {
  // @@protoc_insertion_point(destructor:perfcat.PerfcatAppProtocol)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PerfcatAppProtocol::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_protocol()) {
    clear_protocol();
  }
}

void PerfcatAppProtocol::ArenaDtor(void* object) {
  PerfcatAppProtocol* _this = reinterpret_cast< PerfcatAppProtocol* >(object);
  (void)_this;
}
void PerfcatAppProtocol::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PerfcatAppProtocol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerfcatAppProtocol& PerfcatAppProtocol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerfcatAppProtocol_perfcat_2eproto.base);
  return *internal_default_instance();
}


void PerfcatAppProtocol::clear_protocol() {
// @@protoc_insertion_point(one_of_clear_start:perfcat.PerfcatAppProtocol)
  switch (protocol_case()) {
    case kGetAppInfoReq: {
      if (GetArena() == nullptr) {
        delete protocol_.getappinforeq_;
      }
      break;
    }
    case kGetAppInfoRsp: {
      if (GetArena() == nullptr) {
        delete protocol_.getappinforsp_;
      }
      break;
    }
    case kGetScreenInfoReq: {
      if (GetArena() == nullptr) {
        delete protocol_.getscreeninforeq_;
      }
      break;
    }
    case kGetScreenInfoRsp: {
      if (GetArena() == nullptr) {
        delete protocol_.getscreeninforsp_;
      }
      break;
    }
    case kGetLMKThresholdReq: {
      if (GetArena() == nullptr) {
        delete protocol_.getlmkthresholdreq_;
      }
      break;
    }
    case kGetLMKThresholdRsp: {
      if (GetArena() == nullptr) {
        delete protocol_.getlmkthresholdrsp_;
      }
      break;
    }
    case kCheckOverlayPermissionReq: {
      if (GetArena() == nullptr) {
        delete protocol_.checkoverlaypermissionreq_;
      }
      break;
    }
    case kCheckOverlayPermissionRsp: {
      if (GetArena() == nullptr) {
        delete protocol_.checkoverlaypermissionrsp_;
      }
      break;
    }
    case kAppHelloReq: {
      if (GetArena() == nullptr) {
        delete protocol_.apphelloreq_;
      }
      break;
    }
    case kAppHelloRsp: {
      if (GetArena() == nullptr) {
        delete protocol_.apphellorsp_;
      }
      break;
    }
    case PROTOCOL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PROTOCOL_NOT_SET;
}


void PerfcatAppProtocol::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.PerfcatAppProtocol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_protocol();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerfcatAppProtocol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .perfcat.GetAppInfoReq getAppInfoReq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_getappinforeq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.GetAppInfoRsp getAppInfoRsp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_getappinforsp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.GetScreenInfoReq getScreenInfoReq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_getscreeninforeq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.GetScreenInfoRsp getScreenInfoRsp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_getscreeninforsp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.GetLMKThresholdReq getLMKThresholdReq = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_getlmkthresholdreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.GetLMKThresholdRsp getLMKThresholdRsp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_getlmkthresholdrsp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.CheckOverlayPermissionReq checkOverlayPermissionReq = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_checkoverlaypermissionreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.CheckOverlayPermissionRsp checkOverlayPermissionRsp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_checkoverlaypermissionrsp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.AppHelloReq AppHelloReq = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_apphelloreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.AppHelloRsp appHelloRsp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_apphellorsp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PerfcatAppProtocol::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.PerfcatAppProtocol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .perfcat.GetAppInfoReq getAppInfoReq = 1;
  if (_internal_has_getappinforeq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::getappinforeq(this), target, stream);
  }

  // .perfcat.GetAppInfoRsp getAppInfoRsp = 2;
  if (_internal_has_getappinforsp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::getappinforsp(this), target, stream);
  }

  // .perfcat.GetScreenInfoReq getScreenInfoReq = 3;
  if (_internal_has_getscreeninforeq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::getscreeninforeq(this), target, stream);
  }

  // .perfcat.GetScreenInfoRsp getScreenInfoRsp = 4;
  if (_internal_has_getscreeninforsp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::getscreeninforsp(this), target, stream);
  }

  // .perfcat.GetLMKThresholdReq getLMKThresholdReq = 5;
  if (_internal_has_getlmkthresholdreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::getlmkthresholdreq(this), target, stream);
  }

  // .perfcat.GetLMKThresholdRsp getLMKThresholdRsp = 6;
  if (_internal_has_getlmkthresholdrsp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::getlmkthresholdrsp(this), target, stream);
  }

  // .perfcat.CheckOverlayPermissionReq checkOverlayPermissionReq = 7;
  if (_internal_has_checkoverlaypermissionreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::checkoverlaypermissionreq(this), target, stream);
  }

  // .perfcat.CheckOverlayPermissionRsp checkOverlayPermissionRsp = 8;
  if (_internal_has_checkoverlaypermissionrsp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::checkoverlaypermissionrsp(this), target, stream);
  }

  // .perfcat.AppHelloReq AppHelloReq = 9;
  if (_internal_has_apphelloreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::apphelloreq(this), target, stream);
  }

  // .perfcat.AppHelloRsp appHelloRsp = 10;
  if (_internal_has_apphellorsp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::apphellorsp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.PerfcatAppProtocol)
  return target;
}

size_t PerfcatAppProtocol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.PerfcatAppProtocol)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (protocol_case()) {
    // .perfcat.GetAppInfoReq getAppInfoReq = 1;
    case kGetAppInfoReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.getappinforeq_);
      break;
    }
    // .perfcat.GetAppInfoRsp getAppInfoRsp = 2;
    case kGetAppInfoRsp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.getappinforsp_);
      break;
    }
    // .perfcat.GetScreenInfoReq getScreenInfoReq = 3;
    case kGetScreenInfoReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.getscreeninforeq_);
      break;
    }
    // .perfcat.GetScreenInfoRsp getScreenInfoRsp = 4;
    case kGetScreenInfoRsp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.getscreeninforsp_);
      break;
    }
    // .perfcat.GetLMKThresholdReq getLMKThresholdReq = 5;
    case kGetLMKThresholdReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.getlmkthresholdreq_);
      break;
    }
    // .perfcat.GetLMKThresholdRsp getLMKThresholdRsp = 6;
    case kGetLMKThresholdRsp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.getlmkthresholdrsp_);
      break;
    }
    // .perfcat.CheckOverlayPermissionReq checkOverlayPermissionReq = 7;
    case kCheckOverlayPermissionReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.checkoverlaypermissionreq_);
      break;
    }
    // .perfcat.CheckOverlayPermissionRsp checkOverlayPermissionRsp = 8;
    case kCheckOverlayPermissionRsp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.checkoverlaypermissionrsp_);
      break;
    }
    // .perfcat.AppHelloReq AppHelloReq = 9;
    case kAppHelloReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.apphelloreq_);
      break;
    }
    // .perfcat.AppHelloRsp appHelloRsp = 10;
    case kAppHelloRsp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.apphellorsp_);
      break;
    }
    case PROTOCOL_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfcatAppProtocol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.PerfcatAppProtocol)
  GOOGLE_DCHECK_NE(&from, this);
  const PerfcatAppProtocol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PerfcatAppProtocol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.PerfcatAppProtocol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.PerfcatAppProtocol)
    MergeFrom(*source);
  }
}

void PerfcatAppProtocol::MergeFrom(const PerfcatAppProtocol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.PerfcatAppProtocol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.protocol_case()) {
    case kGetAppInfoReq: {
      _internal_mutable_getappinforeq()->::perfcat::GetAppInfoReq::MergeFrom(from._internal_getappinforeq());
      break;
    }
    case kGetAppInfoRsp: {
      _internal_mutable_getappinforsp()->::perfcat::GetAppInfoRsp::MergeFrom(from._internal_getappinforsp());
      break;
    }
    case kGetScreenInfoReq: {
      _internal_mutable_getscreeninforeq()->::perfcat::GetScreenInfoReq::MergeFrom(from._internal_getscreeninforeq());
      break;
    }
    case kGetScreenInfoRsp: {
      _internal_mutable_getscreeninforsp()->::perfcat::GetScreenInfoRsp::MergeFrom(from._internal_getscreeninforsp());
      break;
    }
    case kGetLMKThresholdReq: {
      _internal_mutable_getlmkthresholdreq()->::perfcat::GetLMKThresholdReq::MergeFrom(from._internal_getlmkthresholdreq());
      break;
    }
    case kGetLMKThresholdRsp: {
      _internal_mutable_getlmkthresholdrsp()->::perfcat::GetLMKThresholdRsp::MergeFrom(from._internal_getlmkthresholdrsp());
      break;
    }
    case kCheckOverlayPermissionReq: {
      _internal_mutable_checkoverlaypermissionreq()->::perfcat::CheckOverlayPermissionReq::MergeFrom(from._internal_checkoverlaypermissionreq());
      break;
    }
    case kCheckOverlayPermissionRsp: {
      _internal_mutable_checkoverlaypermissionrsp()->::perfcat::CheckOverlayPermissionRsp::MergeFrom(from._internal_checkoverlaypermissionrsp());
      break;
    }
    case kAppHelloReq: {
      _internal_mutable_apphelloreq()->::perfcat::AppHelloReq::MergeFrom(from._internal_apphelloreq());
      break;
    }
    case kAppHelloRsp: {
      _internal_mutable_apphellorsp()->::perfcat::AppHelloRsp::MergeFrom(from._internal_apphellorsp());
      break;
    }
    case PROTOCOL_NOT_SET: {
      break;
    }
  }
}

void PerfcatAppProtocol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.PerfcatAppProtocol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerfcatAppProtocol::CopyFrom(const PerfcatAppProtocol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.PerfcatAppProtocol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfcatAppProtocol::IsInitialized() const {
  return true;
}

void PerfcatAppProtocol::InternalSwap(PerfcatAppProtocol* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(protocol_, other->protocol_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PerfcatAppProtocol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PerfcatServerProtocol::InitAsDefaultInstance() {
  ::perfcat::_PerfcatServerProtocol_default_instance_.profilereq_ = const_cast< ::perfcat::ProfileReq*>(
      ::perfcat::ProfileReq::internal_default_instance());
  ::perfcat::_PerfcatServerProtocol_default_instance_.profilersp_ = const_cast< ::perfcat::ProfileRsp*>(
      ::perfcat::ProfileRsp::internal_default_instance());
  ::perfcat::_PerfcatServerProtocol_default_instance_.getmemoryusagereq_ = const_cast< ::perfcat::GetMemoryUsageReq*>(
      ::perfcat::GetMemoryUsageReq::internal_default_instance());
  ::perfcat::_PerfcatServerProtocol_default_instance_.getmemoryusagersp_ = const_cast< ::perfcat::GetMemoryUsageRsp*>(
      ::perfcat::GetMemoryUsageRsp::internal_default_instance());
  ::perfcat::_PerfcatServerProtocol_default_instance_.stopprofilereq_ = const_cast< ::perfcat::StopProfileReq*>(
      ::perfcat::StopProfileReq::internal_default_instance());
  ::perfcat::_PerfcatServerProtocol_default_instance_.stopprofilersp_ = const_cast< ::perfcat::StopProfileRsp*>(
      ::perfcat::StopProfileRsp::internal_default_instance());
  ::perfcat::_PerfcatServerProtocol_default_instance_.checkdevicereq_ = const_cast< ::perfcat::CheckDeviceReq*>(
      ::perfcat::CheckDeviceReq::internal_default_instance());
  ::perfcat::_PerfcatServerProtocol_default_instance_.checkdevicersp_ = const_cast< ::perfcat::CheckDeviceRsp*>(
      ::perfcat::CheckDeviceRsp::internal_default_instance());
  ::perfcat::_PerfcatServerProtocol_default_instance_.profilentf_ = const_cast< ::perfcat::ProfileNtf*>(
      ::perfcat::ProfileNtf::internal_default_instance());
  ::perfcat::_PerfcatServerProtocol_default_instance_.getcpumaxfreqreq_ = const_cast< ::perfcat::GetCpuMaxFreqReq*>(
      ::perfcat::GetCpuMaxFreqReq::internal_default_instance());
  ::perfcat::_PerfcatServerProtocol_default_instance_.getcpumaxfreqrsp_ = const_cast< ::perfcat::GetCpuMaxFreqRsp*>(
      ::perfcat::GetCpuMaxFreqRsp::internal_default_instance());
  ::perfcat::_PerfcatServerProtocol_default_instance_.toggleinterestingfiledntf_ = const_cast< ::perfcat::ToggleInterestingFiledNTF*>(
      ::perfcat::ToggleInterestingFiledNTF::internal_default_instance());
  ::perfcat::_PerfcatServerProtocol_default_instance_.profilestartedntf_ = const_cast< ::perfcat::ProfileStartedNTF*>(
      ::perfcat::ProfileStartedNTF::internal_default_instance());
  ::perfcat::_PerfcatServerProtocol_default_instance_.profilestoppedntf_ = const_cast< ::perfcat::ProfileStoppedNTF*>(
      ::perfcat::ProfileStoppedNTF::internal_default_instance());
  ::perfcat::_PerfcatServerProtocol_default_instance_.processnotfoundntf_ = const_cast< ::perfcat::ProcessNotFoundNTF*>(
      ::perfcat::ProcessNotFoundNTF::internal_default_instance());
  ::perfcat::_PerfcatServerProtocol_default_instance_.processfoundntf_ = const_cast< ::perfcat::ProcessFoundNTF*>(
      ::perfcat::ProcessFoundNTF::internal_default_instance());
  ::perfcat::_PerfcatServerProtocol_default_instance_.getbatteryinforeq_ = const_cast< ::perfcat::GetBatteryInfoReq*>(
      ::perfcat::GetBatteryInfoReq::internal_default_instance());
  ::perfcat::_PerfcatServerProtocol_default_instance_.getbatteryinforsp_ = const_cast< ::perfcat::GetBatteryInfoRsp*>(
      ::perfcat::GetBatteryInfoRsp::internal_default_instance());
  ::perfcat::_PerfcatServerProtocol_default_instance_.appclosedntf_ = const_cast< ::perfcat::AppClosedNTF*>(
      ::perfcat::AppClosedNTF::internal_default_instance());
  ::perfcat::_PerfcatServerProtocol_default_instance_.profilentfack_ = const_cast< ::perfcat::ProfileNTFACK*>(
      ::perfcat::ProfileNTFACK::internal_default_instance());
  ::perfcat::_PerfcatServerProtocol_default_instance_.preparewifiprofilentf_ = const_cast< ::perfcat::PrepareWifiProfileNTF*>(
      ::perfcat::PrepareWifiProfileNTF::internal_default_instance());
  ::perfcat::_PerfcatServerProtocol_default_instance_.getappinforeq_ = const_cast< ::perfcat::GetAppInfoReq*>(
      ::perfcat::GetAppInfoReq::internal_default_instance());
  ::perfcat::_PerfcatServerProtocol_default_instance_.getappinforsp_ = const_cast< ::perfcat::GetAppInfoRsp*>(
      ::perfcat::GetAppInfoRsp::internal_default_instance());
  ::perfcat::_PerfcatServerProtocol_default_instance_.emptyrsp_ = const_cast< ::perfcat::EmptyRsp*>(
      ::perfcat::EmptyRsp::internal_default_instance());
  ::perfcat::_PerfcatServerProtocol_default_instance_.helloreq_ = const_cast< ::perfcat::HelloReq*>(
      ::perfcat::HelloReq::internal_default_instance());
  ::perfcat::_PerfcatServerProtocol_default_instance_.executeshellcommandreq_ = const_cast< ::perfcat::ExecuteShellCommandReq*>(
      ::perfcat::ExecuteShellCommandReq::internal_default_instance());
  ::perfcat::_PerfcatServerProtocol_default_instance_.executeshellcommandrsp_ = const_cast< ::perfcat::ExecuteShellCommandRsp*>(
      ::perfcat::ExecuteShellCommandRsp::internal_default_instance());
  ::perfcat::_PerfcatServerProtocol_default_instance_.registerappreq_ = const_cast< ::perfcat::RegisterAppReq*>(
      ::perfcat::RegisterAppReq::internal_default_instance());
  ::perfcat::_PerfcatServerProtocol_default_instance_.resumeprofilereq_ = const_cast< ::perfcat::ResumeProfileReq*>(
      ::perfcat::ResumeProfileReq::internal_default_instance());
  ::perfcat::_PerfcatServerProtocol_default_instance_.resumeprofilersp_ = const_cast< ::perfcat::ResumeProfileRsp*>(
      ::perfcat::ResumeProfileRsp::internal_default_instance());
  ::perfcat::_PerfcatServerProtocol_default_instance_.getdatafromappreq_ = const_cast< ::perfcat::GetDataFromAppReq*>(
      ::perfcat::GetDataFromAppReq::internal_default_instance());
  ::perfcat::_PerfcatServerProtocol_default_instance_.getdatafromapprsp_ = const_cast< ::perfcat::GetDataFromAppRsp*>(
      ::perfcat::GetDataFromAppRsp::internal_default_instance());
  ::perfcat::_PerfcatServerProtocol_default_instance_.setscreenshotintervalreq_ = const_cast< ::perfcat::SetScreenshotIntervalReq*>(
      ::perfcat::SetScreenshotIntervalReq::internal_default_instance());
  ::perfcat::_PerfcatServerProtocol_default_instance_.enablefloatingwindowreq_ = const_cast< ::perfcat::EnableFloatingWindowReq*>(
      ::perfcat::EnableFloatingWindowReq::internal_default_instance());
  ::perfcat::_PerfcatServerProtocol_default_instance_.profileiosntf_ = const_cast< ::perfcat::ProfileIOSNtf*>(
      ::perfcat::ProfileIOSNtf::internal_default_instance());
}
class PerfcatServerProtocol::_Internal {
 public:
  static const ::perfcat::ProfileReq& profilereq(const PerfcatServerProtocol* msg);
  static const ::perfcat::ProfileRsp& profilersp(const PerfcatServerProtocol* msg);
  static const ::perfcat::GetMemoryUsageReq& getmemoryusagereq(const PerfcatServerProtocol* msg);
  static const ::perfcat::GetMemoryUsageRsp& getmemoryusagersp(const PerfcatServerProtocol* msg);
  static const ::perfcat::StopProfileReq& stopprofilereq(const PerfcatServerProtocol* msg);
  static const ::perfcat::StopProfileRsp& stopprofilersp(const PerfcatServerProtocol* msg);
  static const ::perfcat::CheckDeviceReq& checkdevicereq(const PerfcatServerProtocol* msg);
  static const ::perfcat::CheckDeviceRsp& checkdevicersp(const PerfcatServerProtocol* msg);
  static const ::perfcat::ProfileNtf& profilentf(const PerfcatServerProtocol* msg);
  static const ::perfcat::GetCpuMaxFreqReq& getcpumaxfreqreq(const PerfcatServerProtocol* msg);
  static const ::perfcat::GetCpuMaxFreqRsp& getcpumaxfreqrsp(const PerfcatServerProtocol* msg);
  static const ::perfcat::ToggleInterestingFiledNTF& toggleinterestingfiledntf(const PerfcatServerProtocol* msg);
  static const ::perfcat::ProfileStartedNTF& profilestartedntf(const PerfcatServerProtocol* msg);
  static const ::perfcat::ProfileStoppedNTF& profilestoppedntf(const PerfcatServerProtocol* msg);
  static const ::perfcat::ProcessNotFoundNTF& processnotfoundntf(const PerfcatServerProtocol* msg);
  static const ::perfcat::ProcessFoundNTF& processfoundntf(const PerfcatServerProtocol* msg);
  static const ::perfcat::GetBatteryInfoReq& getbatteryinforeq(const PerfcatServerProtocol* msg);
  static const ::perfcat::GetBatteryInfoRsp& getbatteryinforsp(const PerfcatServerProtocol* msg);
  static const ::perfcat::AppClosedNTF& appclosedntf(const PerfcatServerProtocol* msg);
  static const ::perfcat::ProfileNTFACK& profilentfack(const PerfcatServerProtocol* msg);
  static const ::perfcat::PrepareWifiProfileNTF& preparewifiprofilentf(const PerfcatServerProtocol* msg);
  static const ::perfcat::GetAppInfoReq& getappinforeq(const PerfcatServerProtocol* msg);
  static const ::perfcat::GetAppInfoRsp& getappinforsp(const PerfcatServerProtocol* msg);
  static const ::perfcat::EmptyRsp& emptyrsp(const PerfcatServerProtocol* msg);
  static const ::perfcat::HelloReq& helloreq(const PerfcatServerProtocol* msg);
  static const ::perfcat::ExecuteShellCommandReq& executeshellcommandreq(const PerfcatServerProtocol* msg);
  static const ::perfcat::ExecuteShellCommandRsp& executeshellcommandrsp(const PerfcatServerProtocol* msg);
  static const ::perfcat::RegisterAppReq& registerappreq(const PerfcatServerProtocol* msg);
  static const ::perfcat::ResumeProfileReq& resumeprofilereq(const PerfcatServerProtocol* msg);
  static const ::perfcat::ResumeProfileRsp& resumeprofilersp(const PerfcatServerProtocol* msg);
  static const ::perfcat::GetDataFromAppReq& getdatafromappreq(const PerfcatServerProtocol* msg);
  static const ::perfcat::GetDataFromAppRsp& getdatafromapprsp(const PerfcatServerProtocol* msg);
  static const ::perfcat::SetScreenshotIntervalReq& setscreenshotintervalreq(const PerfcatServerProtocol* msg);
  static const ::perfcat::EnableFloatingWindowReq& enablefloatingwindowreq(const PerfcatServerProtocol* msg);
  static const ::perfcat::ProfileIOSNtf& profileiosntf(const PerfcatServerProtocol* msg);
};

const ::perfcat::ProfileReq&
PerfcatServerProtocol::_Internal::profilereq(const PerfcatServerProtocol* msg) {
  return *msg->protocol_.profilereq_;
}
const ::perfcat::ProfileRsp&
PerfcatServerProtocol::_Internal::profilersp(const PerfcatServerProtocol* msg) {
  return *msg->protocol_.profilersp_;
}
const ::perfcat::GetMemoryUsageReq&
PerfcatServerProtocol::_Internal::getmemoryusagereq(const PerfcatServerProtocol* msg) {
  return *msg->protocol_.getmemoryusagereq_;
}
const ::perfcat::GetMemoryUsageRsp&
PerfcatServerProtocol::_Internal::getmemoryusagersp(const PerfcatServerProtocol* msg) {
  return *msg->protocol_.getmemoryusagersp_;
}
const ::perfcat::StopProfileReq&
PerfcatServerProtocol::_Internal::stopprofilereq(const PerfcatServerProtocol* msg) {
  return *msg->protocol_.stopprofilereq_;
}
const ::perfcat::StopProfileRsp&
PerfcatServerProtocol::_Internal::stopprofilersp(const PerfcatServerProtocol* msg) {
  return *msg->protocol_.stopprofilersp_;
}
const ::perfcat::CheckDeviceReq&
PerfcatServerProtocol::_Internal::checkdevicereq(const PerfcatServerProtocol* msg) {
  return *msg->protocol_.checkdevicereq_;
}
const ::perfcat::CheckDeviceRsp&
PerfcatServerProtocol::_Internal::checkdevicersp(const PerfcatServerProtocol* msg) {
  return *msg->protocol_.checkdevicersp_;
}
const ::perfcat::ProfileNtf&
PerfcatServerProtocol::_Internal::profilentf(const PerfcatServerProtocol* msg) {
  return *msg->protocol_.profilentf_;
}
const ::perfcat::GetCpuMaxFreqReq&
PerfcatServerProtocol::_Internal::getcpumaxfreqreq(const PerfcatServerProtocol* msg) {
  return *msg->protocol_.getcpumaxfreqreq_;
}
const ::perfcat::GetCpuMaxFreqRsp&
PerfcatServerProtocol::_Internal::getcpumaxfreqrsp(const PerfcatServerProtocol* msg) {
  return *msg->protocol_.getcpumaxfreqrsp_;
}
const ::perfcat::ToggleInterestingFiledNTF&
PerfcatServerProtocol::_Internal::toggleinterestingfiledntf(const PerfcatServerProtocol* msg) {
  return *msg->protocol_.toggleinterestingfiledntf_;
}
const ::perfcat::ProfileStartedNTF&
PerfcatServerProtocol::_Internal::profilestartedntf(const PerfcatServerProtocol* msg) {
  return *msg->protocol_.profilestartedntf_;
}
const ::perfcat::ProfileStoppedNTF&
PerfcatServerProtocol::_Internal::profilestoppedntf(const PerfcatServerProtocol* msg) {
  return *msg->protocol_.profilestoppedntf_;
}
const ::perfcat::ProcessNotFoundNTF&
PerfcatServerProtocol::_Internal::processnotfoundntf(const PerfcatServerProtocol* msg) {
  return *msg->protocol_.processnotfoundntf_;
}
const ::perfcat::ProcessFoundNTF&
PerfcatServerProtocol::_Internal::processfoundntf(const PerfcatServerProtocol* msg) {
  return *msg->protocol_.processfoundntf_;
}
const ::perfcat::GetBatteryInfoReq&
PerfcatServerProtocol::_Internal::getbatteryinforeq(const PerfcatServerProtocol* msg) {
  return *msg->protocol_.getbatteryinforeq_;
}
const ::perfcat::GetBatteryInfoRsp&
PerfcatServerProtocol::_Internal::getbatteryinforsp(const PerfcatServerProtocol* msg) {
  return *msg->protocol_.getbatteryinforsp_;
}
const ::perfcat::AppClosedNTF&
PerfcatServerProtocol::_Internal::appclosedntf(const PerfcatServerProtocol* msg) {
  return *msg->protocol_.appclosedntf_;
}
const ::perfcat::ProfileNTFACK&
PerfcatServerProtocol::_Internal::profilentfack(const PerfcatServerProtocol* msg) {
  return *msg->protocol_.profilentfack_;
}
const ::perfcat::PrepareWifiProfileNTF&
PerfcatServerProtocol::_Internal::preparewifiprofilentf(const PerfcatServerProtocol* msg) {
  return *msg->protocol_.preparewifiprofilentf_;
}
const ::perfcat::GetAppInfoReq&
PerfcatServerProtocol::_Internal::getappinforeq(const PerfcatServerProtocol* msg) {
  return *msg->protocol_.getappinforeq_;
}
const ::perfcat::GetAppInfoRsp&
PerfcatServerProtocol::_Internal::getappinforsp(const PerfcatServerProtocol* msg) {
  return *msg->protocol_.getappinforsp_;
}
const ::perfcat::EmptyRsp&
PerfcatServerProtocol::_Internal::emptyrsp(const PerfcatServerProtocol* msg) {
  return *msg->protocol_.emptyrsp_;
}
const ::perfcat::HelloReq&
PerfcatServerProtocol::_Internal::helloreq(const PerfcatServerProtocol* msg) {
  return *msg->protocol_.helloreq_;
}
const ::perfcat::ExecuteShellCommandReq&
PerfcatServerProtocol::_Internal::executeshellcommandreq(const PerfcatServerProtocol* msg) {
  return *msg->protocol_.executeshellcommandreq_;
}
const ::perfcat::ExecuteShellCommandRsp&
PerfcatServerProtocol::_Internal::executeshellcommandrsp(const PerfcatServerProtocol* msg) {
  return *msg->protocol_.executeshellcommandrsp_;
}
const ::perfcat::RegisterAppReq&
PerfcatServerProtocol::_Internal::registerappreq(const PerfcatServerProtocol* msg) {
  return *msg->protocol_.registerappreq_;
}
const ::perfcat::ResumeProfileReq&
PerfcatServerProtocol::_Internal::resumeprofilereq(const PerfcatServerProtocol* msg) {
  return *msg->protocol_.resumeprofilereq_;
}
const ::perfcat::ResumeProfileRsp&
PerfcatServerProtocol::_Internal::resumeprofilersp(const PerfcatServerProtocol* msg) {
  return *msg->protocol_.resumeprofilersp_;
}
const ::perfcat::GetDataFromAppReq&
PerfcatServerProtocol::_Internal::getdatafromappreq(const PerfcatServerProtocol* msg) {
  return *msg->protocol_.getdatafromappreq_;
}
const ::perfcat::GetDataFromAppRsp&
PerfcatServerProtocol::_Internal::getdatafromapprsp(const PerfcatServerProtocol* msg) {
  return *msg->protocol_.getdatafromapprsp_;
}
const ::perfcat::SetScreenshotIntervalReq&
PerfcatServerProtocol::_Internal::setscreenshotintervalreq(const PerfcatServerProtocol* msg) {
  return *msg->protocol_.setscreenshotintervalreq_;
}
const ::perfcat::EnableFloatingWindowReq&
PerfcatServerProtocol::_Internal::enablefloatingwindowreq(const PerfcatServerProtocol* msg) {
  return *msg->protocol_.enablefloatingwindowreq_;
}
const ::perfcat::ProfileIOSNtf&
PerfcatServerProtocol::_Internal::profileiosntf(const PerfcatServerProtocol* msg) {
  return *msg->protocol_.profileiosntf_;
}
void PerfcatServerProtocol::set_allocated_profilereq(::perfcat::ProfileReq* profilereq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (profilereq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(profilereq);
    if (message_arena != submessage_arena) {
      profilereq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profilereq, submessage_arena);
    }
    set_has_profilereq();
    protocol_.profilereq_ = profilereq;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatServerProtocol.profileReq)
}
void PerfcatServerProtocol::set_allocated_profilersp(::perfcat::ProfileRsp* profilersp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (profilersp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(profilersp);
    if (message_arena != submessage_arena) {
      profilersp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profilersp, submessage_arena);
    }
    set_has_profilersp();
    protocol_.profilersp_ = profilersp;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatServerProtocol.profileRsp)
}
void PerfcatServerProtocol::set_allocated_getmemoryusagereq(::perfcat::GetMemoryUsageReq* getmemoryusagereq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (getmemoryusagereq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getmemoryusagereq);
    if (message_arena != submessage_arena) {
      getmemoryusagereq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getmemoryusagereq, submessage_arena);
    }
    set_has_getmemoryusagereq();
    protocol_.getmemoryusagereq_ = getmemoryusagereq;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatServerProtocol.getMemoryUsageReq)
}
void PerfcatServerProtocol::set_allocated_getmemoryusagersp(::perfcat::GetMemoryUsageRsp* getmemoryusagersp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (getmemoryusagersp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getmemoryusagersp);
    if (message_arena != submessage_arena) {
      getmemoryusagersp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getmemoryusagersp, submessage_arena);
    }
    set_has_getmemoryusagersp();
    protocol_.getmemoryusagersp_ = getmemoryusagersp;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatServerProtocol.getMemoryUsageRsp)
}
void PerfcatServerProtocol::set_allocated_stopprofilereq(::perfcat::StopProfileReq* stopprofilereq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (stopprofilereq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stopprofilereq);
    if (message_arena != submessage_arena) {
      stopprofilereq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stopprofilereq, submessage_arena);
    }
    set_has_stopprofilereq();
    protocol_.stopprofilereq_ = stopprofilereq;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatServerProtocol.stopProfileReq)
}
void PerfcatServerProtocol::set_allocated_stopprofilersp(::perfcat::StopProfileRsp* stopprofilersp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (stopprofilersp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stopprofilersp);
    if (message_arena != submessage_arena) {
      stopprofilersp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stopprofilersp, submessage_arena);
    }
    set_has_stopprofilersp();
    protocol_.stopprofilersp_ = stopprofilersp;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatServerProtocol.stopProfileRsp)
}
void PerfcatServerProtocol::set_allocated_checkdevicereq(::perfcat::CheckDeviceReq* checkdevicereq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (checkdevicereq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(checkdevicereq);
    if (message_arena != submessage_arena) {
      checkdevicereq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, checkdevicereq, submessage_arena);
    }
    set_has_checkdevicereq();
    protocol_.checkdevicereq_ = checkdevicereq;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatServerProtocol.checkDeviceReq)
}
void PerfcatServerProtocol::set_allocated_checkdevicersp(::perfcat::CheckDeviceRsp* checkdevicersp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (checkdevicersp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(checkdevicersp);
    if (message_arena != submessage_arena) {
      checkdevicersp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, checkdevicersp, submessage_arena);
    }
    set_has_checkdevicersp();
    protocol_.checkdevicersp_ = checkdevicersp;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatServerProtocol.checkDeviceRsp)
}
void PerfcatServerProtocol::set_allocated_profilentf(::perfcat::ProfileNtf* profilentf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (profilentf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(profilentf);
    if (message_arena != submessage_arena) {
      profilentf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profilentf, submessage_arena);
    }
    set_has_profilentf();
    protocol_.profilentf_ = profilentf;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatServerProtocol.profileNtf)
}
void PerfcatServerProtocol::set_allocated_getcpumaxfreqreq(::perfcat::GetCpuMaxFreqReq* getcpumaxfreqreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (getcpumaxfreqreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getcpumaxfreqreq);
    if (message_arena != submessage_arena) {
      getcpumaxfreqreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getcpumaxfreqreq, submessage_arena);
    }
    set_has_getcpumaxfreqreq();
    protocol_.getcpumaxfreqreq_ = getcpumaxfreqreq;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatServerProtocol.getCpuMaxFreqReq)
}
void PerfcatServerProtocol::set_allocated_getcpumaxfreqrsp(::perfcat::GetCpuMaxFreqRsp* getcpumaxfreqrsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (getcpumaxfreqrsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getcpumaxfreqrsp);
    if (message_arena != submessage_arena) {
      getcpumaxfreqrsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getcpumaxfreqrsp, submessage_arena);
    }
    set_has_getcpumaxfreqrsp();
    protocol_.getcpumaxfreqrsp_ = getcpumaxfreqrsp;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatServerProtocol.getCpuMaxFreqRsp)
}
void PerfcatServerProtocol::set_allocated_toggleinterestingfiledntf(::perfcat::ToggleInterestingFiledNTF* toggleinterestingfiledntf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (toggleinterestingfiledntf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(toggleinterestingfiledntf);
    if (message_arena != submessage_arena) {
      toggleinterestingfiledntf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, toggleinterestingfiledntf, submessage_arena);
    }
    set_has_toggleinterestingfiledntf();
    protocol_.toggleinterestingfiledntf_ = toggleinterestingfiledntf;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatServerProtocol.toggleInterestingFiledNTF)
}
void PerfcatServerProtocol::set_allocated_profilestartedntf(::perfcat::ProfileStartedNTF* profilestartedntf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (profilestartedntf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(profilestartedntf);
    if (message_arena != submessage_arena) {
      profilestartedntf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profilestartedntf, submessage_arena);
    }
    set_has_profilestartedntf();
    protocol_.profilestartedntf_ = profilestartedntf;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatServerProtocol.profileStartedNTF)
}
void PerfcatServerProtocol::set_allocated_profilestoppedntf(::perfcat::ProfileStoppedNTF* profilestoppedntf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (profilestoppedntf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(profilestoppedntf);
    if (message_arena != submessage_arena) {
      profilestoppedntf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profilestoppedntf, submessage_arena);
    }
    set_has_profilestoppedntf();
    protocol_.profilestoppedntf_ = profilestoppedntf;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatServerProtocol.profileStoppedNTF)
}
void PerfcatServerProtocol::set_allocated_processnotfoundntf(::perfcat::ProcessNotFoundNTF* processnotfoundntf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (processnotfoundntf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(processnotfoundntf);
    if (message_arena != submessage_arena) {
      processnotfoundntf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, processnotfoundntf, submessage_arena);
    }
    set_has_processnotfoundntf();
    protocol_.processnotfoundntf_ = processnotfoundntf;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatServerProtocol.processNotFoundNTF)
}
void PerfcatServerProtocol::set_allocated_processfoundntf(::perfcat::ProcessFoundNTF* processfoundntf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (processfoundntf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(processfoundntf);
    if (message_arena != submessage_arena) {
      processfoundntf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, processfoundntf, submessage_arena);
    }
    set_has_processfoundntf();
    protocol_.processfoundntf_ = processfoundntf;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatServerProtocol.processFoundNTF)
}
void PerfcatServerProtocol::set_allocated_getbatteryinforeq(::perfcat::GetBatteryInfoReq* getbatteryinforeq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (getbatteryinforeq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getbatteryinforeq);
    if (message_arena != submessage_arena) {
      getbatteryinforeq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getbatteryinforeq, submessage_arena);
    }
    set_has_getbatteryinforeq();
    protocol_.getbatteryinforeq_ = getbatteryinforeq;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatServerProtocol.getBatteryInfoReq)
}
void PerfcatServerProtocol::set_allocated_getbatteryinforsp(::perfcat::GetBatteryInfoRsp* getbatteryinforsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (getbatteryinforsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getbatteryinforsp);
    if (message_arena != submessage_arena) {
      getbatteryinforsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getbatteryinforsp, submessage_arena);
    }
    set_has_getbatteryinforsp();
    protocol_.getbatteryinforsp_ = getbatteryinforsp;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatServerProtocol.getBatteryInfoRsp)
}
void PerfcatServerProtocol::set_allocated_appclosedntf(::perfcat::AppClosedNTF* appclosedntf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (appclosedntf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(appclosedntf);
    if (message_arena != submessage_arena) {
      appclosedntf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, appclosedntf, submessage_arena);
    }
    set_has_appclosedntf();
    protocol_.appclosedntf_ = appclosedntf;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatServerProtocol.appClosedNTF)
}
void PerfcatServerProtocol::set_allocated_profilentfack(::perfcat::ProfileNTFACK* profilentfack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (profilentfack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(profilentfack);
    if (message_arena != submessage_arena) {
      profilentfack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profilentfack, submessage_arena);
    }
    set_has_profilentfack();
    protocol_.profilentfack_ = profilentfack;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatServerProtocol.profileNTFACK)
}
void PerfcatServerProtocol::set_allocated_preparewifiprofilentf(::perfcat::PrepareWifiProfileNTF* preparewifiprofilentf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (preparewifiprofilentf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(preparewifiprofilentf);
    if (message_arena != submessage_arena) {
      preparewifiprofilentf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preparewifiprofilentf, submessage_arena);
    }
    set_has_preparewifiprofilentf();
    protocol_.preparewifiprofilentf_ = preparewifiprofilentf;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatServerProtocol.prepareWifiProfileNTF)
}
void PerfcatServerProtocol::set_allocated_getappinforeq(::perfcat::GetAppInfoReq* getappinforeq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (getappinforeq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getappinforeq);
    if (message_arena != submessage_arena) {
      getappinforeq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getappinforeq, submessage_arena);
    }
    set_has_getappinforeq();
    protocol_.getappinforeq_ = getappinforeq;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatServerProtocol.getAppInfoReq)
}
void PerfcatServerProtocol::set_allocated_getappinforsp(::perfcat::GetAppInfoRsp* getappinforsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (getappinforsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getappinforsp);
    if (message_arena != submessage_arena) {
      getappinforsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getappinforsp, submessage_arena);
    }
    set_has_getappinforsp();
    protocol_.getappinforsp_ = getappinforsp;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatServerProtocol.getAppInfoRsp)
}
void PerfcatServerProtocol::set_allocated_emptyrsp(::perfcat::EmptyRsp* emptyrsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (emptyrsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(emptyrsp);
    if (message_arena != submessage_arena) {
      emptyrsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emptyrsp, submessage_arena);
    }
    set_has_emptyrsp();
    protocol_.emptyrsp_ = emptyrsp;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatServerProtocol.emptyRsp)
}
void PerfcatServerProtocol::set_allocated_helloreq(::perfcat::HelloReq* helloreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (helloreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(helloreq);
    if (message_arena != submessage_arena) {
      helloreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, helloreq, submessage_arena);
    }
    set_has_helloreq();
    protocol_.helloreq_ = helloreq;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatServerProtocol.helloReq)
}
void PerfcatServerProtocol::set_allocated_executeshellcommandreq(::perfcat::ExecuteShellCommandReq* executeshellcommandreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (executeshellcommandreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(executeshellcommandreq);
    if (message_arena != submessage_arena) {
      executeshellcommandreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, executeshellcommandreq, submessage_arena);
    }
    set_has_executeshellcommandreq();
    protocol_.executeshellcommandreq_ = executeshellcommandreq;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatServerProtocol.executeShellCommandReq)
}
void PerfcatServerProtocol::set_allocated_executeshellcommandrsp(::perfcat::ExecuteShellCommandRsp* executeshellcommandrsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (executeshellcommandrsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(executeshellcommandrsp);
    if (message_arena != submessage_arena) {
      executeshellcommandrsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, executeshellcommandrsp, submessage_arena);
    }
    set_has_executeshellcommandrsp();
    protocol_.executeshellcommandrsp_ = executeshellcommandrsp;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatServerProtocol.executeShellCommandRsp)
}
void PerfcatServerProtocol::set_allocated_registerappreq(::perfcat::RegisterAppReq* registerappreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (registerappreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(registerappreq);
    if (message_arena != submessage_arena) {
      registerappreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, registerappreq, submessage_arena);
    }
    set_has_registerappreq();
    protocol_.registerappreq_ = registerappreq;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatServerProtocol.registerAppReq)
}
void PerfcatServerProtocol::set_allocated_resumeprofilereq(::perfcat::ResumeProfileReq* resumeprofilereq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (resumeprofilereq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resumeprofilereq);
    if (message_arena != submessage_arena) {
      resumeprofilereq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resumeprofilereq, submessage_arena);
    }
    set_has_resumeprofilereq();
    protocol_.resumeprofilereq_ = resumeprofilereq;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatServerProtocol.resumeProfileReq)
}
void PerfcatServerProtocol::set_allocated_resumeprofilersp(::perfcat::ResumeProfileRsp* resumeprofilersp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (resumeprofilersp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resumeprofilersp);
    if (message_arena != submessage_arena) {
      resumeprofilersp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resumeprofilersp, submessage_arena);
    }
    set_has_resumeprofilersp();
    protocol_.resumeprofilersp_ = resumeprofilersp;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatServerProtocol.resumeProfileRsp)
}
void PerfcatServerProtocol::set_allocated_getdatafromappreq(::perfcat::GetDataFromAppReq* getdatafromappreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (getdatafromappreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getdatafromappreq);
    if (message_arena != submessage_arena) {
      getdatafromappreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getdatafromappreq, submessage_arena);
    }
    set_has_getdatafromappreq();
    protocol_.getdatafromappreq_ = getdatafromappreq;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatServerProtocol.getDataFromAppReq)
}
void PerfcatServerProtocol::set_allocated_getdatafromapprsp(::perfcat::GetDataFromAppRsp* getdatafromapprsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (getdatafromapprsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getdatafromapprsp);
    if (message_arena != submessage_arena) {
      getdatafromapprsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getdatafromapprsp, submessage_arena);
    }
    set_has_getdatafromapprsp();
    protocol_.getdatafromapprsp_ = getdatafromapprsp;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatServerProtocol.getDataFromAppRsp)
}
void PerfcatServerProtocol::set_allocated_setscreenshotintervalreq(::perfcat::SetScreenshotIntervalReq* setscreenshotintervalreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (setscreenshotintervalreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(setscreenshotintervalreq);
    if (message_arena != submessage_arena) {
      setscreenshotintervalreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setscreenshotintervalreq, submessage_arena);
    }
    set_has_setscreenshotintervalreq();
    protocol_.setscreenshotintervalreq_ = setscreenshotintervalreq;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatServerProtocol.setScreenshotIntervalReq)
}
void PerfcatServerProtocol::set_allocated_enablefloatingwindowreq(::perfcat::EnableFloatingWindowReq* enablefloatingwindowreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (enablefloatingwindowreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(enablefloatingwindowreq);
    if (message_arena != submessage_arena) {
      enablefloatingwindowreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enablefloatingwindowreq, submessage_arena);
    }
    set_has_enablefloatingwindowreq();
    protocol_.enablefloatingwindowreq_ = enablefloatingwindowreq;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatServerProtocol.enableFloatingWindowReq)
}
void PerfcatServerProtocol::set_allocated_profileiosntf(::perfcat::ProfileIOSNtf* profileiosntf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_protocol();
  if (profileiosntf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(profileiosntf);
    if (message_arena != submessage_arena) {
      profileiosntf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profileiosntf, submessage_arena);
    }
    set_has_profileiosntf();
    protocol_.profileiosntf_ = profileiosntf;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.PerfcatServerProtocol.profileIOSNtf)
}
PerfcatServerProtocol::PerfcatServerProtocol(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.PerfcatServerProtocol)
}
PerfcatServerProtocol::PerfcatServerProtocol(const PerfcatServerProtocol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_protocol();
  switch (from.protocol_case()) {
    case kProfileReq: {
      _internal_mutable_profilereq()->::perfcat::ProfileReq::MergeFrom(from._internal_profilereq());
      break;
    }
    case kProfileRsp: {
      _internal_mutable_profilersp()->::perfcat::ProfileRsp::MergeFrom(from._internal_profilersp());
      break;
    }
    case kGetMemoryUsageReq: {
      _internal_mutable_getmemoryusagereq()->::perfcat::GetMemoryUsageReq::MergeFrom(from._internal_getmemoryusagereq());
      break;
    }
    case kGetMemoryUsageRsp: {
      _internal_mutable_getmemoryusagersp()->::perfcat::GetMemoryUsageRsp::MergeFrom(from._internal_getmemoryusagersp());
      break;
    }
    case kStopProfileReq: {
      _internal_mutable_stopprofilereq()->::perfcat::StopProfileReq::MergeFrom(from._internal_stopprofilereq());
      break;
    }
    case kStopProfileRsp: {
      _internal_mutable_stopprofilersp()->::perfcat::StopProfileRsp::MergeFrom(from._internal_stopprofilersp());
      break;
    }
    case kCheckDeviceReq: {
      _internal_mutable_checkdevicereq()->::perfcat::CheckDeviceReq::MergeFrom(from._internal_checkdevicereq());
      break;
    }
    case kCheckDeviceRsp: {
      _internal_mutable_checkdevicersp()->::perfcat::CheckDeviceRsp::MergeFrom(from._internal_checkdevicersp());
      break;
    }
    case kProfileNtf: {
      _internal_mutable_profilentf()->::perfcat::ProfileNtf::MergeFrom(from._internal_profilentf());
      break;
    }
    case kGetCpuMaxFreqReq: {
      _internal_mutable_getcpumaxfreqreq()->::perfcat::GetCpuMaxFreqReq::MergeFrom(from._internal_getcpumaxfreqreq());
      break;
    }
    case kGetCpuMaxFreqRsp: {
      _internal_mutable_getcpumaxfreqrsp()->::perfcat::GetCpuMaxFreqRsp::MergeFrom(from._internal_getcpumaxfreqrsp());
      break;
    }
    case kToggleInterestingFiledNTF: {
      _internal_mutable_toggleinterestingfiledntf()->::perfcat::ToggleInterestingFiledNTF::MergeFrom(from._internal_toggleinterestingfiledntf());
      break;
    }
    case kProfileStartedNTF: {
      _internal_mutable_profilestartedntf()->::perfcat::ProfileStartedNTF::MergeFrom(from._internal_profilestartedntf());
      break;
    }
    case kProfileStoppedNTF: {
      _internal_mutable_profilestoppedntf()->::perfcat::ProfileStoppedNTF::MergeFrom(from._internal_profilestoppedntf());
      break;
    }
    case kProcessNotFoundNTF: {
      _internal_mutable_processnotfoundntf()->::perfcat::ProcessNotFoundNTF::MergeFrom(from._internal_processnotfoundntf());
      break;
    }
    case kProcessFoundNTF: {
      _internal_mutable_processfoundntf()->::perfcat::ProcessFoundNTF::MergeFrom(from._internal_processfoundntf());
      break;
    }
    case kGetBatteryInfoReq: {
      _internal_mutable_getbatteryinforeq()->::perfcat::GetBatteryInfoReq::MergeFrom(from._internal_getbatteryinforeq());
      break;
    }
    case kGetBatteryInfoRsp: {
      _internal_mutable_getbatteryinforsp()->::perfcat::GetBatteryInfoRsp::MergeFrom(from._internal_getbatteryinforsp());
      break;
    }
    case kAppClosedNTF: {
      _internal_mutable_appclosedntf()->::perfcat::AppClosedNTF::MergeFrom(from._internal_appclosedntf());
      break;
    }
    case kProfileNTFACK: {
      _internal_mutable_profilentfack()->::perfcat::ProfileNTFACK::MergeFrom(from._internal_profilentfack());
      break;
    }
    case kPrepareWifiProfileNTF: {
      _internal_mutable_preparewifiprofilentf()->::perfcat::PrepareWifiProfileNTF::MergeFrom(from._internal_preparewifiprofilentf());
      break;
    }
    case kGetAppInfoReq: {
      _internal_mutable_getappinforeq()->::perfcat::GetAppInfoReq::MergeFrom(from._internal_getappinforeq());
      break;
    }
    case kGetAppInfoRsp: {
      _internal_mutable_getappinforsp()->::perfcat::GetAppInfoRsp::MergeFrom(from._internal_getappinforsp());
      break;
    }
    case kEmptyRsp: {
      _internal_mutable_emptyrsp()->::perfcat::EmptyRsp::MergeFrom(from._internal_emptyrsp());
      break;
    }
    case kHelloReq: {
      _internal_mutable_helloreq()->::perfcat::HelloReq::MergeFrom(from._internal_helloreq());
      break;
    }
    case kExecuteShellCommandReq: {
      _internal_mutable_executeshellcommandreq()->::perfcat::ExecuteShellCommandReq::MergeFrom(from._internal_executeshellcommandreq());
      break;
    }
    case kExecuteShellCommandRsp: {
      _internal_mutable_executeshellcommandrsp()->::perfcat::ExecuteShellCommandRsp::MergeFrom(from._internal_executeshellcommandrsp());
      break;
    }
    case kRegisterAppReq: {
      _internal_mutable_registerappreq()->::perfcat::RegisterAppReq::MergeFrom(from._internal_registerappreq());
      break;
    }
    case kResumeProfileReq: {
      _internal_mutable_resumeprofilereq()->::perfcat::ResumeProfileReq::MergeFrom(from._internal_resumeprofilereq());
      break;
    }
    case kResumeProfileRsp: {
      _internal_mutable_resumeprofilersp()->::perfcat::ResumeProfileRsp::MergeFrom(from._internal_resumeprofilersp());
      break;
    }
    case kGetDataFromAppReq: {
      _internal_mutable_getdatafromappreq()->::perfcat::GetDataFromAppReq::MergeFrom(from._internal_getdatafromappreq());
      break;
    }
    case kGetDataFromAppRsp: {
      _internal_mutable_getdatafromapprsp()->::perfcat::GetDataFromAppRsp::MergeFrom(from._internal_getdatafromapprsp());
      break;
    }
    case kSetScreenshotIntervalReq: {
      _internal_mutable_setscreenshotintervalreq()->::perfcat::SetScreenshotIntervalReq::MergeFrom(from._internal_setscreenshotintervalreq());
      break;
    }
    case kEnableFloatingWindowReq: {
      _internal_mutable_enablefloatingwindowreq()->::perfcat::EnableFloatingWindowReq::MergeFrom(from._internal_enablefloatingwindowreq());
      break;
    }
    case kProfileIOSNtf: {
      _internal_mutable_profileiosntf()->::perfcat::ProfileIOSNtf::MergeFrom(from._internal_profileiosntf());
      break;
    }
    case PROTOCOL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfcat.PerfcatServerProtocol)
}

void PerfcatServerProtocol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PerfcatServerProtocol_perfcat_2eproto.base);
  clear_has_protocol();
}

PerfcatServerProtocol::~PerfcatServerProtocol() {
  // @@protoc_insertion_point(destructor:perfcat.PerfcatServerProtocol)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PerfcatServerProtocol::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_protocol()) {
    clear_protocol();
  }
}

void PerfcatServerProtocol::ArenaDtor(void* object) {
  PerfcatServerProtocol* _this = reinterpret_cast< PerfcatServerProtocol* >(object);
  (void)_this;
}
void PerfcatServerProtocol::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PerfcatServerProtocol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerfcatServerProtocol& PerfcatServerProtocol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerfcatServerProtocol_perfcat_2eproto.base);
  return *internal_default_instance();
}


void PerfcatServerProtocol::clear_protocol() {
// @@protoc_insertion_point(one_of_clear_start:perfcat.PerfcatServerProtocol)
  switch (protocol_case()) {
    case kProfileReq: {
      if (GetArena() == nullptr) {
        delete protocol_.profilereq_;
      }
      break;
    }
    case kProfileRsp: {
      if (GetArena() == nullptr) {
        delete protocol_.profilersp_;
      }
      break;
    }
    case kGetMemoryUsageReq: {
      if (GetArena() == nullptr) {
        delete protocol_.getmemoryusagereq_;
      }
      break;
    }
    case kGetMemoryUsageRsp: {
      if (GetArena() == nullptr) {
        delete protocol_.getmemoryusagersp_;
      }
      break;
    }
    case kStopProfileReq: {
      if (GetArena() == nullptr) {
        delete protocol_.stopprofilereq_;
      }
      break;
    }
    case kStopProfileRsp: {
      if (GetArena() == nullptr) {
        delete protocol_.stopprofilersp_;
      }
      break;
    }
    case kCheckDeviceReq: {
      if (GetArena() == nullptr) {
        delete protocol_.checkdevicereq_;
      }
      break;
    }
    case kCheckDeviceRsp: {
      if (GetArena() == nullptr) {
        delete protocol_.checkdevicersp_;
      }
      break;
    }
    case kProfileNtf: {
      if (GetArena() == nullptr) {
        delete protocol_.profilentf_;
      }
      break;
    }
    case kGetCpuMaxFreqReq: {
      if (GetArena() == nullptr) {
        delete protocol_.getcpumaxfreqreq_;
      }
      break;
    }
    case kGetCpuMaxFreqRsp: {
      if (GetArena() == nullptr) {
        delete protocol_.getcpumaxfreqrsp_;
      }
      break;
    }
    case kToggleInterestingFiledNTF: {
      if (GetArena() == nullptr) {
        delete protocol_.toggleinterestingfiledntf_;
      }
      break;
    }
    case kProfileStartedNTF: {
      if (GetArena() == nullptr) {
        delete protocol_.profilestartedntf_;
      }
      break;
    }
    case kProfileStoppedNTF: {
      if (GetArena() == nullptr) {
        delete protocol_.profilestoppedntf_;
      }
      break;
    }
    case kProcessNotFoundNTF: {
      if (GetArena() == nullptr) {
        delete protocol_.processnotfoundntf_;
      }
      break;
    }
    case kProcessFoundNTF: {
      if (GetArena() == nullptr) {
        delete protocol_.processfoundntf_;
      }
      break;
    }
    case kGetBatteryInfoReq: {
      if (GetArena() == nullptr) {
        delete protocol_.getbatteryinforeq_;
      }
      break;
    }
    case kGetBatteryInfoRsp: {
      if (GetArena() == nullptr) {
        delete protocol_.getbatteryinforsp_;
      }
      break;
    }
    case kAppClosedNTF: {
      if (GetArena() == nullptr) {
        delete protocol_.appclosedntf_;
      }
      break;
    }
    case kProfileNTFACK: {
      if (GetArena() == nullptr) {
        delete protocol_.profilentfack_;
      }
      break;
    }
    case kPrepareWifiProfileNTF: {
      if (GetArena() == nullptr) {
        delete protocol_.preparewifiprofilentf_;
      }
      break;
    }
    case kGetAppInfoReq: {
      if (GetArena() == nullptr) {
        delete protocol_.getappinforeq_;
      }
      break;
    }
    case kGetAppInfoRsp: {
      if (GetArena() == nullptr) {
        delete protocol_.getappinforsp_;
      }
      break;
    }
    case kEmptyRsp: {
      if (GetArena() == nullptr) {
        delete protocol_.emptyrsp_;
      }
      break;
    }
    case kHelloReq: {
      if (GetArena() == nullptr) {
        delete protocol_.helloreq_;
      }
      break;
    }
    case kExecuteShellCommandReq: {
      if (GetArena() == nullptr) {
        delete protocol_.executeshellcommandreq_;
      }
      break;
    }
    case kExecuteShellCommandRsp: {
      if (GetArena() == nullptr) {
        delete protocol_.executeshellcommandrsp_;
      }
      break;
    }
    case kRegisterAppReq: {
      if (GetArena() == nullptr) {
        delete protocol_.registerappreq_;
      }
      break;
    }
    case kResumeProfileReq: {
      if (GetArena() == nullptr) {
        delete protocol_.resumeprofilereq_;
      }
      break;
    }
    case kResumeProfileRsp: {
      if (GetArena() == nullptr) {
        delete protocol_.resumeprofilersp_;
      }
      break;
    }
    case kGetDataFromAppReq: {
      if (GetArena() == nullptr) {
        delete protocol_.getdatafromappreq_;
      }
      break;
    }
    case kGetDataFromAppRsp: {
      if (GetArena() == nullptr) {
        delete protocol_.getdatafromapprsp_;
      }
      break;
    }
    case kSetScreenshotIntervalReq: {
      if (GetArena() == nullptr) {
        delete protocol_.setscreenshotintervalreq_;
      }
      break;
    }
    case kEnableFloatingWindowReq: {
      if (GetArena() == nullptr) {
        delete protocol_.enablefloatingwindowreq_;
      }
      break;
    }
    case kProfileIOSNtf: {
      if (GetArena() == nullptr) {
        delete protocol_.profileiosntf_;
      }
      break;
    }
    case PROTOCOL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PROTOCOL_NOT_SET;
}


void PerfcatServerProtocol::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.PerfcatServerProtocol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_protocol();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerfcatServerProtocol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .perfcat.ProfileReq profileReq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_profilereq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.ProfileRsp profileRsp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_profilersp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.GetMemoryUsageReq getMemoryUsageReq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_getmemoryusagereq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.GetMemoryUsageRsp getMemoryUsageRsp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_getmemoryusagersp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.StopProfileReq stopProfileReq = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stopprofilereq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.StopProfileRsp stopProfileRsp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_stopprofilersp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.CheckDeviceReq checkDeviceReq = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_checkdevicereq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.CheckDeviceRsp checkDeviceRsp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_checkdevicersp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.ProfileNtf profileNtf = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_profilentf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.GetCpuMaxFreqReq getCpuMaxFreqReq = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_getcpumaxfreqreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.GetCpuMaxFreqRsp getCpuMaxFreqRsp = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_getcpumaxfreqrsp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.ToggleInterestingFiledNTF toggleInterestingFiledNTF = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_toggleinterestingfiledntf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.ProfileStartedNTF profileStartedNTF = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_profilestartedntf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.ProfileStoppedNTF profileStoppedNTF = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_profilestoppedntf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.ProcessNotFoundNTF processNotFoundNTF = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_processnotfoundntf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.ProcessFoundNTF processFoundNTF = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_processfoundntf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.GetBatteryInfoReq getBatteryInfoReq = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_getbatteryinforeq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.GetBatteryInfoRsp getBatteryInfoRsp = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_getbatteryinforsp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.AppClosedNTF appClosedNTF = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_appclosedntf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.ProfileNTFACK profileNTFACK = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_profilentfack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.PrepareWifiProfileNTF prepareWifiProfileNTF = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_preparewifiprofilentf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.GetAppInfoReq getAppInfoReq = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_getappinforeq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.GetAppInfoRsp getAppInfoRsp = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_getappinforsp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.EmptyRsp emptyRsp = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_emptyrsp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.HelloReq helloReq = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_helloreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.ExecuteShellCommandReq executeShellCommandReq = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_executeshellcommandreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.ExecuteShellCommandRsp executeShellCommandRsp = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_executeshellcommandrsp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.RegisterAppReq registerAppReq = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_registerappreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.ResumeProfileReq resumeProfileReq = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_resumeprofilereq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.ResumeProfileRsp resumeProfileRsp = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_resumeprofilersp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.GetDataFromAppReq getDataFromAppReq = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_getdatafromappreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.GetDataFromAppRsp getDataFromAppRsp = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_getdatafromapprsp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.SetScreenshotIntervalReq setScreenshotIntervalReq = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_setscreenshotintervalreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.EnableFloatingWindowReq enableFloatingWindowReq = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_enablefloatingwindowreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.ProfileIOSNtf profileIOSNtf = 10001;
      case 10001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_profileiosntf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PerfcatServerProtocol::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.PerfcatServerProtocol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .perfcat.ProfileReq profileReq = 1;
  if (_internal_has_profilereq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::profilereq(this), target, stream);
  }

  // .perfcat.ProfileRsp profileRsp = 2;
  if (_internal_has_profilersp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::profilersp(this), target, stream);
  }

  // .perfcat.GetMemoryUsageReq getMemoryUsageReq = 3;
  if (_internal_has_getmemoryusagereq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::getmemoryusagereq(this), target, stream);
  }

  // .perfcat.GetMemoryUsageRsp getMemoryUsageRsp = 4;
  if (_internal_has_getmemoryusagersp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::getmemoryusagersp(this), target, stream);
  }

  // .perfcat.StopProfileReq stopProfileReq = 5;
  if (_internal_has_stopprofilereq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::stopprofilereq(this), target, stream);
  }

  // .perfcat.StopProfileRsp stopProfileRsp = 6;
  if (_internal_has_stopprofilersp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::stopprofilersp(this), target, stream);
  }

  // .perfcat.CheckDeviceReq checkDeviceReq = 7;
  if (_internal_has_checkdevicereq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::checkdevicereq(this), target, stream);
  }

  // .perfcat.CheckDeviceRsp checkDeviceRsp = 8;
  if (_internal_has_checkdevicersp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::checkdevicersp(this), target, stream);
  }

  // .perfcat.ProfileNtf profileNtf = 9;
  if (_internal_has_profilentf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::profilentf(this), target, stream);
  }

  // .perfcat.GetCpuMaxFreqReq getCpuMaxFreqReq = 10;
  if (_internal_has_getcpumaxfreqreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::getcpumaxfreqreq(this), target, stream);
  }

  // .perfcat.GetCpuMaxFreqRsp getCpuMaxFreqRsp = 11;
  if (_internal_has_getcpumaxfreqrsp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::getcpumaxfreqrsp(this), target, stream);
  }

  // .perfcat.ToggleInterestingFiledNTF toggleInterestingFiledNTF = 12;
  if (_internal_has_toggleinterestingfiledntf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::toggleinterestingfiledntf(this), target, stream);
  }

  // .perfcat.ProfileStartedNTF profileStartedNTF = 13;
  if (_internal_has_profilestartedntf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::profilestartedntf(this), target, stream);
  }

  // .perfcat.ProfileStoppedNTF profileStoppedNTF = 14;
  if (_internal_has_profilestoppedntf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::profilestoppedntf(this), target, stream);
  }

  // .perfcat.ProcessNotFoundNTF processNotFoundNTF = 15;
  if (_internal_has_processnotfoundntf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::processnotfoundntf(this), target, stream);
  }

  // .perfcat.ProcessFoundNTF processFoundNTF = 16;
  if (_internal_has_processfoundntf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::processfoundntf(this), target, stream);
  }

  // .perfcat.GetBatteryInfoReq getBatteryInfoReq = 17;
  if (_internal_has_getbatteryinforeq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::getbatteryinforeq(this), target, stream);
  }

  // .perfcat.GetBatteryInfoRsp getBatteryInfoRsp = 18;
  if (_internal_has_getbatteryinforsp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::getbatteryinforsp(this), target, stream);
  }

  // .perfcat.AppClosedNTF appClosedNTF = 19;
  if (_internal_has_appclosedntf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::appclosedntf(this), target, stream);
  }

  // .perfcat.ProfileNTFACK profileNTFACK = 20;
  if (_internal_has_profilentfack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::profilentfack(this), target, stream);
  }

  // .perfcat.PrepareWifiProfileNTF prepareWifiProfileNTF = 21;
  if (_internal_has_preparewifiprofilentf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::preparewifiprofilentf(this), target, stream);
  }

  // .perfcat.GetAppInfoReq getAppInfoReq = 22;
  if (_internal_has_getappinforeq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::getappinforeq(this), target, stream);
  }

  // .perfcat.GetAppInfoRsp getAppInfoRsp = 23;
  if (_internal_has_getappinforsp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::getappinforsp(this), target, stream);
  }

  // .perfcat.EmptyRsp emptyRsp = 24;
  if (_internal_has_emptyrsp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::emptyrsp(this), target, stream);
  }

  // .perfcat.HelloReq helloReq = 25;
  if (_internal_has_helloreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::helloreq(this), target, stream);
  }

  // .perfcat.ExecuteShellCommandReq executeShellCommandReq = 26;
  if (_internal_has_executeshellcommandreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::executeshellcommandreq(this), target, stream);
  }

  // .perfcat.ExecuteShellCommandRsp executeShellCommandRsp = 27;
  if (_internal_has_executeshellcommandrsp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::executeshellcommandrsp(this), target, stream);
  }

  // .perfcat.RegisterAppReq registerAppReq = 28;
  if (_internal_has_registerappreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::registerappreq(this), target, stream);
  }

  // .perfcat.ResumeProfileReq resumeProfileReq = 29;
  if (_internal_has_resumeprofilereq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::resumeprofilereq(this), target, stream);
  }

  // .perfcat.ResumeProfileRsp resumeProfileRsp = 30;
  if (_internal_has_resumeprofilersp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::resumeprofilersp(this), target, stream);
  }

  // .perfcat.GetDataFromAppReq getDataFromAppReq = 31;
  if (_internal_has_getdatafromappreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::getdatafromappreq(this), target, stream);
  }

  // .perfcat.GetDataFromAppRsp getDataFromAppRsp = 32;
  if (_internal_has_getdatafromapprsp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::getdatafromapprsp(this), target, stream);
  }

  // .perfcat.SetScreenshotIntervalReq setScreenshotIntervalReq = 33;
  if (_internal_has_setscreenshotintervalreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::setscreenshotintervalreq(this), target, stream);
  }

  // .perfcat.EnableFloatingWindowReq enableFloatingWindowReq = 34;
  if (_internal_has_enablefloatingwindowreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        34, _Internal::enablefloatingwindowreq(this), target, stream);
  }

  // .perfcat.ProfileIOSNtf profileIOSNtf = 10001;
  if (_internal_has_profileiosntf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10001, _Internal::profileiosntf(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.PerfcatServerProtocol)
  return target;
}

size_t PerfcatServerProtocol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.PerfcatServerProtocol)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (protocol_case()) {
    // .perfcat.ProfileReq profileReq = 1;
    case kProfileReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.profilereq_);
      break;
    }
    // .perfcat.ProfileRsp profileRsp = 2;
    case kProfileRsp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.profilersp_);
      break;
    }
    // .perfcat.GetMemoryUsageReq getMemoryUsageReq = 3;
    case kGetMemoryUsageReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.getmemoryusagereq_);
      break;
    }
    // .perfcat.GetMemoryUsageRsp getMemoryUsageRsp = 4;
    case kGetMemoryUsageRsp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.getmemoryusagersp_);
      break;
    }
    // .perfcat.StopProfileReq stopProfileReq = 5;
    case kStopProfileReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.stopprofilereq_);
      break;
    }
    // .perfcat.StopProfileRsp stopProfileRsp = 6;
    case kStopProfileRsp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.stopprofilersp_);
      break;
    }
    // .perfcat.CheckDeviceReq checkDeviceReq = 7;
    case kCheckDeviceReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.checkdevicereq_);
      break;
    }
    // .perfcat.CheckDeviceRsp checkDeviceRsp = 8;
    case kCheckDeviceRsp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.checkdevicersp_);
      break;
    }
    // .perfcat.ProfileNtf profileNtf = 9;
    case kProfileNtf: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.profilentf_);
      break;
    }
    // .perfcat.GetCpuMaxFreqReq getCpuMaxFreqReq = 10;
    case kGetCpuMaxFreqReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.getcpumaxfreqreq_);
      break;
    }
    // .perfcat.GetCpuMaxFreqRsp getCpuMaxFreqRsp = 11;
    case kGetCpuMaxFreqRsp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.getcpumaxfreqrsp_);
      break;
    }
    // .perfcat.ToggleInterestingFiledNTF toggleInterestingFiledNTF = 12;
    case kToggleInterestingFiledNTF: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.toggleinterestingfiledntf_);
      break;
    }
    // .perfcat.ProfileStartedNTF profileStartedNTF = 13;
    case kProfileStartedNTF: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.profilestartedntf_);
      break;
    }
    // .perfcat.ProfileStoppedNTF profileStoppedNTF = 14;
    case kProfileStoppedNTF: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.profilestoppedntf_);
      break;
    }
    // .perfcat.ProcessNotFoundNTF processNotFoundNTF = 15;
    case kProcessNotFoundNTF: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.processnotfoundntf_);
      break;
    }
    // .perfcat.ProcessFoundNTF processFoundNTF = 16;
    case kProcessFoundNTF: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.processfoundntf_);
      break;
    }
    // .perfcat.GetBatteryInfoReq getBatteryInfoReq = 17;
    case kGetBatteryInfoReq: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.getbatteryinforeq_);
      break;
    }
    // .perfcat.GetBatteryInfoRsp getBatteryInfoRsp = 18;
    case kGetBatteryInfoRsp: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.getbatteryinforsp_);
      break;
    }
    // .perfcat.AppClosedNTF appClosedNTF = 19;
    case kAppClosedNTF: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.appclosedntf_);
      break;
    }
    // .perfcat.ProfileNTFACK profileNTFACK = 20;
    case kProfileNTFACK: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.profilentfack_);
      break;
    }
    // .perfcat.PrepareWifiProfileNTF prepareWifiProfileNTF = 21;
    case kPrepareWifiProfileNTF: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.preparewifiprofilentf_);
      break;
    }
    // .perfcat.GetAppInfoReq getAppInfoReq = 22;
    case kGetAppInfoReq: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.getappinforeq_);
      break;
    }
    // .perfcat.GetAppInfoRsp getAppInfoRsp = 23;
    case kGetAppInfoRsp: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.getappinforsp_);
      break;
    }
    // .perfcat.EmptyRsp emptyRsp = 24;
    case kEmptyRsp: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.emptyrsp_);
      break;
    }
    // .perfcat.HelloReq helloReq = 25;
    case kHelloReq: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.helloreq_);
      break;
    }
    // .perfcat.ExecuteShellCommandReq executeShellCommandReq = 26;
    case kExecuteShellCommandReq: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.executeshellcommandreq_);
      break;
    }
    // .perfcat.ExecuteShellCommandRsp executeShellCommandRsp = 27;
    case kExecuteShellCommandRsp: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.executeshellcommandrsp_);
      break;
    }
    // .perfcat.RegisterAppReq registerAppReq = 28;
    case kRegisterAppReq: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.registerappreq_);
      break;
    }
    // .perfcat.ResumeProfileReq resumeProfileReq = 29;
    case kResumeProfileReq: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.resumeprofilereq_);
      break;
    }
    // .perfcat.ResumeProfileRsp resumeProfileRsp = 30;
    case kResumeProfileRsp: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.resumeprofilersp_);
      break;
    }
    // .perfcat.GetDataFromAppReq getDataFromAppReq = 31;
    case kGetDataFromAppReq: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.getdatafromappreq_);
      break;
    }
    // .perfcat.GetDataFromAppRsp getDataFromAppRsp = 32;
    case kGetDataFromAppRsp: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.getdatafromapprsp_);
      break;
    }
    // .perfcat.SetScreenshotIntervalReq setScreenshotIntervalReq = 33;
    case kSetScreenshotIntervalReq: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.setscreenshotintervalreq_);
      break;
    }
    // .perfcat.EnableFloatingWindowReq enableFloatingWindowReq = 34;
    case kEnableFloatingWindowReq: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.enablefloatingwindowreq_);
      break;
    }
    // .perfcat.ProfileIOSNtf profileIOSNtf = 10001;
    case kProfileIOSNtf: {
      total_size += 3 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *protocol_.profileiosntf_);
      break;
    }
    case PROTOCOL_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfcatServerProtocol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.PerfcatServerProtocol)
  GOOGLE_DCHECK_NE(&from, this);
  const PerfcatServerProtocol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PerfcatServerProtocol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.PerfcatServerProtocol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.PerfcatServerProtocol)
    MergeFrom(*source);
  }
}

void PerfcatServerProtocol::MergeFrom(const PerfcatServerProtocol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.PerfcatServerProtocol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.protocol_case()) {
    case kProfileReq: {
      _internal_mutable_profilereq()->::perfcat::ProfileReq::MergeFrom(from._internal_profilereq());
      break;
    }
    case kProfileRsp: {
      _internal_mutable_profilersp()->::perfcat::ProfileRsp::MergeFrom(from._internal_profilersp());
      break;
    }
    case kGetMemoryUsageReq: {
      _internal_mutable_getmemoryusagereq()->::perfcat::GetMemoryUsageReq::MergeFrom(from._internal_getmemoryusagereq());
      break;
    }
    case kGetMemoryUsageRsp: {
      _internal_mutable_getmemoryusagersp()->::perfcat::GetMemoryUsageRsp::MergeFrom(from._internal_getmemoryusagersp());
      break;
    }
    case kStopProfileReq: {
      _internal_mutable_stopprofilereq()->::perfcat::StopProfileReq::MergeFrom(from._internal_stopprofilereq());
      break;
    }
    case kStopProfileRsp: {
      _internal_mutable_stopprofilersp()->::perfcat::StopProfileRsp::MergeFrom(from._internal_stopprofilersp());
      break;
    }
    case kCheckDeviceReq: {
      _internal_mutable_checkdevicereq()->::perfcat::CheckDeviceReq::MergeFrom(from._internal_checkdevicereq());
      break;
    }
    case kCheckDeviceRsp: {
      _internal_mutable_checkdevicersp()->::perfcat::CheckDeviceRsp::MergeFrom(from._internal_checkdevicersp());
      break;
    }
    case kProfileNtf: {
      _internal_mutable_profilentf()->::perfcat::ProfileNtf::MergeFrom(from._internal_profilentf());
      break;
    }
    case kGetCpuMaxFreqReq: {
      _internal_mutable_getcpumaxfreqreq()->::perfcat::GetCpuMaxFreqReq::MergeFrom(from._internal_getcpumaxfreqreq());
      break;
    }
    case kGetCpuMaxFreqRsp: {
      _internal_mutable_getcpumaxfreqrsp()->::perfcat::GetCpuMaxFreqRsp::MergeFrom(from._internal_getcpumaxfreqrsp());
      break;
    }
    case kToggleInterestingFiledNTF: {
      _internal_mutable_toggleinterestingfiledntf()->::perfcat::ToggleInterestingFiledNTF::MergeFrom(from._internal_toggleinterestingfiledntf());
      break;
    }
    case kProfileStartedNTF: {
      _internal_mutable_profilestartedntf()->::perfcat::ProfileStartedNTF::MergeFrom(from._internal_profilestartedntf());
      break;
    }
    case kProfileStoppedNTF: {
      _internal_mutable_profilestoppedntf()->::perfcat::ProfileStoppedNTF::MergeFrom(from._internal_profilestoppedntf());
      break;
    }
    case kProcessNotFoundNTF: {
      _internal_mutable_processnotfoundntf()->::perfcat::ProcessNotFoundNTF::MergeFrom(from._internal_processnotfoundntf());
      break;
    }
    case kProcessFoundNTF: {
      _internal_mutable_processfoundntf()->::perfcat::ProcessFoundNTF::MergeFrom(from._internal_processfoundntf());
      break;
    }
    case kGetBatteryInfoReq: {
      _internal_mutable_getbatteryinforeq()->::perfcat::GetBatteryInfoReq::MergeFrom(from._internal_getbatteryinforeq());
      break;
    }
    case kGetBatteryInfoRsp: {
      _internal_mutable_getbatteryinforsp()->::perfcat::GetBatteryInfoRsp::MergeFrom(from._internal_getbatteryinforsp());
      break;
    }
    case kAppClosedNTF: {
      _internal_mutable_appclosedntf()->::perfcat::AppClosedNTF::MergeFrom(from._internal_appclosedntf());
      break;
    }
    case kProfileNTFACK: {
      _internal_mutable_profilentfack()->::perfcat::ProfileNTFACK::MergeFrom(from._internal_profilentfack());
      break;
    }
    case kPrepareWifiProfileNTF: {
      _internal_mutable_preparewifiprofilentf()->::perfcat::PrepareWifiProfileNTF::MergeFrom(from._internal_preparewifiprofilentf());
      break;
    }
    case kGetAppInfoReq: {
      _internal_mutable_getappinforeq()->::perfcat::GetAppInfoReq::MergeFrom(from._internal_getappinforeq());
      break;
    }
    case kGetAppInfoRsp: {
      _internal_mutable_getappinforsp()->::perfcat::GetAppInfoRsp::MergeFrom(from._internal_getappinforsp());
      break;
    }
    case kEmptyRsp: {
      _internal_mutable_emptyrsp()->::perfcat::EmptyRsp::MergeFrom(from._internal_emptyrsp());
      break;
    }
    case kHelloReq: {
      _internal_mutable_helloreq()->::perfcat::HelloReq::MergeFrom(from._internal_helloreq());
      break;
    }
    case kExecuteShellCommandReq: {
      _internal_mutable_executeshellcommandreq()->::perfcat::ExecuteShellCommandReq::MergeFrom(from._internal_executeshellcommandreq());
      break;
    }
    case kExecuteShellCommandRsp: {
      _internal_mutable_executeshellcommandrsp()->::perfcat::ExecuteShellCommandRsp::MergeFrom(from._internal_executeshellcommandrsp());
      break;
    }
    case kRegisterAppReq: {
      _internal_mutable_registerappreq()->::perfcat::RegisterAppReq::MergeFrom(from._internal_registerappreq());
      break;
    }
    case kResumeProfileReq: {
      _internal_mutable_resumeprofilereq()->::perfcat::ResumeProfileReq::MergeFrom(from._internal_resumeprofilereq());
      break;
    }
    case kResumeProfileRsp: {
      _internal_mutable_resumeprofilersp()->::perfcat::ResumeProfileRsp::MergeFrom(from._internal_resumeprofilersp());
      break;
    }
    case kGetDataFromAppReq: {
      _internal_mutable_getdatafromappreq()->::perfcat::GetDataFromAppReq::MergeFrom(from._internal_getdatafromappreq());
      break;
    }
    case kGetDataFromAppRsp: {
      _internal_mutable_getdatafromapprsp()->::perfcat::GetDataFromAppRsp::MergeFrom(from._internal_getdatafromapprsp());
      break;
    }
    case kSetScreenshotIntervalReq: {
      _internal_mutable_setscreenshotintervalreq()->::perfcat::SetScreenshotIntervalReq::MergeFrom(from._internal_setscreenshotintervalreq());
      break;
    }
    case kEnableFloatingWindowReq: {
      _internal_mutable_enablefloatingwindowreq()->::perfcat::EnableFloatingWindowReq::MergeFrom(from._internal_enablefloatingwindowreq());
      break;
    }
    case kProfileIOSNtf: {
      _internal_mutable_profileiosntf()->::perfcat::ProfileIOSNtf::MergeFrom(from._internal_profileiosntf());
      break;
    }
    case PROTOCOL_NOT_SET: {
      break;
    }
  }
}

void PerfcatServerProtocol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.PerfcatServerProtocol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerfcatServerProtocol::CopyFrom(const PerfcatServerProtocol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.PerfcatServerProtocol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfcatServerProtocol::IsInitialized() const {
  return true;
}

void PerfcatServerProtocol::InternalSwap(PerfcatServerProtocol* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(protocol_, other->protocol_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PerfcatServerProtocol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProfileReq::InitAsDefaultInstance() {
  ::perfcat::_ProfileReq_default_instance_._instance.get_mutable()->profileapp_ = const_cast< ::perfcat::ProfileApp*>(
      ::perfcat::ProfileApp::internal_default_instance());
}
class ProfileReq::_Internal {
 public:
  static const ::perfcat::ProfileApp& profileapp(const ProfileReq* msg);
};

const ::perfcat::ProfileApp&
ProfileReq::_Internal::profileapp(const ProfileReq* msg) {
  return *msg->profileapp_;
}
ProfileReq::ProfileReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  datatypes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.ProfileReq)
}
ProfileReq::ProfileReq(const ProfileReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      datatypes_(from.datatypes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_profileapp()) {
    profileapp_ = new ::perfcat::ProfileApp(*from.profileapp_);
  } else {
    profileapp_ = nullptr;
  }
  ::memcpy(&e2_, &from.e2_,
    static_cast<size_t>(reinterpret_cast<char*>(&isusb_) -
    reinterpret_cast<char*>(&e2_)) + sizeof(isusb_));
  // @@protoc_insertion_point(copy_constructor:perfcat.ProfileReq)
}

void ProfileReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfileReq_perfcat_2eproto.base);
  ::memset(&profileapp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isusb_) -
      reinterpret_cast<char*>(&profileapp_)) + sizeof(isusb_));
}

ProfileReq::~ProfileReq() {
  // @@protoc_insertion_point(destructor:perfcat.ProfileReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfileReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete profileapp_;
}

void ProfileReq::ArenaDtor(void* object) {
  ProfileReq* _this = reinterpret_cast< ProfileReq* >(object);
  (void)_this;
}
void ProfileReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfileReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfileReq& ProfileReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfileReq_perfcat_2eproto.base);
  return *internal_default_instance();
}


void ProfileReq::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.ProfileReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datatypes_.Clear();
  if (GetArena() == nullptr && profileapp_ != nullptr) {
    delete profileapp_;
  }
  profileapp_ = nullptr;
  ::memset(&e2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isusb_) -
      reinterpret_cast<char*>(&e2_)) + sizeof(isusb_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfileReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 e2 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          e2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .perfcat.ProfileReq.DataType dataTypes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_datatypes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_datatypes(static_cast<::perfcat::ProfileReq_DataType>(val));
        } else goto handle_unusual;
        continue;
      // .perfcat.ProfileApp profileApp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_profileapp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isUSB = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          isusb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfileReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.ProfileReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 e2 = 1;
  if (this->e2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_e2(), target);
  }

  // repeated .perfcat.ProfileReq.DataType dataTypes = 2;
  {
    int byte_size = _datatypes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          2, datatypes_, byte_size, target);
    }
  }

  // .perfcat.ProfileApp profileApp = 3;
  if (this->has_profileapp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::profileapp(this), target, stream);
  }

  // bool isUSB = 4;
  if (this->isusb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_isusb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.ProfileReq)
  return target;
}

size_t ProfileReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.ProfileReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfcat.ProfileReq.DataType dataTypes = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_datatypes_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_datatypes(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _datatypes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .perfcat.ProfileApp profileApp = 3;
  if (this->has_profileapp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *profileapp_);
  }

  // int32 e2 = 1;
  if (this->e2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_e2());
  }

  // bool isUSB = 4;
  if (this->isusb() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfileReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.ProfileReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfileReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.ProfileReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.ProfileReq)
    MergeFrom(*source);
  }
}

void ProfileReq::MergeFrom(const ProfileReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.ProfileReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datatypes_.MergeFrom(from.datatypes_);
  if (from.has_profileapp()) {
    _internal_mutable_profileapp()->::perfcat::ProfileApp::MergeFrom(from._internal_profileapp());
  }
  if (from.e2() != 0) {
    _internal_set_e2(from._internal_e2());
  }
  if (from.isusb() != 0) {
    _internal_set_isusb(from._internal_isusb());
  }
}

void ProfileReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.ProfileReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileReq::CopyFrom(const ProfileReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.ProfileReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileReq::IsInitialized() const {
  return true;
}

void ProfileReq::InternalSwap(ProfileReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  datatypes_.InternalSwap(&other->datatypes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfileReq, isusb_)
      + sizeof(ProfileReq::isusb_)
      - PROTOBUF_FIELD_OFFSET(ProfileReq, profileapp_)>(
          reinterpret_cast<char*>(&profileapp_),
          reinterpret_cast<char*>(&other->profileapp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProfileApp::InitAsDefaultInstance() {
  ::perfcat::_ProfileApp_default_instance_.appinfo_ = const_cast< ::perfcat::ProfileAppInfo*>(
      ::perfcat::ProfileAppInfo::internal_default_instance());
  ::perfcat::_ProfileApp_default_instance_.pidname_ = const_cast< ::perfcat::ProfileAppPidName*>(
      ::perfcat::ProfileAppPidName::internal_default_instance());
}
class ProfileApp::_Internal {
 public:
  static const ::perfcat::ProfileAppInfo& appinfo(const ProfileApp* msg);
  static const ::perfcat::ProfileAppPidName& pidname(const ProfileApp* msg);
};

const ::perfcat::ProfileAppInfo&
ProfileApp::_Internal::appinfo(const ProfileApp* msg) {
  return *msg->target_.appinfo_;
}
const ::perfcat::ProfileAppPidName&
ProfileApp::_Internal::pidname(const ProfileApp* msg) {
  return *msg->target_.pidname_;
}
void ProfileApp::set_allocated_appinfo(::perfcat::ProfileAppInfo* appinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_target();
  if (appinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(appinfo);
    if (message_arena != submessage_arena) {
      appinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, appinfo, submessage_arena);
    }
    set_has_appinfo();
    target_.appinfo_ = appinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.ProfileApp.appInfo)
}
void ProfileApp::set_allocated_pidname(::perfcat::ProfileAppPidName* pidname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_target();
  if (pidname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pidname);
    if (message_arena != submessage_arena) {
      pidname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pidname, submessage_arena);
    }
    set_has_pidname();
    target_.pidname_ = pidname;
  }
  // @@protoc_insertion_point(field_set_allocated:perfcat.ProfileApp.pidName)
}
ProfileApp::ProfileApp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.ProfileApp)
}
ProfileApp::ProfileApp(const ProfileApp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_target();
  switch (from.target_case()) {
    case kAppInfo: {
      _internal_mutable_appinfo()->::perfcat::ProfileAppInfo::MergeFrom(from._internal_appinfo());
      break;
    }
    case kPidName: {
      _internal_mutable_pidname()->::perfcat::ProfileAppPidName::MergeFrom(from._internal_pidname());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:perfcat.ProfileApp)
}

void ProfileApp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfileApp_perfcat_2eproto.base);
  clear_has_target();
}

ProfileApp::~ProfileApp() {
  // @@protoc_insertion_point(destructor:perfcat.ProfileApp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfileApp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_target()) {
    clear_target();
  }
}

void ProfileApp::ArenaDtor(void* object) {
  ProfileApp* _this = reinterpret_cast< ProfileApp* >(object);
  (void)_this;
}
void ProfileApp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfileApp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfileApp& ProfileApp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfileApp_perfcat_2eproto.base);
  return *internal_default_instance();
}


void ProfileApp::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:perfcat.ProfileApp)
  switch (target_case()) {
    case kAppInfo: {
      if (GetArena() == nullptr) {
        delete target_.appinfo_;
      }
      break;
    }
    case kPidName: {
      if (GetArena() == nullptr) {
        delete target_.pidname_;
      }
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_NOT_SET;
}


void ProfileApp::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.ProfileApp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_target();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfileApp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .perfcat.ProfileAppInfo appInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_appinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.ProfileAppPidName pidName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pidname(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfileApp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.ProfileApp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .perfcat.ProfileAppInfo appInfo = 1;
  if (_internal_has_appinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::appinfo(this), target, stream);
  }

  // .perfcat.ProfileAppPidName pidName = 2;
  if (_internal_has_pidname()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pidname(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.ProfileApp)
  return target;
}

size_t ProfileApp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.ProfileApp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (target_case()) {
    // .perfcat.ProfileAppInfo appInfo = 1;
    case kAppInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_.appinfo_);
      break;
    }
    // .perfcat.ProfileAppPidName pidName = 2;
    case kPidName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_.pidname_);
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfileApp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.ProfileApp)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileApp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfileApp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.ProfileApp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.ProfileApp)
    MergeFrom(*source);
  }
}

void ProfileApp::MergeFrom(const ProfileApp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.ProfileApp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.target_case()) {
    case kAppInfo: {
      _internal_mutable_appinfo()->::perfcat::ProfileAppInfo::MergeFrom(from._internal_appinfo());
      break;
    }
    case kPidName: {
      _internal_mutable_pidname()->::perfcat::ProfileAppPidName::MergeFrom(from._internal_pidname());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
}

void ProfileApp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.ProfileApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileApp::CopyFrom(const ProfileApp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.ProfileApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileApp::IsInitialized() const {
  return true;
}

void ProfileApp::InternalSwap(ProfileApp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(target_, other->target_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileApp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProfileAppPidName::InitAsDefaultInstance() {
}
class ProfileAppPidName::_Internal {
 public:
};

ProfileAppPidName::ProfileAppPidName(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.ProfileAppPidName)
}
ProfileAppPidName::ProfileAppPidName(const ProfileAppPidName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  pid_ = from.pid_;
  // @@protoc_insertion_point(copy_constructor:perfcat.ProfileAppPidName)
}

void ProfileAppPidName::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfileAppPidName_perfcat_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pid_ = 0;
}

ProfileAppPidName::~ProfileAppPidName() {
  // @@protoc_insertion_point(destructor:perfcat.ProfileAppPidName)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfileAppPidName::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProfileAppPidName::ArenaDtor(void* object) {
  ProfileAppPidName* _this = reinterpret_cast< ProfileAppPidName* >(object);
  (void)_this;
}
void ProfileAppPidName::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfileAppPidName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfileAppPidName& ProfileAppPidName::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfileAppPidName_perfcat_2eproto.base);
  return *internal_default_instance();
}


void ProfileAppPidName::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.ProfileAppPidName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfileAppPidName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "perfcat.ProfileAppPidName.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfileAppPidName::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.ProfileAppPidName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pid = 1;
  if (this->pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_pid(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "perfcat.ProfileAppPidName.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.ProfileAppPidName)
  return target;
}

size_t ProfileAppPidName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.ProfileAppPidName)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 pid = 1;
  if (this->pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfileAppPidName::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.ProfileAppPidName)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileAppPidName* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfileAppPidName>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.ProfileAppPidName)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.ProfileAppPidName)
    MergeFrom(*source);
  }
}

void ProfileAppPidName::MergeFrom(const ProfileAppPidName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.ProfileAppPidName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
}

void ProfileAppPidName::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.ProfileAppPidName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileAppPidName::CopyFrom(const ProfileAppPidName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.ProfileAppPidName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileAppPidName::IsInitialized() const {
  return true;
}

void ProfileAppPidName::InternalSwap(ProfileAppPidName* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(pid_, other->pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileAppPidName::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProfileAppInfo::InitAsDefaultInstance() {
}
class ProfileAppInfo::_Internal {
 public:
};

ProfileAppInfo::ProfileAppInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.ProfileAppInfo)
}
ProfileAppInfo::ProfileAppInfo(const ProfileAppInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  processname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_processname().empty()) {
    processname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_processname(),
      GetArena());
  }
  packagename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_packagename().empty()) {
    packagename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_packagename(),
      GetArena());
  }
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:perfcat.ProfileAppInfo)
}

void ProfileAppInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfileAppInfo_perfcat_2eproto.base);
  processname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  packagename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userid_ = 0;
}

ProfileAppInfo::~ProfileAppInfo() {
  // @@protoc_insertion_point(destructor:perfcat.ProfileAppInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfileAppInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  processname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  packagename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProfileAppInfo::ArenaDtor(void* object) {
  ProfileAppInfo* _this = reinterpret_cast< ProfileAppInfo* >(object);
  (void)_this;
}
void ProfileAppInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfileAppInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfileAppInfo& ProfileAppInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfileAppInfo_perfcat_2eproto.base);
  return *internal_default_instance();
}


void ProfileAppInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.ProfileAppInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  processname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  packagename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  userid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfileAppInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string processName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_processname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "perfcat.ProfileAppInfo.processName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 userId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string packageName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_packagename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "perfcat.ProfileAppInfo.packageName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfileAppInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.ProfileAppInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string processName = 1;
  if (this->processname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_processname().data(), static_cast<int>(this->_internal_processname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "perfcat.ProfileAppInfo.processName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_processname(), target);
  }

  // int32 userId = 2;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_userid(), target);
  }

  // string packageName = 3;
  if (this->packagename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_packagename().data(), static_cast<int>(this->_internal_packagename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "perfcat.ProfileAppInfo.packageName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_packagename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.ProfileAppInfo)
  return target;
}

size_t ProfileAppInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.ProfileAppInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string processName = 1;
  if (this->processname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_processname());
  }

  // string packageName = 3;
  if (this->packagename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_packagename());
  }

  // int32 userId = 2;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfileAppInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.ProfileAppInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileAppInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfileAppInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.ProfileAppInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.ProfileAppInfo)
    MergeFrom(*source);
  }
}

void ProfileAppInfo::MergeFrom(const ProfileAppInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.ProfileAppInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.processname().size() > 0) {
    _internal_set_processname(from._internal_processname());
  }
  if (from.packagename().size() > 0) {
    _internal_set_packagename(from._internal_packagename());
  }
  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
}

void ProfileAppInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.ProfileAppInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileAppInfo::CopyFrom(const ProfileAppInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.ProfileAppInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileAppInfo::IsInitialized() const {
  return true;
}

void ProfileAppInfo::InternalSwap(ProfileAppInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  processname_.Swap(&other->processname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  packagename_.Swap(&other->packagename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileAppInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProfileRsp::InitAsDefaultInstance() {
}
class ProfileRsp::_Internal {
 public:
};

ProfileRsp::ProfileRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.ProfileRsp)
}
ProfileRsp::ProfileRsp(const ProfileRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&sessionid_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(sessionid_));
  // @@protoc_insertion_point(copy_constructor:perfcat.ProfileRsp)
}

void ProfileRsp::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sessionid_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(sessionid_));
}

ProfileRsp::~ProfileRsp() {
  // @@protoc_insertion_point(destructor:perfcat.ProfileRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfileRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProfileRsp::ArenaDtor(void* object) {
  ProfileRsp* _this = reinterpret_cast< ProfileRsp* >(object);
  (void)_this;
}
void ProfileRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfileRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfileRsp& ProfileRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfileRsp_perfcat_2eproto.base);
  return *internal_default_instance();
}


void ProfileRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.ProfileRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sessionid_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(sessionid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfileRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 errorCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sessionId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sessionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfileRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.ProfileRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // int32 errorCode = 2;
  if (this->errorcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_errorcode(), target);
  }

  // int32 sessionId = 3;
  if (this->sessionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.ProfileRsp)
  return target;
}

size_t ProfileRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.ProfileRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // int32 errorCode = 2;
  if (this->errorcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_errorcode());
  }

  // int32 sessionId = 3;
  if (this->sessionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sessionid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfileRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.ProfileRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfileRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.ProfileRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.ProfileRsp)
    MergeFrom(*source);
  }
}

void ProfileRsp::MergeFrom(const ProfileRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.ProfileRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.errorcode() != 0) {
    _internal_set_errorcode(from._internal_errorcode());
  }
  if (from.sessionid() != 0) {
    _internal_set_sessionid(from._internal_sessionid());
  }
}

void ProfileRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.ProfileRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileRsp::CopyFrom(const ProfileRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.ProfileRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileRsp::IsInitialized() const {
  return true;
}

void ProfileRsp::InternalSwap(ProfileRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfileRsp, sessionid_)
      + sizeof(ProfileRsp::sessionid_)
      - PROTOBUF_FIELD_OFFSET(ProfileRsp, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMemoryUsageReq::InitAsDefaultInstance() {
}
class GetMemoryUsageReq::_Internal {
 public:
};

GetMemoryUsageReq::GetMemoryUsageReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.GetMemoryUsageReq)
}
GetMemoryUsageReq::GetMemoryUsageReq(const GetMemoryUsageReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&unknow_, &from.unknow_,
    static_cast<size_t>(reinterpret_cast<char*>(&pid_) -
    reinterpret_cast<char*>(&unknow_)) + sizeof(pid_));
  // @@protoc_insertion_point(copy_constructor:perfcat.GetMemoryUsageReq)
}

void GetMemoryUsageReq::SharedCtor() {
  ::memset(&unknow_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pid_) -
      reinterpret_cast<char*>(&unknow_)) + sizeof(pid_));
}

GetMemoryUsageReq::~GetMemoryUsageReq() {
  // @@protoc_insertion_point(destructor:perfcat.GetMemoryUsageReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetMemoryUsageReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetMemoryUsageReq::ArenaDtor(void* object) {
  GetMemoryUsageReq* _this = reinterpret_cast< GetMemoryUsageReq* >(object);
  (void)_this;
}
void GetMemoryUsageReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetMemoryUsageReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMemoryUsageReq& GetMemoryUsageReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMemoryUsageReq_perfcat_2eproto.base);
  return *internal_default_instance();
}


void GetMemoryUsageReq::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.GetMemoryUsageReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&unknow_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pid_) -
      reinterpret_cast<char*>(&unknow_)) + sizeof(pid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMemoryUsageReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 unknow = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          unknow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMemoryUsageReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.GetMemoryUsageReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pid = 1;
  if (this->pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_pid(), target);
  }

  // int64 unknow = 2;
  if (this->unknow() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_unknow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.GetMemoryUsageReq)
  return target;
}

size_t GetMemoryUsageReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.GetMemoryUsageReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 unknow = 2;
  if (this->unknow() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_unknow());
  }

  // int32 pid = 1;
  if (this->pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMemoryUsageReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.GetMemoryUsageReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMemoryUsageReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMemoryUsageReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.GetMemoryUsageReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.GetMemoryUsageReq)
    MergeFrom(*source);
  }
}

void GetMemoryUsageReq::MergeFrom(const GetMemoryUsageReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.GetMemoryUsageReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.unknow() != 0) {
    _internal_set_unknow(from._internal_unknow());
  }
  if (from.pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
}

void GetMemoryUsageReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.GetMemoryUsageReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMemoryUsageReq::CopyFrom(const GetMemoryUsageReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.GetMemoryUsageReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMemoryUsageReq::IsInitialized() const {
  return true;
}

void GetMemoryUsageReq::InternalSwap(GetMemoryUsageReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetMemoryUsageReq, pid_)
      + sizeof(GetMemoryUsageReq::pid_)
      - PROTOBUF_FIELD_OFFSET(GetMemoryUsageReq, unknow_)>(
          reinterpret_cast<char*>(&unknow_),
          reinterpret_cast<char*>(&other->unknow_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMemoryUsageReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMemoryUsageRsp::InitAsDefaultInstance() {
  ::perfcat::_GetMemoryUsageRsp_default_instance_._instance.get_mutable()->memory_ = const_cast< ::perfcat::Memory*>(
      ::perfcat::Memory::internal_default_instance());
}
class GetMemoryUsageRsp::_Internal {
 public:
  static const ::perfcat::Memory& memory(const GetMemoryUsageRsp* msg);
};

const ::perfcat::Memory&
GetMemoryUsageRsp::_Internal::memory(const GetMemoryUsageRsp* msg) {
  return *msg->memory_;
}
GetMemoryUsageRsp::GetMemoryUsageRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.GetMemoryUsageRsp)
}
GetMemoryUsageRsp::GetMemoryUsageRsp(const GetMemoryUsageRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_memory()) {
    memory_ = new ::perfcat::Memory(*from.memory_);
  } else {
    memory_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:perfcat.GetMemoryUsageRsp)
}

void GetMemoryUsageRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetMemoryUsageRsp_perfcat_2eproto.base);
  memory_ = nullptr;
}

GetMemoryUsageRsp::~GetMemoryUsageRsp() {
  // @@protoc_insertion_point(destructor:perfcat.GetMemoryUsageRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetMemoryUsageRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete memory_;
}

void GetMemoryUsageRsp::ArenaDtor(void* object) {
  GetMemoryUsageRsp* _this = reinterpret_cast< GetMemoryUsageRsp* >(object);
  (void)_this;
}
void GetMemoryUsageRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetMemoryUsageRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMemoryUsageRsp& GetMemoryUsageRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMemoryUsageRsp_perfcat_2eproto.base);
  return *internal_default_instance();
}


void GetMemoryUsageRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.GetMemoryUsageRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && memory_ != nullptr) {
    delete memory_;
  }
  memory_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMemoryUsageRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .perfcat.Memory memory = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_memory(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMemoryUsageRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.GetMemoryUsageRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .perfcat.Memory memory = 1;
  if (this->has_memory()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::memory(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.GetMemoryUsageRsp)
  return target;
}

size_t GetMemoryUsageRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.GetMemoryUsageRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .perfcat.Memory memory = 1;
  if (this->has_memory()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *memory_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMemoryUsageRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.GetMemoryUsageRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMemoryUsageRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMemoryUsageRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.GetMemoryUsageRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.GetMemoryUsageRsp)
    MergeFrom(*source);
  }
}

void GetMemoryUsageRsp::MergeFrom(const GetMemoryUsageRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.GetMemoryUsageRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_memory()) {
    _internal_mutable_memory()->::perfcat::Memory::MergeFrom(from._internal_memory());
  }
}

void GetMemoryUsageRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.GetMemoryUsageRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMemoryUsageRsp::CopyFrom(const GetMemoryUsageRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.GetMemoryUsageRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMemoryUsageRsp::IsInitialized() const {
  return true;
}

void GetMemoryUsageRsp::InternalSwap(GetMemoryUsageRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(memory_, other->memory_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMemoryUsageRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopProfileReq::InitAsDefaultInstance() {
}
class StopProfileReq::_Internal {
 public:
};

StopProfileReq::StopProfileReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.StopProfileReq)
}
StopProfileReq::StopProfileReq(const StopProfileReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfcat.StopProfileReq)
}

void StopProfileReq::SharedCtor() {
}

StopProfileReq::~StopProfileReq() {
  // @@protoc_insertion_point(destructor:perfcat.StopProfileReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StopProfileReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StopProfileReq::ArenaDtor(void* object) {
  StopProfileReq* _this = reinterpret_cast< StopProfileReq* >(object);
  (void)_this;
}
void StopProfileReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopProfileReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopProfileReq& StopProfileReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopProfileReq_perfcat_2eproto.base);
  return *internal_default_instance();
}


void StopProfileReq::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.StopProfileReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopProfileReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopProfileReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.StopProfileReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.StopProfileReq)
  return target;
}

size_t StopProfileReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.StopProfileReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopProfileReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.StopProfileReq)
  GOOGLE_DCHECK_NE(&from, this);
  const StopProfileReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopProfileReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.StopProfileReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.StopProfileReq)
    MergeFrom(*source);
  }
}

void StopProfileReq::MergeFrom(const StopProfileReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.StopProfileReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StopProfileReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.StopProfileReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopProfileReq::CopyFrom(const StopProfileReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.StopProfileReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopProfileReq::IsInitialized() const {
  return true;
}

void StopProfileReq::InternalSwap(StopProfileReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopProfileReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopProfileRsp::InitAsDefaultInstance() {
}
class StopProfileRsp::_Internal {
 public:
};

StopProfileRsp::StopProfileRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.StopProfileRsp)
}
StopProfileRsp::StopProfileRsp(const StopProfileRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfcat.StopProfileRsp)
}

void StopProfileRsp::SharedCtor() {
}

StopProfileRsp::~StopProfileRsp() {
  // @@protoc_insertion_point(destructor:perfcat.StopProfileRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StopProfileRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StopProfileRsp::ArenaDtor(void* object) {
  StopProfileRsp* _this = reinterpret_cast< StopProfileRsp* >(object);
  (void)_this;
}
void StopProfileRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopProfileRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopProfileRsp& StopProfileRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopProfileRsp_perfcat_2eproto.base);
  return *internal_default_instance();
}


void StopProfileRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.StopProfileRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopProfileRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopProfileRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.StopProfileRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.StopProfileRsp)
  return target;
}

size_t StopProfileRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.StopProfileRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopProfileRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.StopProfileRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const StopProfileRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopProfileRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.StopProfileRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.StopProfileRsp)
    MergeFrom(*source);
  }
}

void StopProfileRsp::MergeFrom(const StopProfileRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.StopProfileRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StopProfileRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.StopProfileRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopProfileRsp::CopyFrom(const StopProfileRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.StopProfileRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopProfileRsp::IsInitialized() const {
  return true;
}

void StopProfileRsp::InternalSwap(StopProfileRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopProfileRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CheckDeviceReq::InitAsDefaultInstance() {
}
class CheckDeviceReq::_Internal {
 public:
};

CheckDeviceReq::CheckDeviceReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.CheckDeviceReq)
}
CheckDeviceReq::CheckDeviceReq(const CheckDeviceReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfcat.CheckDeviceReq)
}

void CheckDeviceReq::SharedCtor() {
}

CheckDeviceReq::~CheckDeviceReq() {
  // @@protoc_insertion_point(destructor:perfcat.CheckDeviceReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CheckDeviceReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CheckDeviceReq::ArenaDtor(void* object) {
  CheckDeviceReq* _this = reinterpret_cast< CheckDeviceReq* >(object);
  (void)_this;
}
void CheckDeviceReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckDeviceReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckDeviceReq& CheckDeviceReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckDeviceReq_perfcat_2eproto.base);
  return *internal_default_instance();
}


void CheckDeviceReq::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.CheckDeviceReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckDeviceReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckDeviceReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.CheckDeviceReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.CheckDeviceReq)
  return target;
}

size_t CheckDeviceReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.CheckDeviceReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckDeviceReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.CheckDeviceReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckDeviceReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckDeviceReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.CheckDeviceReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.CheckDeviceReq)
    MergeFrom(*source);
  }
}

void CheckDeviceReq::MergeFrom(const CheckDeviceReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.CheckDeviceReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CheckDeviceReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.CheckDeviceReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckDeviceReq::CopyFrom(const CheckDeviceReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.CheckDeviceReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckDeviceReq::IsInitialized() const {
  return true;
}

void CheckDeviceReq::InternalSwap(CheckDeviceReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckDeviceReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CheckDeviceRsp::InitAsDefaultInstance() {
}
class CheckDeviceRsp::_Internal {
 public:
};

CheckDeviceRsp::CheckDeviceRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.CheckDeviceRsp)
}
CheckDeviceRsp::CheckDeviceRsp(const CheckDeviceRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&e2_, &from.e2_,
    static_cast<size_t>(reinterpret_cast<char*>(&cputemperature_) -
    reinterpret_cast<char*>(&e2_)) + sizeof(cputemperature_));
  // @@protoc_insertion_point(copy_constructor:perfcat.CheckDeviceRsp)
}

void CheckDeviceRsp::SharedCtor() {
  ::memset(&e2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cputemperature_) -
      reinterpret_cast<char*>(&e2_)) + sizeof(cputemperature_));
}

CheckDeviceRsp::~CheckDeviceRsp() {
  // @@protoc_insertion_point(destructor:perfcat.CheckDeviceRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CheckDeviceRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CheckDeviceRsp::ArenaDtor(void* object) {
  CheckDeviceRsp* _this = reinterpret_cast< CheckDeviceRsp* >(object);
  (void)_this;
}
void CheckDeviceRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckDeviceRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckDeviceRsp& CheckDeviceRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckDeviceRsp_perfcat_2eproto.base);
  return *internal_default_instance();
}


void CheckDeviceRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.CheckDeviceRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&e2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cputemperature_) -
      reinterpret_cast<char*>(&e2_)) + sizeof(cputemperature_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckDeviceRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool e2 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          e2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool gpuFreq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gpufreq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool gpuUsage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gpuusage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool sw0 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sw0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool cpuTemperature = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          cputemperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckDeviceRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.CheckDeviceRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool e2 = 1;
  if (this->e2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_e2(), target);
  }

  // bool gpuFreq = 2;
  if (this->gpufreq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_gpufreq(), target);
  }

  // bool gpuUsage = 3;
  if (this->gpuusage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_gpuusage(), target);
  }

  // bool sw0 = 4;
  if (this->sw0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_sw0(), target);
  }

  // bool cpuTemperature = 5;
  if (this->cputemperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_cputemperature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.CheckDeviceRsp)
  return target;
}

size_t CheckDeviceRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.CheckDeviceRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool e2 = 1;
  if (this->e2() != 0) {
    total_size += 1 + 1;
  }

  // bool gpuFreq = 2;
  if (this->gpufreq() != 0) {
    total_size += 1 + 1;
  }

  // bool gpuUsage = 3;
  if (this->gpuusage() != 0) {
    total_size += 1 + 1;
  }

  // bool sw0 = 4;
  if (this->sw0() != 0) {
    total_size += 1 + 1;
  }

  // bool cpuTemperature = 5;
  if (this->cputemperature() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckDeviceRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.CheckDeviceRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckDeviceRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckDeviceRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.CheckDeviceRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.CheckDeviceRsp)
    MergeFrom(*source);
  }
}

void CheckDeviceRsp::MergeFrom(const CheckDeviceRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.CheckDeviceRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.e2() != 0) {
    _internal_set_e2(from._internal_e2());
  }
  if (from.gpufreq() != 0) {
    _internal_set_gpufreq(from._internal_gpufreq());
  }
  if (from.gpuusage() != 0) {
    _internal_set_gpuusage(from._internal_gpuusage());
  }
  if (from.sw0() != 0) {
    _internal_set_sw0(from._internal_sw0());
  }
  if (from.cputemperature() != 0) {
    _internal_set_cputemperature(from._internal_cputemperature());
  }
}

void CheckDeviceRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.CheckDeviceRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckDeviceRsp::CopyFrom(const CheckDeviceRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.CheckDeviceRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckDeviceRsp::IsInitialized() const {
  return true;
}

void CheckDeviceRsp::InternalSwap(CheckDeviceRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CheckDeviceRsp, cputemperature_)
      + sizeof(CheckDeviceRsp::cputemperature_)
      - PROTOBUF_FIELD_OFFSET(CheckDeviceRsp, e2_)>(
          reinterpret_cast<char*>(&e2_),
          reinterpret_cast<char*>(&other->e2_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckDeviceRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProfileNtf::InitAsDefaultInstance() {
  ::perfcat::_ProfileNtf_default_instance_._instance.get_mutable()->cpuusage_ = const_cast< ::perfcat::CpuUsage*>(
      ::perfcat::CpuUsage::internal_default_instance());
  ::perfcat::_ProfileNtf_default_instance_._instance.get_mutable()->cpufreq_ = const_cast< ::perfcat::CpuFreq*>(
      ::perfcat::CpuFreq::internal_default_instance());
  ::perfcat::_ProfileNtf_default_instance_._instance.get_mutable()->gpuusage_ = const_cast< ::perfcat::GpuUsage*>(
      ::perfcat::GpuUsage::internal_default_instance());
  ::perfcat::_ProfileNtf_default_instance_._instance.get_mutable()->gpufreq_ = const_cast< ::perfcat::GpuFreq*>(
      ::perfcat::GpuFreq::internal_default_instance());
  ::perfcat::_ProfileNtf_default_instance_._instance.get_mutable()->fps_ = const_cast< ::perfcat::FPS*>(
      ::perfcat::FPS::internal_default_instance());
  ::perfcat::_ProfileNtf_default_instance_._instance.get_mutable()->screenshot_ = const_cast< ::perfcat::Screenshot*>(
      ::perfcat::Screenshot::internal_default_instance());
  ::perfcat::_ProfileNtf_default_instance_._instance.get_mutable()->memory_ = const_cast< ::perfcat::Memory*>(
      ::perfcat::Memory::internal_default_instance());
  ::perfcat::_ProfileNtf_default_instance_._instance.get_mutable()->network_ = const_cast< ::perfcat::Network*>(
      ::perfcat::Network::internal_default_instance());
  ::perfcat::_ProfileNtf_default_instance_._instance.get_mutable()->power_ = const_cast< ::perfcat::Power*>(
      ::perfcat::Power::internal_default_instance());
  ::perfcat::_ProfileNtf_default_instance_._instance.get_mutable()->temp_ = const_cast< ::perfcat::Temp*>(
      ::perfcat::Temp::internal_default_instance());
  ::perfcat::_ProfileNtf_default_instance_._instance.get_mutable()->frametime_ = const_cast< ::perfcat::FrameTime*>(
      ::perfcat::FrameTime::internal_default_instance());
  ::perfcat::_ProfileNtf_default_instance_._instance.get_mutable()->coreusage_ = const_cast< ::perfcat::CoreUsage*>(
      ::perfcat::CoreUsage::internal_default_instance());
  ::perfcat::_ProfileNtf_default_instance_._instance.get_mutable()->virtualmemory_ = const_cast< ::perfcat::VirtualMemory*>(
      ::perfcat::VirtualMemory::internal_default_instance());
}
class ProfileNtf::_Internal {
 public:
  static const ::perfcat::CpuUsage& cpuusage(const ProfileNtf* msg);
  static const ::perfcat::CpuFreq& cpufreq(const ProfileNtf* msg);
  static const ::perfcat::GpuUsage& gpuusage(const ProfileNtf* msg);
  static const ::perfcat::GpuFreq& gpufreq(const ProfileNtf* msg);
  static const ::perfcat::FPS& fps(const ProfileNtf* msg);
  static const ::perfcat::Screenshot& screenshot(const ProfileNtf* msg);
  static const ::perfcat::Memory& memory(const ProfileNtf* msg);
  static const ::perfcat::Network& network(const ProfileNtf* msg);
  static const ::perfcat::Power& power(const ProfileNtf* msg);
  static const ::perfcat::Temp& temp(const ProfileNtf* msg);
  static const ::perfcat::FrameTime& frametime(const ProfileNtf* msg);
  static const ::perfcat::CoreUsage& coreusage(const ProfileNtf* msg);
  static const ::perfcat::VirtualMemory& virtualmemory(const ProfileNtf* msg);
};

const ::perfcat::CpuUsage&
ProfileNtf::_Internal::cpuusage(const ProfileNtf* msg) {
  return *msg->cpuusage_;
}
const ::perfcat::CpuFreq&
ProfileNtf::_Internal::cpufreq(const ProfileNtf* msg) {
  return *msg->cpufreq_;
}
const ::perfcat::GpuUsage&
ProfileNtf::_Internal::gpuusage(const ProfileNtf* msg) {
  return *msg->gpuusage_;
}
const ::perfcat::GpuFreq&
ProfileNtf::_Internal::gpufreq(const ProfileNtf* msg) {
  return *msg->gpufreq_;
}
const ::perfcat::FPS&
ProfileNtf::_Internal::fps(const ProfileNtf* msg) {
  return *msg->fps_;
}
const ::perfcat::Screenshot&
ProfileNtf::_Internal::screenshot(const ProfileNtf* msg) {
  return *msg->screenshot_;
}
const ::perfcat::Memory&
ProfileNtf::_Internal::memory(const ProfileNtf* msg) {
  return *msg->memory_;
}
const ::perfcat::Network&
ProfileNtf::_Internal::network(const ProfileNtf* msg) {
  return *msg->network_;
}
const ::perfcat::Power&
ProfileNtf::_Internal::power(const ProfileNtf* msg) {
  return *msg->power_;
}
const ::perfcat::Temp&
ProfileNtf::_Internal::temp(const ProfileNtf* msg) {
  return *msg->temp_;
}
const ::perfcat::FrameTime&
ProfileNtf::_Internal::frametime(const ProfileNtf* msg) {
  return *msg->frametime_;
}
const ::perfcat::CoreUsage&
ProfileNtf::_Internal::coreusage(const ProfileNtf* msg) {
  return *msg->coreusage_;
}
const ::perfcat::VirtualMemory&
ProfileNtf::_Internal::virtualmemory(const ProfileNtf* msg) {
  return *msg->virtualmemory_;
}
ProfileNtf::ProfileNtf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.ProfileNtf)
}
ProfileNtf::ProfileNtf(const ProfileNtf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cpuusage()) {
    cpuusage_ = new ::perfcat::CpuUsage(*from.cpuusage_);
  } else {
    cpuusage_ = nullptr;
  }
  if (from._internal_has_cpufreq()) {
    cpufreq_ = new ::perfcat::CpuFreq(*from.cpufreq_);
  } else {
    cpufreq_ = nullptr;
  }
  if (from._internal_has_gpuusage()) {
    gpuusage_ = new ::perfcat::GpuUsage(*from.gpuusage_);
  } else {
    gpuusage_ = nullptr;
  }
  if (from._internal_has_gpufreq()) {
    gpufreq_ = new ::perfcat::GpuFreq(*from.gpufreq_);
  } else {
    gpufreq_ = nullptr;
  }
  if (from._internal_has_fps()) {
    fps_ = new ::perfcat::FPS(*from.fps_);
  } else {
    fps_ = nullptr;
  }
  if (from._internal_has_screenshot()) {
    screenshot_ = new ::perfcat::Screenshot(*from.screenshot_);
  } else {
    screenshot_ = nullptr;
  }
  if (from._internal_has_memory()) {
    memory_ = new ::perfcat::Memory(*from.memory_);
  } else {
    memory_ = nullptr;
  }
  if (from._internal_has_network()) {
    network_ = new ::perfcat::Network(*from.network_);
  } else {
    network_ = nullptr;
  }
  if (from._internal_has_power()) {
    power_ = new ::perfcat::Power(*from.power_);
  } else {
    power_ = nullptr;
  }
  if (from._internal_has_temp()) {
    temp_ = new ::perfcat::Temp(*from.temp_);
  } else {
    temp_ = nullptr;
  }
  if (from._internal_has_frametime()) {
    frametime_ = new ::perfcat::FrameTime(*from.frametime_);
  } else {
    frametime_ = nullptr;
  }
  if (from._internal_has_coreusage()) {
    coreusage_ = new ::perfcat::CoreUsage(*from.coreusage_);
  } else {
    coreusage_ = nullptr;
  }
  if (from._internal_has_virtualmemory()) {
    virtualmemory_ = new ::perfcat::VirtualMemory(*from.virtualmemory_);
  } else {
    virtualmemory_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:perfcat.ProfileNtf)
}

void ProfileNtf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfileNtf_perfcat_2eproto.base);
  ::memset(&cpuusage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&cpuusage_)) + sizeof(index_));
}

ProfileNtf::~ProfileNtf() {
  // @@protoc_insertion_point(destructor:perfcat.ProfileNtf)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfileNtf::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete cpuusage_;
  if (this != internal_default_instance()) delete cpufreq_;
  if (this != internal_default_instance()) delete gpuusage_;
  if (this != internal_default_instance()) delete gpufreq_;
  if (this != internal_default_instance()) delete fps_;
  if (this != internal_default_instance()) delete screenshot_;
  if (this != internal_default_instance()) delete memory_;
  if (this != internal_default_instance()) delete network_;
  if (this != internal_default_instance()) delete power_;
  if (this != internal_default_instance()) delete temp_;
  if (this != internal_default_instance()) delete frametime_;
  if (this != internal_default_instance()) delete coreusage_;
  if (this != internal_default_instance()) delete virtualmemory_;
}

void ProfileNtf::ArenaDtor(void* object) {
  ProfileNtf* _this = reinterpret_cast< ProfileNtf* >(object);
  (void)_this;
}
void ProfileNtf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfileNtf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfileNtf& ProfileNtf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfileNtf_perfcat_2eproto.base);
  return *internal_default_instance();
}


void ProfileNtf::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.ProfileNtf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && cpuusage_ != nullptr) {
    delete cpuusage_;
  }
  cpuusage_ = nullptr;
  if (GetArena() == nullptr && cpufreq_ != nullptr) {
    delete cpufreq_;
  }
  cpufreq_ = nullptr;
  if (GetArena() == nullptr && gpuusage_ != nullptr) {
    delete gpuusage_;
  }
  gpuusage_ = nullptr;
  if (GetArena() == nullptr && gpufreq_ != nullptr) {
    delete gpufreq_;
  }
  gpufreq_ = nullptr;
  if (GetArena() == nullptr && fps_ != nullptr) {
    delete fps_;
  }
  fps_ = nullptr;
  if (GetArena() == nullptr && screenshot_ != nullptr) {
    delete screenshot_;
  }
  screenshot_ = nullptr;
  if (GetArena() == nullptr && memory_ != nullptr) {
    delete memory_;
  }
  memory_ = nullptr;
  if (GetArena() == nullptr && network_ != nullptr) {
    delete network_;
  }
  network_ = nullptr;
  if (GetArena() == nullptr && power_ != nullptr) {
    delete power_;
  }
  power_ = nullptr;
  if (GetArena() == nullptr && temp_ != nullptr) {
    delete temp_;
  }
  temp_ = nullptr;
  if (GetArena() == nullptr && frametime_ != nullptr) {
    delete frametime_;
  }
  frametime_ = nullptr;
  if (GetArena() == nullptr && coreusage_ != nullptr) {
    delete coreusage_;
  }
  coreusage_ = nullptr;
  if (GetArena() == nullptr && virtualmemory_ != nullptr) {
    delete virtualmemory_;
  }
  virtualmemory_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfileNtf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.CpuUsage cpuUsage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpuusage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.CpuFreq cpuFreq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpufreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.GpuUsage gpuUsage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_gpuusage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.GpuFreq gpuFreq = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_gpufreq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.FPS fps = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_fps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.Screenshot screenshot = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_screenshot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.Memory memory = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_memory(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.Network network = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_network(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.Power power = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_power(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.Temp temp = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_temp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.FrameTime frameTime = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_frametime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.CoreUsage coreUsage = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_coreusage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.VirtualMemory virtualMemory = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_virtualmemory(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfileNtf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.ProfileNtf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // .perfcat.CpuUsage cpuUsage = 2;
  if (this->has_cpuusage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cpuusage(this), target, stream);
  }

  // .perfcat.CpuFreq cpuFreq = 3;
  if (this->has_cpufreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cpufreq(this), target, stream);
  }

  // .perfcat.GpuUsage gpuUsage = 4;
  if (this->has_gpuusage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::gpuusage(this), target, stream);
  }

  // .perfcat.GpuFreq gpuFreq = 5;
  if (this->has_gpufreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::gpufreq(this), target, stream);
  }

  // .perfcat.FPS fps = 6;
  if (this->has_fps()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::fps(this), target, stream);
  }

  // .perfcat.Screenshot screenshot = 9;
  if (this->has_screenshot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::screenshot(this), target, stream);
  }

  // .perfcat.Memory memory = 10;
  if (this->has_memory()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::memory(this), target, stream);
  }

  // .perfcat.Network network = 11;
  if (this->has_network()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::network(this), target, stream);
  }

  // .perfcat.Power power = 12;
  if (this->has_power()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::power(this), target, stream);
  }

  // int64 timestamp = 13;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_timestamp(), target);
  }

  // .perfcat.Temp temp = 14;
  if (this->has_temp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::temp(this), target, stream);
  }

  // .perfcat.FrameTime frameTime = 15;
  if (this->has_frametime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::frametime(this), target, stream);
  }

  // .perfcat.CoreUsage coreUsage = 16;
  if (this->has_coreusage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::coreusage(this), target, stream);
  }

  // .perfcat.VirtualMemory virtualMemory = 17;
  if (this->has_virtualmemory()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::virtualmemory(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.ProfileNtf)
  return target;
}

size_t ProfileNtf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.ProfileNtf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .perfcat.CpuUsage cpuUsage = 2;
  if (this->has_cpuusage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cpuusage_);
  }

  // .perfcat.CpuFreq cpuFreq = 3;
  if (this->has_cpufreq()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cpufreq_);
  }

  // .perfcat.GpuUsage gpuUsage = 4;
  if (this->has_gpuusage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gpuusage_);
  }

  // .perfcat.GpuFreq gpuFreq = 5;
  if (this->has_gpufreq()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gpufreq_);
  }

  // .perfcat.FPS fps = 6;
  if (this->has_fps()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fps_);
  }

  // .perfcat.Screenshot screenshot = 9;
  if (this->has_screenshot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *screenshot_);
  }

  // .perfcat.Memory memory = 10;
  if (this->has_memory()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *memory_);
  }

  // .perfcat.Network network = 11;
  if (this->has_network()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *network_);
  }

  // .perfcat.Power power = 12;
  if (this->has_power()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *power_);
  }

  // .perfcat.Temp temp = 14;
  if (this->has_temp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *temp_);
  }

  // .perfcat.FrameTime frameTime = 15;
  if (this->has_frametime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frametime_);
  }

  // .perfcat.CoreUsage coreUsage = 16;
  if (this->has_coreusage()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coreusage_);
  }

  // .perfcat.VirtualMemory virtualMemory = 17;
  if (this->has_virtualmemory()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *virtualmemory_);
  }

  // int64 timestamp = 13;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfileNtf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.ProfileNtf)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileNtf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfileNtf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.ProfileNtf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.ProfileNtf)
    MergeFrom(*source);
  }
}

void ProfileNtf::MergeFrom(const ProfileNtf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.ProfileNtf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cpuusage()) {
    _internal_mutable_cpuusage()->::perfcat::CpuUsage::MergeFrom(from._internal_cpuusage());
  }
  if (from.has_cpufreq()) {
    _internal_mutable_cpufreq()->::perfcat::CpuFreq::MergeFrom(from._internal_cpufreq());
  }
  if (from.has_gpuusage()) {
    _internal_mutable_gpuusage()->::perfcat::GpuUsage::MergeFrom(from._internal_gpuusage());
  }
  if (from.has_gpufreq()) {
    _internal_mutable_gpufreq()->::perfcat::GpuFreq::MergeFrom(from._internal_gpufreq());
  }
  if (from.has_fps()) {
    _internal_mutable_fps()->::perfcat::FPS::MergeFrom(from._internal_fps());
  }
  if (from.has_screenshot()) {
    _internal_mutable_screenshot()->::perfcat::Screenshot::MergeFrom(from._internal_screenshot());
  }
  if (from.has_memory()) {
    _internal_mutable_memory()->::perfcat::Memory::MergeFrom(from._internal_memory());
  }
  if (from.has_network()) {
    _internal_mutable_network()->::perfcat::Network::MergeFrom(from._internal_network());
  }
  if (from.has_power()) {
    _internal_mutable_power()->::perfcat::Power::MergeFrom(from._internal_power());
  }
  if (from.has_temp()) {
    _internal_mutable_temp()->::perfcat::Temp::MergeFrom(from._internal_temp());
  }
  if (from.has_frametime()) {
    _internal_mutable_frametime()->::perfcat::FrameTime::MergeFrom(from._internal_frametime());
  }
  if (from.has_coreusage()) {
    _internal_mutable_coreusage()->::perfcat::CoreUsage::MergeFrom(from._internal_coreusage());
  }
  if (from.has_virtualmemory()) {
    _internal_mutable_virtualmemory()->::perfcat::VirtualMemory::MergeFrom(from._internal_virtualmemory());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void ProfileNtf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.ProfileNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileNtf::CopyFrom(const ProfileNtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.ProfileNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileNtf::IsInitialized() const {
  return true;
}

void ProfileNtf::InternalSwap(ProfileNtf* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfileNtf, index_)
      + sizeof(ProfileNtf::index_)
      - PROTOBUF_FIELD_OFFSET(ProfileNtf, cpuusage_)>(
          reinterpret_cast<char*>(&cpuusage_),
          reinterpret_cast<char*>(&other->cpuusage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileNtf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Screenshot::InitAsDefaultInstance() {
}
class Screenshot::_Internal {
 public:
};

Screenshot::Screenshot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.Screenshot)
}
Screenshot::Screenshot(const Screenshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  orientation_ = from.orientation_;
  // @@protoc_insertion_point(copy_constructor:perfcat.Screenshot)
}

void Screenshot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Screenshot_perfcat_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orientation_ = 0;
}

Screenshot::~Screenshot() {
  // @@protoc_insertion_point(destructor:perfcat.Screenshot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Screenshot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Screenshot::ArenaDtor(void* object) {
  Screenshot* _this = reinterpret_cast< Screenshot* >(object);
  (void)_this;
}
void Screenshot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Screenshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Screenshot& Screenshot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Screenshot_perfcat_2eproto.base);
  return *internal_default_instance();
}


void Screenshot::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.Screenshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  orientation_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Screenshot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.Screenshot.Orientation orientation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_orientation(static_cast<::perfcat::Screenshot_Orientation>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Screenshot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.Screenshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // .perfcat.Screenshot.Orientation orientation = 3;
  if (this->orientation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_orientation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.Screenshot)
  return target;
}

size_t Screenshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.Screenshot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .perfcat.Screenshot.Orientation orientation = 3;
  if (this->orientation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_orientation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Screenshot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.Screenshot)
  GOOGLE_DCHECK_NE(&from, this);
  const Screenshot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Screenshot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.Screenshot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.Screenshot)
    MergeFrom(*source);
  }
}

void Screenshot::MergeFrom(const Screenshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.Screenshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.orientation() != 0) {
    _internal_set_orientation(from._internal_orientation());
  }
}

void Screenshot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.Screenshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Screenshot::CopyFrom(const Screenshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.Screenshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Screenshot::IsInitialized() const {
  return true;
}

void Screenshot::InternalSwap(Screenshot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(orientation_, other->orientation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Screenshot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VirtualMemory::InitAsDefaultInstance() {
}
class VirtualMemory::_Internal {
 public:
};

VirtualMemory::VirtualMemory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.VirtualMemory)
}
VirtualMemory::VirtualMemory(const VirtualMemory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  virtualmemory_ = from.virtualmemory_;
  // @@protoc_insertion_point(copy_constructor:perfcat.VirtualMemory)
}

void VirtualMemory::SharedCtor() {
  virtualmemory_ = 0;
}

VirtualMemory::~VirtualMemory() {
  // @@protoc_insertion_point(destructor:perfcat.VirtualMemory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VirtualMemory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VirtualMemory::ArenaDtor(void* object) {
  VirtualMemory* _this = reinterpret_cast< VirtualMemory* >(object);
  (void)_this;
}
void VirtualMemory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtualMemory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VirtualMemory& VirtualMemory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VirtualMemory_perfcat_2eproto.base);
  return *internal_default_instance();
}


void VirtualMemory::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.VirtualMemory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  virtualmemory_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtualMemory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 virtualMemory = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          virtualmemory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VirtualMemory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.VirtualMemory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 virtualMemory = 1;
  if (this->virtualmemory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_virtualmemory(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.VirtualMemory)
  return target;
}

size_t VirtualMemory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.VirtualMemory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 virtualMemory = 1;
  if (this->virtualmemory() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_virtualmemory());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VirtualMemory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.VirtualMemory)
  GOOGLE_DCHECK_NE(&from, this);
  const VirtualMemory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VirtualMemory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.VirtualMemory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.VirtualMemory)
    MergeFrom(*source);
  }
}

void VirtualMemory::MergeFrom(const VirtualMemory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.VirtualMemory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.virtualmemory() != 0) {
    _internal_set_virtualmemory(from._internal_virtualmemory());
  }
}

void VirtualMemory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.VirtualMemory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VirtualMemory::CopyFrom(const VirtualMemory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.VirtualMemory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualMemory::IsInitialized() const {
  return true;
}

void VirtualMemory::InternalSwap(VirtualMemory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(virtualmemory_, other->virtualmemory_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtualMemory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Power::InitAsDefaultInstance() {
}
class Power::_Internal {
 public:
};

Power::Power(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.Power)
}
Power::Power(const Power& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&current_, &from.current_,
    static_cast<size_t>(reinterpret_cast<char*>(&voltage_) -
    reinterpret_cast<char*>(&current_)) + sizeof(voltage_));
  // @@protoc_insertion_point(copy_constructor:perfcat.Power)
}

void Power::SharedCtor() {
  ::memset(&current_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&voltage_) -
      reinterpret_cast<char*>(&current_)) + sizeof(voltage_));
}

Power::~Power() {
  // @@protoc_insertion_point(destructor:perfcat.Power)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Power::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Power::ArenaDtor(void* object) {
  Power* _this = reinterpret_cast< Power* >(object);
  (void)_this;
}
void Power::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Power::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Power& Power::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Power_perfcat_2eproto.base);
  return *internal_default_instance();
}


void Power::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.Power)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&current_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&voltage_) -
      reinterpret_cast<char*>(&current_)) + sizeof(voltage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Power::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 current = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 voltage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Power::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.Power)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 current = 1;
  if (this->current() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_current(), target);
  }

  // int32 voltage = 2;
  if (this->voltage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_voltage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.Power)
  return target;
}

size_t Power::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.Power)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 current = 1;
  if (this->current() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_current());
  }

  // int32 voltage = 2;
  if (this->voltage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_voltage());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Power::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.Power)
  GOOGLE_DCHECK_NE(&from, this);
  const Power* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Power>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.Power)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.Power)
    MergeFrom(*source);
  }
}

void Power::MergeFrom(const Power& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.Power)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.current() != 0) {
    _internal_set_current(from._internal_current());
  }
  if (from.voltage() != 0) {
    _internal_set_voltage(from._internal_voltage());
  }
}

void Power::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.Power)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Power::CopyFrom(const Power& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.Power)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Power::IsInitialized() const {
  return true;
}

void Power::InternalSwap(Power* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Power, voltage_)
      + sizeof(Power::voltage_)
      - PROTOBUF_FIELD_OFFSET(Power, current_)>(
          reinterpret_cast<char*>(&current_),
          reinterpret_cast<char*>(&other->current_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Power::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Temp::InitAsDefaultInstance() {
}
class Temp::_Internal {
 public:
};

Temp::Temp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.Temp)
}
Temp::Temp(const Temp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  temp_ = from.temp_;
  // @@protoc_insertion_point(copy_constructor:perfcat.Temp)
}

void Temp::SharedCtor() {
  temp_ = 0;
}

Temp::~Temp() {
  // @@protoc_insertion_point(destructor:perfcat.Temp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Temp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Temp::ArenaDtor(void* object) {
  Temp* _this = reinterpret_cast< Temp* >(object);
  (void)_this;
}
void Temp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Temp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Temp& Temp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Temp_perfcat_2eproto.base);
  return *internal_default_instance();
}


void Temp::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.Temp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  temp_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Temp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 temp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          temp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Temp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.Temp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 temp = 1;
  if (this->temp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_temp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.Temp)
  return target;
}

size_t Temp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.Temp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 temp = 1;
  if (this->temp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_temp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Temp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.Temp)
  GOOGLE_DCHECK_NE(&from, this);
  const Temp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Temp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.Temp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.Temp)
    MergeFrom(*source);
  }
}

void Temp::MergeFrom(const Temp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.Temp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.temp() != 0) {
    _internal_set_temp(from._internal_temp());
  }
}

void Temp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.Temp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Temp::CopyFrom(const Temp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.Temp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Temp::IsInitialized() const {
  return true;
}

void Temp::InternalSwap(Temp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(temp_, other->temp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Temp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CpuUsage::InitAsDefaultInstance() {
}
class CpuUsage::_Internal {
 public:
};

CpuUsage::CpuUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.CpuUsage)
}
CpuUsage::CpuUsage(const CpuUsage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appusage_, &from.appusage_,
    static_cast<size_t>(reinterpret_cast<char*>(&totalusage_) -
    reinterpret_cast<char*>(&appusage_)) + sizeof(totalusage_));
  // @@protoc_insertion_point(copy_constructor:perfcat.CpuUsage)
}

void CpuUsage::SharedCtor() {
  ::memset(&appusage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&totalusage_) -
      reinterpret_cast<char*>(&appusage_)) + sizeof(totalusage_));
}

CpuUsage::~CpuUsage() {
  // @@protoc_insertion_point(destructor:perfcat.CpuUsage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CpuUsage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CpuUsage::ArenaDtor(void* object) {
  CpuUsage* _this = reinterpret_cast< CpuUsage* >(object);
  (void)_this;
}
void CpuUsage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CpuUsage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CpuUsage& CpuUsage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CpuUsage_perfcat_2eproto.base);
  return *internal_default_instance();
}


void CpuUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.CpuUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&appusage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&totalusage_) -
      reinterpret_cast<char*>(&appusage_)) + sizeof(totalusage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CpuUsage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float appUsage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          appusage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float totalUsage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          totalusage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CpuUsage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.CpuUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float appUsage = 1;
  if (!(this->appusage() <= 0 && this->appusage() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_appusage(), target);
  }

  // float totalUsage = 2;
  if (!(this->totalusage() <= 0 && this->totalusage() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_totalusage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.CpuUsage)
  return target;
}

size_t CpuUsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.CpuUsage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float appUsage = 1;
  if (!(this->appusage() <= 0 && this->appusage() >= 0)) {
    total_size += 1 + 4;
  }

  // float totalUsage = 2;
  if (!(this->totalusage() <= 0 && this->totalusage() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CpuUsage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.CpuUsage)
  GOOGLE_DCHECK_NE(&from, this);
  const CpuUsage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CpuUsage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.CpuUsage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.CpuUsage)
    MergeFrom(*source);
  }
}

void CpuUsage::MergeFrom(const CpuUsage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.CpuUsage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.appusage() <= 0 && from.appusage() >= 0)) {
    _internal_set_appusage(from._internal_appusage());
  }
  if (!(from.totalusage() <= 0 && from.totalusage() >= 0)) {
    _internal_set_totalusage(from._internal_totalusage());
  }
}

void CpuUsage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.CpuUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CpuUsage::CopyFrom(const CpuUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.CpuUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpuUsage::IsInitialized() const {
  return true;
}

void CpuUsage::InternalSwap(CpuUsage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CpuUsage, totalusage_)
      + sizeof(CpuUsage::totalusage_)
      - PROTOBUF_FIELD_OFFSET(CpuUsage, appusage_)>(
          reinterpret_cast<char*>(&appusage_),
          reinterpret_cast<char*>(&other->appusage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CpuUsage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FPS::InitAsDefaultInstance() {
}
class FPS::_Internal {
 public:
};

FPS::FPS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.FPS)
}
FPS::FPS(const FPS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fps_, &from.fps_,
    static_cast<size_t>(reinterpret_cast<char*>(&bigjank_) -
    reinterpret_cast<char*>(&fps_)) + sizeof(bigjank_));
  // @@protoc_insertion_point(copy_constructor:perfcat.FPS)
}

void FPS::SharedCtor() {
  ::memset(&fps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bigjank_) -
      reinterpret_cast<char*>(&fps_)) + sizeof(bigjank_));
}

FPS::~FPS() {
  // @@protoc_insertion_point(destructor:perfcat.FPS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FPS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FPS::ArenaDtor(void* object) {
  FPS* _this = reinterpret_cast< FPS* >(object);
  (void)_this;
}
void FPS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FPS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FPS& FPS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FPS_perfcat_2eproto.base);
  return *internal_default_instance();
}


void FPS::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.FPS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bigjank_) -
      reinterpret_cast<char*>(&fps_)) + sizeof(bigjank_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FPS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float fps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          fps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 jank = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          jank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bigJank = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bigjank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FPS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.FPS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float fps = 1;
  if (!(this->fps() <= 0 && this->fps() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_fps(), target);
  }

  // int32 jank = 3;
  if (this->jank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_jank(), target);
  }

  // int32 bigJank = 4;
  if (this->bigjank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_bigjank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.FPS)
  return target;
}

size_t FPS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.FPS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float fps = 1;
  if (!(this->fps() <= 0 && this->fps() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 jank = 3;
  if (this->jank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_jank());
  }

  // int32 bigJank = 4;
  if (this->bigjank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bigjank());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FPS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.FPS)
  GOOGLE_DCHECK_NE(&from, this);
  const FPS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FPS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.FPS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.FPS)
    MergeFrom(*source);
  }
}

void FPS::MergeFrom(const FPS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.FPS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.fps() <= 0 && from.fps() >= 0)) {
    _internal_set_fps(from._internal_fps());
  }
  if (from.jank() != 0) {
    _internal_set_jank(from._internal_jank());
  }
  if (from.bigjank() != 0) {
    _internal_set_bigjank(from._internal_bigjank());
  }
}

void FPS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.FPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FPS::CopyFrom(const FPS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.FPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FPS::IsInitialized() const {
  return true;
}

void FPS::InternalSwap(FPS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FPS, bigjank_)
      + sizeof(FPS::bigjank_)
      - PROTOBUF_FIELD_OFFSET(FPS, fps_)>(
          reinterpret_cast<char*>(&fps_),
          reinterpret_cast<char*>(&other->fps_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FPS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CoreUsage::InitAsDefaultInstance() {
}
class CoreUsage::_Internal {
 public:
};

CoreUsage::CoreUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  coreusage_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.CoreUsage)
}
CoreUsage::CoreUsage(const CoreUsage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      coreusage_(from.coreusage_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfcat.CoreUsage)
}

void CoreUsage::SharedCtor() {
}

CoreUsage::~CoreUsage() {
  // @@protoc_insertion_point(destructor:perfcat.CoreUsage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CoreUsage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CoreUsage::ArenaDtor(void* object) {
  CoreUsage* _this = reinterpret_cast< CoreUsage* >(object);
  (void)_this;
}
void CoreUsage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CoreUsage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CoreUsage& CoreUsage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CoreUsage_perfcat_2eproto.base);
  return *internal_default_instance();
}


void CoreUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.CoreUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coreusage_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CoreUsage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float coreUsage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_coreusage(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_coreusage(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CoreUsage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.CoreUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float coreUsage = 1;
  if (this->_internal_coreusage_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_coreusage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.CoreUsage)
  return target;
}

size_t CoreUsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.CoreUsage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float coreUsage = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_coreusage_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _coreusage_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CoreUsage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.CoreUsage)
  GOOGLE_DCHECK_NE(&from, this);
  const CoreUsage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CoreUsage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.CoreUsage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.CoreUsage)
    MergeFrom(*source);
  }
}

void CoreUsage::MergeFrom(const CoreUsage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.CoreUsage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  coreusage_.MergeFrom(from.coreusage_);
}

void CoreUsage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.CoreUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoreUsage::CopyFrom(const CoreUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.CoreUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoreUsage::IsInitialized() const {
  return true;
}

void CoreUsage::InternalSwap(CoreUsage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  coreusage_.InternalSwap(&other->coreusage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CoreUsage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FrameTime::InitAsDefaultInstance() {
}
class FrameTime::_Internal {
 public:
};

FrameTime::FrameTime(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  frametime_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.FrameTime)
}
FrameTime::FrameTime(const FrameTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      frametime_(from.frametime_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfcat.FrameTime)
}

void FrameTime::SharedCtor() {
}

FrameTime::~FrameTime() {
  // @@protoc_insertion_point(destructor:perfcat.FrameTime)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FrameTime::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FrameTime::ArenaDtor(void* object) {
  FrameTime* _this = reinterpret_cast< FrameTime* >(object);
  (void)_this;
}
void FrameTime::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrameTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameTime& FrameTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrameTime_perfcat_2eproto.base);
  return *internal_default_instance();
}


void FrameTime::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.FrameTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frametime_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 frameTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_frametime(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_frametime(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrameTime::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.FrameTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 frameTime = 1;
  {
    int byte_size = _frametime_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_frametime(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.FrameTime)
  return target;
}

size_t FrameTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.FrameTime)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 frameTime = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->frametime_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _frametime_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.FrameTime)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrameTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.FrameTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.FrameTime)
    MergeFrom(*source);
  }
}

void FrameTime::MergeFrom(const FrameTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.FrameTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frametime_.MergeFrom(from.frametime_);
}

void FrameTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.FrameTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameTime::CopyFrom(const FrameTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.FrameTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameTime::IsInitialized() const {
  return true;
}

void FrameTime::InternalSwap(FrameTime* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  frametime_.InternalSwap(&other->frametime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameTime::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Network::InitAsDefaultInstance() {
}
class Network::_Internal {
 public:
};

Network::Network(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.Network)
}
Network::Network(const Network& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&upload_, &from.upload_,
    static_cast<size_t>(reinterpret_cast<char*>(&download_) -
    reinterpret_cast<char*>(&upload_)) + sizeof(download_));
  // @@protoc_insertion_point(copy_constructor:perfcat.Network)
}

void Network::SharedCtor() {
  ::memset(&upload_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&download_) -
      reinterpret_cast<char*>(&upload_)) + sizeof(download_));
}

Network::~Network() {
  // @@protoc_insertion_point(destructor:perfcat.Network)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Network::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Network::ArenaDtor(void* object) {
  Network* _this = reinterpret_cast< Network* >(object);
  (void)_this;
}
void Network::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Network::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Network& Network::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Network_perfcat_2eproto.base);
  return *internal_default_instance();
}


void Network::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.Network)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&upload_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&download_) -
      reinterpret_cast<char*>(&upload_)) + sizeof(download_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Network::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 upload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          upload_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 download = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          download_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Network::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.Network)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 upload = 1;
  if (this->upload() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_upload(), target);
  }

  // int32 download = 2;
  if (this->download() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_download(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.Network)
  return target;
}

size_t Network::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.Network)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 upload = 1;
  if (this->upload() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_upload());
  }

  // int32 download = 2;
  if (this->download() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_download());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Network::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.Network)
  GOOGLE_DCHECK_NE(&from, this);
  const Network* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Network>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.Network)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.Network)
    MergeFrom(*source);
  }
}

void Network::MergeFrom(const Network& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.Network)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.upload() != 0) {
    _internal_set_upload(from._internal_upload());
  }
  if (from.download() != 0) {
    _internal_set_download(from._internal_download());
  }
}

void Network::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.Network)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Network::CopyFrom(const Network& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.Network)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Network::IsInitialized() const {
  return true;
}

void Network::InternalSwap(Network* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Network, download_)
      + sizeof(Network::download_)
      - PROTOBUF_FIELD_OFFSET(Network, upload_)>(
          reinterpret_cast<char*>(&upload_),
          reinterpret_cast<char*>(&other->upload_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Network::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Memory::InitAsDefaultInstance() {
  ::perfcat::_Memory_default_instance_._instance.get_mutable()->memorydetail_ = const_cast< ::perfcat::MemoryDetail*>(
      ::perfcat::MemoryDetail::internal_default_instance());
}
class Memory::_Internal {
 public:
  static const ::perfcat::MemoryDetail& memorydetail(const Memory* msg);
};

const ::perfcat::MemoryDetail&
Memory::_Internal::memorydetail(const Memory* msg) {
  return *msg->memorydetail_;
}
Memory::Memory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.Memory)
}
Memory::Memory(const Memory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_memorydetail()) {
    memorydetail_ = new ::perfcat::MemoryDetail(*from.memorydetail_);
  } else {
    memorydetail_ = nullptr;
  }
  ::memcpy(&pss_, &from.pss_,
    static_cast<size_t>(reinterpret_cast<char*>(&virtualmemory_) -
    reinterpret_cast<char*>(&pss_)) + sizeof(virtualmemory_));
  // @@protoc_insertion_point(copy_constructor:perfcat.Memory)
}

void Memory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Memory_perfcat_2eproto.base);
  ::memset(&memorydetail_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&virtualmemory_) -
      reinterpret_cast<char*>(&memorydetail_)) + sizeof(virtualmemory_));
}

Memory::~Memory() {
  // @@protoc_insertion_point(destructor:perfcat.Memory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Memory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete memorydetail_;
}

void Memory::ArenaDtor(void* object) {
  Memory* _this = reinterpret_cast< Memory* >(object);
  (void)_this;
}
void Memory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Memory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Memory& Memory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Memory_perfcat_2eproto.base);
  return *internal_default_instance();
}


void Memory::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.Memory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && memorydetail_ != nullptr) {
    delete memorydetail_;
  }
  memorydetail_ = nullptr;
  ::memset(&pss_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&virtualmemory_) -
      reinterpret_cast<char*>(&pss_)) + sizeof(virtualmemory_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Memory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 pss = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 swap = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          swap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 virtualMemory = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          virtualmemory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.MemoryDetail memoryDetail = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_memorydetail(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Memory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.Memory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pss = 1;
  if (this->pss() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_pss(), target);
  }

  // int32 swap = 2;
  if (this->swap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_swap(), target);
  }

  // int32 virtualMemory = 3;
  if (this->virtualmemory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_virtualmemory(), target);
  }

  // .perfcat.MemoryDetail memoryDetail = 5;
  if (this->has_memorydetail()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::memorydetail(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.Memory)
  return target;
}

size_t Memory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.Memory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .perfcat.MemoryDetail memoryDetail = 5;
  if (this->has_memorydetail()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *memorydetail_);
  }

  // int32 pss = 1;
  if (this->pss() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pss());
  }

  // int32 swap = 2;
  if (this->swap() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_swap());
  }

  // int32 virtualMemory = 3;
  if (this->virtualmemory() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_virtualmemory());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Memory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.Memory)
  GOOGLE_DCHECK_NE(&from, this);
  const Memory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Memory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.Memory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.Memory)
    MergeFrom(*source);
  }
}

void Memory::MergeFrom(const Memory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.Memory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_memorydetail()) {
    _internal_mutable_memorydetail()->::perfcat::MemoryDetail::MergeFrom(from._internal_memorydetail());
  }
  if (from.pss() != 0) {
    _internal_set_pss(from._internal_pss());
  }
  if (from.swap() != 0) {
    _internal_set_swap(from._internal_swap());
  }
  if (from.virtualmemory() != 0) {
    _internal_set_virtualmemory(from._internal_virtualmemory());
  }
}

void Memory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.Memory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Memory::CopyFrom(const Memory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.Memory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Memory::IsInitialized() const {
  return true;
}

void Memory::InternalSwap(Memory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Memory, virtualmemory_)
      + sizeof(Memory::virtualmemory_)
      - PROTOBUF_FIELD_OFFSET(Memory, memorydetail_)>(
          reinterpret_cast<char*>(&memorydetail_),
          reinterpret_cast<char*>(&other->memorydetail_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Memory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemoryDetail::InitAsDefaultInstance() {
}
class MemoryDetail::_Internal {
 public:
};

MemoryDetail::MemoryDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.MemoryDetail)
}
MemoryDetail::MemoryDetail(const MemoryDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gfx_, &from.gfx_,
    static_cast<size_t>(reinterpret_cast<char*>(&unknown_) -
    reinterpret_cast<char*>(&gfx_)) + sizeof(unknown_));
  // @@protoc_insertion_point(copy_constructor:perfcat.MemoryDetail)
}

void MemoryDetail::SharedCtor() {
  ::memset(&gfx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unknown_) -
      reinterpret_cast<char*>(&gfx_)) + sizeof(unknown_));
}

MemoryDetail::~MemoryDetail() {
  // @@protoc_insertion_point(destructor:perfcat.MemoryDetail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MemoryDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MemoryDetail::ArenaDtor(void* object) {
  MemoryDetail* _this = reinterpret_cast< MemoryDetail* >(object);
  (void)_this;
}
void MemoryDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemoryDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemoryDetail& MemoryDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemoryDetail_perfcat_2eproto.base);
  return *internal_default_instance();
}


void MemoryDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.MemoryDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gfx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unknown_) -
      reinterpret_cast<char*>(&gfx_)) + sizeof(unknown_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemoryDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 gfx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gfx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nativePss = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          nativepss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 unknown = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          unknown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemoryDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.MemoryDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gfx = 1;
  if (this->gfx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_gfx(), target);
  }

  // int32 gl = 2;
  if (this->gl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_gl(), target);
  }

  // int32 nativePss = 3;
  if (this->nativepss() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_nativepss(), target);
  }

  // int32 unknown = 4;
  if (this->unknown() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_unknown(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.MemoryDetail)
  return target;
}

size_t MemoryDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.MemoryDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 gfx = 1;
  if (this->gfx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gfx());
  }

  // int32 gl = 2;
  if (this->gl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gl());
  }

  // int32 nativePss = 3;
  if (this->nativepss() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nativepss());
  }

  // int32 unknown = 4;
  if (this->unknown() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unknown());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.MemoryDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const MemoryDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemoryDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.MemoryDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.MemoryDetail)
    MergeFrom(*source);
  }
}

void MemoryDetail::MergeFrom(const MemoryDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.MemoryDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gfx() != 0) {
    _internal_set_gfx(from._internal_gfx());
  }
  if (from.gl() != 0) {
    _internal_set_gl(from._internal_gl());
  }
  if (from.nativepss() != 0) {
    _internal_set_nativepss(from._internal_nativepss());
  }
  if (from.unknown() != 0) {
    _internal_set_unknown(from._internal_unknown());
  }
}

void MemoryDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.MemoryDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryDetail::CopyFrom(const MemoryDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.MemoryDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryDetail::IsInitialized() const {
  return true;
}

void MemoryDetail::InternalSwap(MemoryDetail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemoryDetail, unknown_)
      + sizeof(MemoryDetail::unknown_)
      - PROTOBUF_FIELD_OFFSET(MemoryDetail, gfx_)>(
          reinterpret_cast<char*>(&gfx_),
          reinterpret_cast<char*>(&other->gfx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MemoryDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GpuFreq::InitAsDefaultInstance() {
}
class GpuFreq::_Internal {
 public:
};

GpuFreq::GpuFreq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.GpuFreq)
}
GpuFreq::GpuFreq(const GpuFreq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gpufreq_ = from.gpufreq_;
  // @@protoc_insertion_point(copy_constructor:perfcat.GpuFreq)
}

void GpuFreq::SharedCtor() {
  gpufreq_ = 0;
}

GpuFreq::~GpuFreq() {
  // @@protoc_insertion_point(destructor:perfcat.GpuFreq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GpuFreq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GpuFreq::ArenaDtor(void* object) {
  GpuFreq* _this = reinterpret_cast< GpuFreq* >(object);
  (void)_this;
}
void GpuFreq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GpuFreq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GpuFreq& GpuFreq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GpuFreq_perfcat_2eproto.base);
  return *internal_default_instance();
}


void GpuFreq::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.GpuFreq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gpufreq_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GpuFreq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 gpuFreq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          gpufreq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GpuFreq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.GpuFreq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gpuFreq = 1;
  if (this->gpufreq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_gpufreq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.GpuFreq)
  return target;
}

size_t GpuFreq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.GpuFreq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 gpuFreq = 1;
  if (this->gpufreq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gpufreq());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpuFreq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.GpuFreq)
  GOOGLE_DCHECK_NE(&from, this);
  const GpuFreq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GpuFreq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.GpuFreq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.GpuFreq)
    MergeFrom(*source);
  }
}

void GpuFreq::MergeFrom(const GpuFreq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.GpuFreq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gpufreq() != 0) {
    _internal_set_gpufreq(from._internal_gpufreq());
  }
}

void GpuFreq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.GpuFreq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpuFreq::CopyFrom(const GpuFreq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.GpuFreq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpuFreq::IsInitialized() const {
  return true;
}

void GpuFreq::InternalSwap(GpuFreq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(gpufreq_, other->gpufreq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GpuFreq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GpuUsage::InitAsDefaultInstance() {
}
class GpuUsage::_Internal {
 public:
};

GpuUsage::GpuUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.GpuUsage)
}
GpuUsage::GpuUsage(const GpuUsage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gpuusage_ = from.gpuusage_;
  // @@protoc_insertion_point(copy_constructor:perfcat.GpuUsage)
}

void GpuUsage::SharedCtor() {
  gpuusage_ = 0;
}

GpuUsage::~GpuUsage() {
  // @@protoc_insertion_point(destructor:perfcat.GpuUsage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GpuUsage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GpuUsage::ArenaDtor(void* object) {
  GpuUsage* _this = reinterpret_cast< GpuUsage* >(object);
  (void)_this;
}
void GpuUsage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GpuUsage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GpuUsage& GpuUsage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GpuUsage_perfcat_2eproto.base);
  return *internal_default_instance();
}


void GpuUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.GpuUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gpuusage_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GpuUsage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float gpuUsage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          gpuusage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GpuUsage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.GpuUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float gpuUsage = 1;
  if (!(this->gpuusage() <= 0 && this->gpuusage() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_gpuusage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.GpuUsage)
  return target;
}

size_t GpuUsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.GpuUsage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float gpuUsage = 1;
  if (!(this->gpuusage() <= 0 && this->gpuusage() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpuUsage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.GpuUsage)
  GOOGLE_DCHECK_NE(&from, this);
  const GpuUsage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GpuUsage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.GpuUsage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.GpuUsage)
    MergeFrom(*source);
  }
}

void GpuUsage::MergeFrom(const GpuUsage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.GpuUsage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.gpuusage() <= 0 && from.gpuusage() >= 0)) {
    _internal_set_gpuusage(from._internal_gpuusage());
  }
}

void GpuUsage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.GpuUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpuUsage::CopyFrom(const GpuUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.GpuUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpuUsage::IsInitialized() const {
  return true;
}

void GpuUsage::InternalSwap(GpuUsage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(gpuusage_, other->gpuusage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GpuUsage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CpuFreq::InitAsDefaultInstance() {
}
class CpuFreq::_Internal {
 public:
};

CpuFreq::CpuFreq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cpufreq_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.CpuFreq)
}
CpuFreq::CpuFreq(const CpuFreq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cpufreq_(from.cpufreq_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfcat.CpuFreq)
}

void CpuFreq::SharedCtor() {
}

CpuFreq::~CpuFreq() {
  // @@protoc_insertion_point(destructor:perfcat.CpuFreq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CpuFreq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CpuFreq::ArenaDtor(void* object) {
  CpuFreq* _this = reinterpret_cast< CpuFreq* >(object);
  (void)_this;
}
void CpuFreq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CpuFreq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CpuFreq& CpuFreq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CpuFreq_perfcat_2eproto.base);
  return *internal_default_instance();
}


void CpuFreq::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.CpuFreq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cpufreq_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CpuFreq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 cpuFreq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_cpufreq(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_cpufreq(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CpuFreq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.CpuFreq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 cpuFreq = 1;
  {
    int byte_size = _cpufreq_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_cpufreq(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.CpuFreq)
  return target;
}

size_t CpuFreq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.CpuFreq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 cpuFreq = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->cpufreq_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _cpufreq_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CpuFreq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.CpuFreq)
  GOOGLE_DCHECK_NE(&from, this);
  const CpuFreq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CpuFreq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.CpuFreq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.CpuFreq)
    MergeFrom(*source);
  }
}

void CpuFreq::MergeFrom(const CpuFreq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.CpuFreq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cpufreq_.MergeFrom(from.cpufreq_);
}

void CpuFreq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.CpuFreq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CpuFreq::CopyFrom(const CpuFreq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.CpuFreq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpuFreq::IsInitialized() const {
  return true;
}

void CpuFreq::InternalSwap(CpuFreq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cpufreq_.InternalSwap(&other->cpufreq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CpuFreq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetCpuMaxFreqReq::InitAsDefaultInstance() {
}
class GetCpuMaxFreqReq::_Internal {
 public:
};

GetCpuMaxFreqReq::GetCpuMaxFreqReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.GetCpuMaxFreqReq)
}
GetCpuMaxFreqReq::GetCpuMaxFreqReq(const GetCpuMaxFreqReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfcat.GetCpuMaxFreqReq)
}

void GetCpuMaxFreqReq::SharedCtor() {
}

GetCpuMaxFreqReq::~GetCpuMaxFreqReq() {
  // @@protoc_insertion_point(destructor:perfcat.GetCpuMaxFreqReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetCpuMaxFreqReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetCpuMaxFreqReq::ArenaDtor(void* object) {
  GetCpuMaxFreqReq* _this = reinterpret_cast< GetCpuMaxFreqReq* >(object);
  (void)_this;
}
void GetCpuMaxFreqReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCpuMaxFreqReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCpuMaxFreqReq& GetCpuMaxFreqReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCpuMaxFreqReq_perfcat_2eproto.base);
  return *internal_default_instance();
}


void GetCpuMaxFreqReq::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.GetCpuMaxFreqReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCpuMaxFreqReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCpuMaxFreqReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.GetCpuMaxFreqReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.GetCpuMaxFreqReq)
  return target;
}

size_t GetCpuMaxFreqReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.GetCpuMaxFreqReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCpuMaxFreqReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.GetCpuMaxFreqReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCpuMaxFreqReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCpuMaxFreqReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.GetCpuMaxFreqReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.GetCpuMaxFreqReq)
    MergeFrom(*source);
  }
}

void GetCpuMaxFreqReq::MergeFrom(const GetCpuMaxFreqReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.GetCpuMaxFreqReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetCpuMaxFreqReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.GetCpuMaxFreqReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCpuMaxFreqReq::CopyFrom(const GetCpuMaxFreqReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.GetCpuMaxFreqReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCpuMaxFreqReq::IsInitialized() const {
  return true;
}

void GetCpuMaxFreqReq::InternalSwap(GetCpuMaxFreqReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCpuMaxFreqReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetCpuMaxFreqRsp::InitAsDefaultInstance() {
}
class GetCpuMaxFreqRsp::_Internal {
 public:
};

GetCpuMaxFreqRsp::GetCpuMaxFreqRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  minfreq_(arena),
  maxfreq_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.GetCpuMaxFreqRsp)
}
GetCpuMaxFreqRsp::GetCpuMaxFreqRsp(const GetCpuMaxFreqRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      minfreq_(from.minfreq_),
      maxfreq_(from.maxfreq_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfcat.GetCpuMaxFreqRsp)
}

void GetCpuMaxFreqRsp::SharedCtor() {
}

GetCpuMaxFreqRsp::~GetCpuMaxFreqRsp() {
  // @@protoc_insertion_point(destructor:perfcat.GetCpuMaxFreqRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetCpuMaxFreqRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetCpuMaxFreqRsp::ArenaDtor(void* object) {
  GetCpuMaxFreqRsp* _this = reinterpret_cast< GetCpuMaxFreqRsp* >(object);
  (void)_this;
}
void GetCpuMaxFreqRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCpuMaxFreqRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCpuMaxFreqRsp& GetCpuMaxFreqRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCpuMaxFreqRsp_perfcat_2eproto.base);
  return *internal_default_instance();
}


void GetCpuMaxFreqRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.GetCpuMaxFreqRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  minfreq_.Clear();
  maxfreq_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCpuMaxFreqRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 minFreq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_minfreq(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_minfreq(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 maxFreq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_maxfreq(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_maxfreq(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCpuMaxFreqRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.GetCpuMaxFreqRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 minFreq = 1;
  {
    int byte_size = _minfreq_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_minfreq(), byte_size, target);
    }
  }

  // repeated int32 maxFreq = 2;
  {
    int byte_size = _maxfreq_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_maxfreq(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.GetCpuMaxFreqRsp)
  return target;
}

size_t GetCpuMaxFreqRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.GetCpuMaxFreqRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 minFreq = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->minfreq_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _minfreq_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 maxFreq = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->maxfreq_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _maxfreq_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCpuMaxFreqRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.GetCpuMaxFreqRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCpuMaxFreqRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCpuMaxFreqRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.GetCpuMaxFreqRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.GetCpuMaxFreqRsp)
    MergeFrom(*source);
  }
}

void GetCpuMaxFreqRsp::MergeFrom(const GetCpuMaxFreqRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.GetCpuMaxFreqRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  minfreq_.MergeFrom(from.minfreq_);
  maxfreq_.MergeFrom(from.maxfreq_);
}

void GetCpuMaxFreqRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.GetCpuMaxFreqRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCpuMaxFreqRsp::CopyFrom(const GetCpuMaxFreqRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.GetCpuMaxFreqRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCpuMaxFreqRsp::IsInitialized() const {
  return true;
}

void GetCpuMaxFreqRsp::InternalSwap(GetCpuMaxFreqRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  minfreq_.InternalSwap(&other->minfreq_);
  maxfreq_.InternalSwap(&other->maxfreq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCpuMaxFreqRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ToggleInterestingFiledNTF::InitAsDefaultInstance() {
}
class ToggleInterestingFiledNTF::_Internal {
 public:
};

ToggleInterestingFiledNTF::ToggleInterestingFiledNTF(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.ToggleInterestingFiledNTF)
}
ToggleInterestingFiledNTF::ToggleInterestingFiledNTF(const ToggleInterestingFiledNTF& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  datatype_ = from.datatype_;
  // @@protoc_insertion_point(copy_constructor:perfcat.ToggleInterestingFiledNTF)
}

void ToggleInterestingFiledNTF::SharedCtor() {
  datatype_ = 0;
}

ToggleInterestingFiledNTF::~ToggleInterestingFiledNTF() {
  // @@protoc_insertion_point(destructor:perfcat.ToggleInterestingFiledNTF)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ToggleInterestingFiledNTF::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ToggleInterestingFiledNTF::ArenaDtor(void* object) {
  ToggleInterestingFiledNTF* _this = reinterpret_cast< ToggleInterestingFiledNTF* >(object);
  (void)_this;
}
void ToggleInterestingFiledNTF::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ToggleInterestingFiledNTF::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ToggleInterestingFiledNTF& ToggleInterestingFiledNTF::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ToggleInterestingFiledNTF_perfcat_2eproto.base);
  return *internal_default_instance();
}


void ToggleInterestingFiledNTF::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.ToggleInterestingFiledNTF)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datatype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ToggleInterestingFiledNTF::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 dataType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          datatype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ToggleInterestingFiledNTF::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.ToggleInterestingFiledNTF)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dataType = 1;
  if (this->datatype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_datatype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.ToggleInterestingFiledNTF)
  return target;
}

size_t ToggleInterestingFiledNTF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.ToggleInterestingFiledNTF)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 dataType = 1;
  if (this->datatype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_datatype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ToggleInterestingFiledNTF::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.ToggleInterestingFiledNTF)
  GOOGLE_DCHECK_NE(&from, this);
  const ToggleInterestingFiledNTF* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ToggleInterestingFiledNTF>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.ToggleInterestingFiledNTF)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.ToggleInterestingFiledNTF)
    MergeFrom(*source);
  }
}

void ToggleInterestingFiledNTF::MergeFrom(const ToggleInterestingFiledNTF& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.ToggleInterestingFiledNTF)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.datatype() != 0) {
    _internal_set_datatype(from._internal_datatype());
  }
}

void ToggleInterestingFiledNTF::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.ToggleInterestingFiledNTF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToggleInterestingFiledNTF::CopyFrom(const ToggleInterestingFiledNTF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.ToggleInterestingFiledNTF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToggleInterestingFiledNTF::IsInitialized() const {
  return true;
}

void ToggleInterestingFiledNTF::InternalSwap(ToggleInterestingFiledNTF* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(datatype_, other->datatype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ToggleInterestingFiledNTF::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProfileStartedNTF::InitAsDefaultInstance() {
}
class ProfileStartedNTF::_Internal {
 public:
};

ProfileStartedNTF::ProfileStartedNTF(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.ProfileStartedNTF)
}
ProfileStartedNTF::ProfileStartedNTF(const ProfileStartedNTF& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfcat.ProfileStartedNTF)
}

void ProfileStartedNTF::SharedCtor() {
}

ProfileStartedNTF::~ProfileStartedNTF() {
  // @@protoc_insertion_point(destructor:perfcat.ProfileStartedNTF)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfileStartedNTF::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProfileStartedNTF::ArenaDtor(void* object) {
  ProfileStartedNTF* _this = reinterpret_cast< ProfileStartedNTF* >(object);
  (void)_this;
}
void ProfileStartedNTF::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfileStartedNTF::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfileStartedNTF& ProfileStartedNTF::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfileStartedNTF_perfcat_2eproto.base);
  return *internal_default_instance();
}


void ProfileStartedNTF::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.ProfileStartedNTF)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfileStartedNTF::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfileStartedNTF::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.ProfileStartedNTF)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.ProfileStartedNTF)
  return target;
}

size_t ProfileStartedNTF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.ProfileStartedNTF)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfileStartedNTF::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.ProfileStartedNTF)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileStartedNTF* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfileStartedNTF>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.ProfileStartedNTF)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.ProfileStartedNTF)
    MergeFrom(*source);
  }
}

void ProfileStartedNTF::MergeFrom(const ProfileStartedNTF& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.ProfileStartedNTF)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ProfileStartedNTF::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.ProfileStartedNTF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileStartedNTF::CopyFrom(const ProfileStartedNTF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.ProfileStartedNTF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileStartedNTF::IsInitialized() const {
  return true;
}

void ProfileStartedNTF::InternalSwap(ProfileStartedNTF* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileStartedNTF::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProfileStoppedNTF::InitAsDefaultInstance() {
}
class ProfileStoppedNTF::_Internal {
 public:
};

ProfileStoppedNTF::ProfileStoppedNTF(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.ProfileStoppedNTF)
}
ProfileStoppedNTF::ProfileStoppedNTF(const ProfileStoppedNTF& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfcat.ProfileStoppedNTF)
}

void ProfileStoppedNTF::SharedCtor() {
}

ProfileStoppedNTF::~ProfileStoppedNTF() {
  // @@protoc_insertion_point(destructor:perfcat.ProfileStoppedNTF)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfileStoppedNTF::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProfileStoppedNTF::ArenaDtor(void* object) {
  ProfileStoppedNTF* _this = reinterpret_cast< ProfileStoppedNTF* >(object);
  (void)_this;
}
void ProfileStoppedNTF::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfileStoppedNTF::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfileStoppedNTF& ProfileStoppedNTF::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfileStoppedNTF_perfcat_2eproto.base);
  return *internal_default_instance();
}


void ProfileStoppedNTF::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.ProfileStoppedNTF)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfileStoppedNTF::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfileStoppedNTF::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.ProfileStoppedNTF)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.ProfileStoppedNTF)
  return target;
}

size_t ProfileStoppedNTF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.ProfileStoppedNTF)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfileStoppedNTF::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.ProfileStoppedNTF)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileStoppedNTF* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfileStoppedNTF>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.ProfileStoppedNTF)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.ProfileStoppedNTF)
    MergeFrom(*source);
  }
}

void ProfileStoppedNTF::MergeFrom(const ProfileStoppedNTF& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.ProfileStoppedNTF)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ProfileStoppedNTF::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.ProfileStoppedNTF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileStoppedNTF::CopyFrom(const ProfileStoppedNTF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.ProfileStoppedNTF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileStoppedNTF::IsInitialized() const {
  return true;
}

void ProfileStoppedNTF::InternalSwap(ProfileStoppedNTF* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileStoppedNTF::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProcessNotFoundNTF::InitAsDefaultInstance() {
}
class ProcessNotFoundNTF::_Internal {
 public:
};

ProcessNotFoundNTF::ProcessNotFoundNTF(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.ProcessNotFoundNTF)
}
ProcessNotFoundNTF::ProcessNotFoundNTF(const ProcessNotFoundNTF& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfcat.ProcessNotFoundNTF)
}

void ProcessNotFoundNTF::SharedCtor() {
}

ProcessNotFoundNTF::~ProcessNotFoundNTF() {
  // @@protoc_insertion_point(destructor:perfcat.ProcessNotFoundNTF)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProcessNotFoundNTF::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProcessNotFoundNTF::ArenaDtor(void* object) {
  ProcessNotFoundNTF* _this = reinterpret_cast< ProcessNotFoundNTF* >(object);
  (void)_this;
}
void ProcessNotFoundNTF::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessNotFoundNTF::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessNotFoundNTF& ProcessNotFoundNTF::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessNotFoundNTF_perfcat_2eproto.base);
  return *internal_default_instance();
}


void ProcessNotFoundNTF::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.ProcessNotFoundNTF)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessNotFoundNTF::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessNotFoundNTF::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.ProcessNotFoundNTF)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.ProcessNotFoundNTF)
  return target;
}

size_t ProcessNotFoundNTF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.ProcessNotFoundNTF)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessNotFoundNTF::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.ProcessNotFoundNTF)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessNotFoundNTF* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessNotFoundNTF>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.ProcessNotFoundNTF)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.ProcessNotFoundNTF)
    MergeFrom(*source);
  }
}

void ProcessNotFoundNTF::MergeFrom(const ProcessNotFoundNTF& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.ProcessNotFoundNTF)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ProcessNotFoundNTF::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.ProcessNotFoundNTF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessNotFoundNTF::CopyFrom(const ProcessNotFoundNTF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.ProcessNotFoundNTF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessNotFoundNTF::IsInitialized() const {
  return true;
}

void ProcessNotFoundNTF::InternalSwap(ProcessNotFoundNTF* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessNotFoundNTF::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProcessFoundNTF::InitAsDefaultInstance() {
}
class ProcessFoundNTF::_Internal {
 public:
};

ProcessFoundNTF::ProcessFoundNTF(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.ProcessFoundNTF)
}
ProcessFoundNTF::ProcessFoundNTF(const ProcessFoundNTF& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfcat.ProcessFoundNTF)
}

void ProcessFoundNTF::SharedCtor() {
}

ProcessFoundNTF::~ProcessFoundNTF() {
  // @@protoc_insertion_point(destructor:perfcat.ProcessFoundNTF)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProcessFoundNTF::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProcessFoundNTF::ArenaDtor(void* object) {
  ProcessFoundNTF* _this = reinterpret_cast< ProcessFoundNTF* >(object);
  (void)_this;
}
void ProcessFoundNTF::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessFoundNTF::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessFoundNTF& ProcessFoundNTF::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessFoundNTF_perfcat_2eproto.base);
  return *internal_default_instance();
}


void ProcessFoundNTF::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.ProcessFoundNTF)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessFoundNTF::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessFoundNTF::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.ProcessFoundNTF)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.ProcessFoundNTF)
  return target;
}

size_t ProcessFoundNTF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.ProcessFoundNTF)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessFoundNTF::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.ProcessFoundNTF)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessFoundNTF* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessFoundNTF>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.ProcessFoundNTF)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.ProcessFoundNTF)
    MergeFrom(*source);
  }
}

void ProcessFoundNTF::MergeFrom(const ProcessFoundNTF& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.ProcessFoundNTF)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ProcessFoundNTF::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.ProcessFoundNTF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessFoundNTF::CopyFrom(const ProcessFoundNTF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.ProcessFoundNTF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessFoundNTF::IsInitialized() const {
  return true;
}

void ProcessFoundNTF::InternalSwap(ProcessFoundNTF* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessFoundNTF::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBatteryInfoReq::InitAsDefaultInstance() {
}
class GetBatteryInfoReq::_Internal {
 public:
};

GetBatteryInfoReq::GetBatteryInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.GetBatteryInfoReq)
}
GetBatteryInfoReq::GetBatteryInfoReq(const GetBatteryInfoReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfcat.GetBatteryInfoReq)
}

void GetBatteryInfoReq::SharedCtor() {
}

GetBatteryInfoReq::~GetBatteryInfoReq() {
  // @@protoc_insertion_point(destructor:perfcat.GetBatteryInfoReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetBatteryInfoReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetBatteryInfoReq::ArenaDtor(void* object) {
  GetBatteryInfoReq* _this = reinterpret_cast< GetBatteryInfoReq* >(object);
  (void)_this;
}
void GetBatteryInfoReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBatteryInfoReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBatteryInfoReq& GetBatteryInfoReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBatteryInfoReq_perfcat_2eproto.base);
  return *internal_default_instance();
}


void GetBatteryInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.GetBatteryInfoReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBatteryInfoReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBatteryInfoReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.GetBatteryInfoReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.GetBatteryInfoReq)
  return target;
}

size_t GetBatteryInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.GetBatteryInfoReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBatteryInfoReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.GetBatteryInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBatteryInfoReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBatteryInfoReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.GetBatteryInfoReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.GetBatteryInfoReq)
    MergeFrom(*source);
  }
}

void GetBatteryInfoReq::MergeFrom(const GetBatteryInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.GetBatteryInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetBatteryInfoReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.GetBatteryInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBatteryInfoReq::CopyFrom(const GetBatteryInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.GetBatteryInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBatteryInfoReq::IsInitialized() const {
  return true;
}

void GetBatteryInfoReq::InternalSwap(GetBatteryInfoReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBatteryInfoReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBatteryInfoRsp::InitAsDefaultInstance() {
  ::perfcat::_GetBatteryInfoRsp_default_instance_._instance.get_mutable()->power_ = const_cast< ::perfcat::Power*>(
      ::perfcat::Power::internal_default_instance());
}
class GetBatteryInfoRsp::_Internal {
 public:
  static const ::perfcat::Power& power(const GetBatteryInfoRsp* msg);
};

const ::perfcat::Power&
GetBatteryInfoRsp::_Internal::power(const GetBatteryInfoRsp* msg) {
  return *msg->power_;
}
GetBatteryInfoRsp::GetBatteryInfoRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.GetBatteryInfoRsp)
}
GetBatteryInfoRsp::GetBatteryInfoRsp(const GetBatteryInfoRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_power()) {
    power_ = new ::perfcat::Power(*from.power_);
  } else {
    power_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:perfcat.GetBatteryInfoRsp)
}

void GetBatteryInfoRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetBatteryInfoRsp_perfcat_2eproto.base);
  power_ = nullptr;
}

GetBatteryInfoRsp::~GetBatteryInfoRsp() {
  // @@protoc_insertion_point(destructor:perfcat.GetBatteryInfoRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetBatteryInfoRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete power_;
}

void GetBatteryInfoRsp::ArenaDtor(void* object) {
  GetBatteryInfoRsp* _this = reinterpret_cast< GetBatteryInfoRsp* >(object);
  (void)_this;
}
void GetBatteryInfoRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBatteryInfoRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBatteryInfoRsp& GetBatteryInfoRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBatteryInfoRsp_perfcat_2eproto.base);
  return *internal_default_instance();
}


void GetBatteryInfoRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.GetBatteryInfoRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && power_ != nullptr) {
    delete power_;
  }
  power_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBatteryInfoRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .perfcat.Power power = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_power(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBatteryInfoRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.GetBatteryInfoRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .perfcat.Power power = 1;
  if (this->has_power()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::power(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.GetBatteryInfoRsp)
  return target;
}

size_t GetBatteryInfoRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.GetBatteryInfoRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .perfcat.Power power = 1;
  if (this->has_power()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *power_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBatteryInfoRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.GetBatteryInfoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBatteryInfoRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBatteryInfoRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.GetBatteryInfoRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.GetBatteryInfoRsp)
    MergeFrom(*source);
  }
}

void GetBatteryInfoRsp::MergeFrom(const GetBatteryInfoRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.GetBatteryInfoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_power()) {
    _internal_mutable_power()->::perfcat::Power::MergeFrom(from._internal_power());
  }
}

void GetBatteryInfoRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.GetBatteryInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBatteryInfoRsp::CopyFrom(const GetBatteryInfoRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.GetBatteryInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBatteryInfoRsp::IsInitialized() const {
  return true;
}

void GetBatteryInfoRsp::InternalSwap(GetBatteryInfoRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(power_, other->power_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBatteryInfoRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppClosedNTF::InitAsDefaultInstance() {
}
class AppClosedNTF::_Internal {
 public:
};

AppClosedNTF::AppClosedNTF(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.AppClosedNTF)
}
AppClosedNTF::AppClosedNTF(const AppClosedNTF& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfcat.AppClosedNTF)
}

void AppClosedNTF::SharedCtor() {
}

AppClosedNTF::~AppClosedNTF() {
  // @@protoc_insertion_point(destructor:perfcat.AppClosedNTF)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppClosedNTF::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AppClosedNTF::ArenaDtor(void* object) {
  AppClosedNTF* _this = reinterpret_cast< AppClosedNTF* >(object);
  (void)_this;
}
void AppClosedNTF::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppClosedNTF::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppClosedNTF& AppClosedNTF::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppClosedNTF_perfcat_2eproto.base);
  return *internal_default_instance();
}


void AppClosedNTF::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.AppClosedNTF)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppClosedNTF::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppClosedNTF::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.AppClosedNTF)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.AppClosedNTF)
  return target;
}

size_t AppClosedNTF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.AppClosedNTF)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppClosedNTF::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.AppClosedNTF)
  GOOGLE_DCHECK_NE(&from, this);
  const AppClosedNTF* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppClosedNTF>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.AppClosedNTF)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.AppClosedNTF)
    MergeFrom(*source);
  }
}

void AppClosedNTF::MergeFrom(const AppClosedNTF& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.AppClosedNTF)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AppClosedNTF::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.AppClosedNTF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppClosedNTF::CopyFrom(const AppClosedNTF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.AppClosedNTF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppClosedNTF::IsInitialized() const {
  return true;
}

void AppClosedNTF::InternalSwap(AppClosedNTF* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppClosedNTF::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProfileNTFACK::InitAsDefaultInstance() {
}
class ProfileNTFACK::_Internal {
 public:
};

ProfileNTFACK::ProfileNTFACK(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.ProfileNTFACK)
}
ProfileNTFACK::ProfileNTFACK(const ProfileNTFACK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:perfcat.ProfileNTFACK)
}

void ProfileNTFACK::SharedCtor() {
  index_ = 0;
}

ProfileNTFACK::~ProfileNTFACK() {
  // @@protoc_insertion_point(destructor:perfcat.ProfileNTFACK)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfileNTFACK::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ProfileNTFACK::ArenaDtor(void* object) {
  ProfileNTFACK* _this = reinterpret_cast< ProfileNTFACK* >(object);
  (void)_this;
}
void ProfileNTFACK::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfileNTFACK::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfileNTFACK& ProfileNTFACK::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfileNTFACK_perfcat_2eproto.base);
  return *internal_default_instance();
}


void ProfileNTFACK::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.ProfileNTFACK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfileNTFACK::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfileNTFACK::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.ProfileNTFACK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.ProfileNTFACK)
  return target;
}

size_t ProfileNTFACK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.ProfileNTFACK)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfileNTFACK::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.ProfileNTFACK)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileNTFACK* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfileNTFACK>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.ProfileNTFACK)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.ProfileNTFACK)
    MergeFrom(*source);
  }
}

void ProfileNTFACK::MergeFrom(const ProfileNTFACK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.ProfileNTFACK)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void ProfileNTFACK::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.ProfileNTFACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileNTFACK::CopyFrom(const ProfileNTFACK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.ProfileNTFACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileNTFACK::IsInitialized() const {
  return true;
}

void ProfileNTFACK::InternalSwap(ProfileNTFACK* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileNTFACK::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PrepareWifiProfileNTF::InitAsDefaultInstance() {
}
class PrepareWifiProfileNTF::_Internal {
 public:
};

PrepareWifiProfileNTF::PrepareWifiProfileNTF(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.PrepareWifiProfileNTF)
}
PrepareWifiProfileNTF::PrepareWifiProfileNTF(const PrepareWifiProfileNTF& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfcat.PrepareWifiProfileNTF)
}

void PrepareWifiProfileNTF::SharedCtor() {
}

PrepareWifiProfileNTF::~PrepareWifiProfileNTF() {
  // @@protoc_insertion_point(destructor:perfcat.PrepareWifiProfileNTF)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrepareWifiProfileNTF::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PrepareWifiProfileNTF::ArenaDtor(void* object) {
  PrepareWifiProfileNTF* _this = reinterpret_cast< PrepareWifiProfileNTF* >(object);
  (void)_this;
}
void PrepareWifiProfileNTF::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrepareWifiProfileNTF::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrepareWifiProfileNTF& PrepareWifiProfileNTF::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrepareWifiProfileNTF_perfcat_2eproto.base);
  return *internal_default_instance();
}


void PrepareWifiProfileNTF::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.PrepareWifiProfileNTF)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrepareWifiProfileNTF::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrepareWifiProfileNTF::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.PrepareWifiProfileNTF)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.PrepareWifiProfileNTF)
  return target;
}

size_t PrepareWifiProfileNTF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.PrepareWifiProfileNTF)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrepareWifiProfileNTF::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.PrepareWifiProfileNTF)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareWifiProfileNTF* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrepareWifiProfileNTF>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.PrepareWifiProfileNTF)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.PrepareWifiProfileNTF)
    MergeFrom(*source);
  }
}

void PrepareWifiProfileNTF::MergeFrom(const PrepareWifiProfileNTF& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.PrepareWifiProfileNTF)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PrepareWifiProfileNTF::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.PrepareWifiProfileNTF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareWifiProfileNTF::CopyFrom(const PrepareWifiProfileNTF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.PrepareWifiProfileNTF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareWifiProfileNTF::IsInitialized() const {
  return true;
}

void PrepareWifiProfileNTF::InternalSwap(PrepareWifiProfileNTF* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareWifiProfileNTF::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAppInfoReq::InitAsDefaultInstance() {
}
class GetAppInfoReq::_Internal {
 public:
};

GetAppInfoReq::GetAppInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.GetAppInfoReq)
}
GetAppInfoReq::GetAppInfoReq(const GetAppInfoReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfcat.GetAppInfoReq)
}

void GetAppInfoReq::SharedCtor() {
}

GetAppInfoReq::~GetAppInfoReq() {
  // @@protoc_insertion_point(destructor:perfcat.GetAppInfoReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAppInfoReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetAppInfoReq::ArenaDtor(void* object) {
  GetAppInfoReq* _this = reinterpret_cast< GetAppInfoReq* >(object);
  (void)_this;
}
void GetAppInfoReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAppInfoReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAppInfoReq& GetAppInfoReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAppInfoReq_perfcat_2eproto.base);
  return *internal_default_instance();
}


void GetAppInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.GetAppInfoReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAppInfoReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAppInfoReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.GetAppInfoReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.GetAppInfoReq)
  return target;
}

size_t GetAppInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.GetAppInfoReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAppInfoReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.GetAppInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAppInfoReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAppInfoReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.GetAppInfoReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.GetAppInfoReq)
    MergeFrom(*source);
  }
}

void GetAppInfoReq::MergeFrom(const GetAppInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.GetAppInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetAppInfoReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.GetAppInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppInfoReq::CopyFrom(const GetAppInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.GetAppInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppInfoReq::IsInitialized() const {
  return true;
}

void GetAppInfoReq::InternalSwap(GetAppInfoReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAppInfoReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAppInfoRsp::InitAsDefaultInstance() {
}
class GetAppInfoRsp::_Internal {
 public:
};

GetAppInfoRsp::GetAppInfoRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  appinfo_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.GetAppInfoRsp)
}
GetAppInfoRsp::GetAppInfoRsp(const GetAppInfoRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      appinfo_(from.appinfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfcat.GetAppInfoRsp)
}

void GetAppInfoRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAppInfoRsp_perfcat_2eproto.base);
}

GetAppInfoRsp::~GetAppInfoRsp() {
  // @@protoc_insertion_point(destructor:perfcat.GetAppInfoRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAppInfoRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetAppInfoRsp::ArenaDtor(void* object) {
  GetAppInfoRsp* _this = reinterpret_cast< GetAppInfoRsp* >(object);
  (void)_this;
}
void GetAppInfoRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAppInfoRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAppInfoRsp& GetAppInfoRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAppInfoRsp_perfcat_2eproto.base);
  return *internal_default_instance();
}


void GetAppInfoRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.GetAppInfoRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appinfo_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAppInfoRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .perfcat.AppInfo appInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_appinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAppInfoRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.GetAppInfoRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfcat.AppInfo appInfo = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_appinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_appinfo(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.GetAppInfoRsp)
  return target;
}

size_t GetAppInfoRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.GetAppInfoRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfcat.AppInfo appInfo = 1;
  total_size += 1UL * this->_internal_appinfo_size();
  for (const auto& msg : this->appinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAppInfoRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.GetAppInfoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAppInfoRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAppInfoRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.GetAppInfoRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.GetAppInfoRsp)
    MergeFrom(*source);
  }
}

void GetAppInfoRsp::MergeFrom(const GetAppInfoRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.GetAppInfoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  appinfo_.MergeFrom(from.appinfo_);
}

void GetAppInfoRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.GetAppInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAppInfoRsp::CopyFrom(const GetAppInfoRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.GetAppInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAppInfoRsp::IsInitialized() const {
  return true;
}

void GetAppInfoRsp::InternalSwap(GetAppInfoRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  appinfo_.InternalSwap(&other->appinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAppInfoRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppInfo::InitAsDefaultInstance() {
}
class AppInfo::_Internal {
 public:
};

AppInfo::AppInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  processlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.AppInfo)
}
AppInfo::AppInfo(const AppInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      processlist_(from.processlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  packagename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_packagename().empty()) {
    packagename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_packagename(),
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
      GetArena());
  }
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_icon().empty()) {
    icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_icon(),
      GetArena());
  }
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_label().empty()) {
    label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_label(),
      GetArena());
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&isdebuggable_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(isdebuggable_));
  // @@protoc_insertion_point(copy_constructor:perfcat.AppInfo)
}

void AppInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppInfo_perfcat_2eproto.base);
  packagename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isdebuggable_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(isdebuggable_));
}

AppInfo::~AppInfo() {
  // @@protoc_insertion_point(destructor:perfcat.AppInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  packagename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppInfo::ArenaDtor(void* object) {
  AppInfo* _this = reinterpret_cast< AppInfo* >(object);
  (void)_this;
}
void AppInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppInfo& AppInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppInfo_perfcat_2eproto.base);
  return *internal_default_instance();
}


void AppInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.AppInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  processlist_.Clear();
  packagename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  icon_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isdebuggable_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(isdebuggable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string packageName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_packagename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "perfcat.AppInfo.packageName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "perfcat.AppInfo.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes icon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string label = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "perfcat.AppInfo.label"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string processList = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_processlist();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "perfcat.AppInfo.processList"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // bool isSystemApp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          issystemapp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isDebuggable = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          isdebuggable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.AppInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string packageName = 1;
  if (this->packagename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_packagename().data(), static_cast<int>(this->_internal_packagename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "perfcat.AppInfo.packageName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_packagename(), target);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "perfcat.AppInfo.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  // bytes icon = 3;
  if (this->icon().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_icon(), target);
  }

  // string label = 4;
  if (this->label().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "perfcat.AppInfo.label");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_label(), target);
  }

  // int32 pid = 5;
  if (this->pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_pid(), target);
  }

  // repeated string processList = 6;
  for (int i = 0, n = this->_internal_processlist_size(); i < n; i++) {
    const auto& s = this->_internal_processlist(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "perfcat.AppInfo.processList");
    target = stream->WriteString(6, s, target);
  }

  // bool isSystemApp = 7;
  if (this->issystemapp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_issystemapp(), target);
  }

  // bool isDebuggable = 8;
  if (this->isdebuggable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_isdebuggable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.AppInfo)
  return target;
}

size_t AppInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.AppInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string processList = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(processlist_.size());
  for (int i = 0, n = processlist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      processlist_.Get(i));
  }

  // string packageName = 1;
  if (this->packagename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_packagename());
  }

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // bytes icon = 3;
  if (this->icon().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_icon());
  }

  // string label = 4;
  if (this->label().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // int32 pid = 5;
  if (this->pid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pid());
  }

  // bool isSystemApp = 7;
  if (this->issystemapp() != 0) {
    total_size += 1 + 1;
  }

  // bool isDebuggable = 8;
  if (this->isdebuggable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.AppInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AppInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.AppInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.AppInfo)
    MergeFrom(*source);
  }
}

void AppInfo::MergeFrom(const AppInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.AppInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  processlist_.MergeFrom(from.processlist_);
  if (from.packagename().size() > 0) {
    _internal_set_packagename(from._internal_packagename());
  }
  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.icon().size() > 0) {
    _internal_set_icon(from._internal_icon());
  }
  if (from.label().size() > 0) {
    _internal_set_label(from._internal_label());
  }
  if (from.pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from.issystemapp() != 0) {
    _internal_set_issystemapp(from._internal_issystemapp());
  }
  if (from.isdebuggable() != 0) {
    _internal_set_isdebuggable(from._internal_isdebuggable());
  }
}

void AppInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.AppInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppInfo::CopyFrom(const AppInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.AppInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppInfo::IsInitialized() const {
  return true;
}

void AppInfo::InternalSwap(AppInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  processlist_.InternalSwap(&other->processlist_);
  packagename_.Swap(&other->packagename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  icon_.Swap(&other->icon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppInfo, isdebuggable_)
      + sizeof(AppInfo::isdebuggable_)
      - PROTOBUF_FIELD_OFFSET(AppInfo, pid_)>(
          reinterpret_cast<char*>(&pid_),
          reinterpret_cast<char*>(&other->pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EmptyRsp::InitAsDefaultInstance() {
}
class EmptyRsp::_Internal {
 public:
};

EmptyRsp::EmptyRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.EmptyRsp)
}
EmptyRsp::EmptyRsp(const EmptyRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfcat.EmptyRsp)
}

void EmptyRsp::SharedCtor() {
}

EmptyRsp::~EmptyRsp() {
  // @@protoc_insertion_point(destructor:perfcat.EmptyRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EmptyRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EmptyRsp::ArenaDtor(void* object) {
  EmptyRsp* _this = reinterpret_cast< EmptyRsp* >(object);
  (void)_this;
}
void EmptyRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EmptyRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EmptyRsp& EmptyRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EmptyRsp_perfcat_2eproto.base);
  return *internal_default_instance();
}


void EmptyRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.EmptyRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmptyRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EmptyRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.EmptyRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.EmptyRsp)
  return target;
}

size_t EmptyRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.EmptyRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EmptyRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.EmptyRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const EmptyRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EmptyRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.EmptyRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.EmptyRsp)
    MergeFrom(*source);
  }
}

void EmptyRsp::MergeFrom(const EmptyRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.EmptyRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EmptyRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.EmptyRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmptyRsp::CopyFrom(const EmptyRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.EmptyRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyRsp::IsInitialized() const {
  return true;
}

void EmptyRsp::InternalSwap(EmptyRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EmptyRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HelloReq::InitAsDefaultInstance() {
}
class HelloReq::_Internal {
 public:
};

HelloReq::HelloReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.HelloReq)
}
HelloReq::HelloReq(const HelloReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfcat.HelloReq)
}

void HelloReq::SharedCtor() {
}

HelloReq::~HelloReq() {
  // @@protoc_insertion_point(destructor:perfcat.HelloReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HelloReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HelloReq::ArenaDtor(void* object) {
  HelloReq* _this = reinterpret_cast< HelloReq* >(object);
  (void)_this;
}
void HelloReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HelloReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HelloReq& HelloReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HelloReq_perfcat_2eproto.base);
  return *internal_default_instance();
}


void HelloReq::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.HelloReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HelloReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HelloReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.HelloReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.HelloReq)
  return target;
}

size_t HelloReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.HelloReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HelloReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.HelloReq)
  GOOGLE_DCHECK_NE(&from, this);
  const HelloReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HelloReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.HelloReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.HelloReq)
    MergeFrom(*source);
  }
}

void HelloReq::MergeFrom(const HelloReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.HelloReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void HelloReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.HelloReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelloReq::CopyFrom(const HelloReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.HelloReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloReq::IsInitialized() const {
  return true;
}

void HelloReq::InternalSwap(HelloReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HelloReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExecuteShellCommandReq::InitAsDefaultInstance() {
}
class ExecuteShellCommandReq::_Internal {
 public:
};

ExecuteShellCommandReq::ExecuteShellCommandReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.ExecuteShellCommandReq)
}
ExecuteShellCommandReq::ExecuteShellCommandReq(const ExecuteShellCommandReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfcat.ExecuteShellCommandReq)
}

void ExecuteShellCommandReq::SharedCtor() {
}

ExecuteShellCommandReq::~ExecuteShellCommandReq() {
  // @@protoc_insertion_point(destructor:perfcat.ExecuteShellCommandReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExecuteShellCommandReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ExecuteShellCommandReq::ArenaDtor(void* object) {
  ExecuteShellCommandReq* _this = reinterpret_cast< ExecuteShellCommandReq* >(object);
  (void)_this;
}
void ExecuteShellCommandReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecuteShellCommandReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecuteShellCommandReq& ExecuteShellCommandReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExecuteShellCommandReq_perfcat_2eproto.base);
  return *internal_default_instance();
}


void ExecuteShellCommandReq::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.ExecuteShellCommandReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteShellCommandReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecuteShellCommandReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.ExecuteShellCommandReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.ExecuteShellCommandReq)
  return target;
}

size_t ExecuteShellCommandReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.ExecuteShellCommandReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecuteShellCommandReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.ExecuteShellCommandReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecuteShellCommandReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExecuteShellCommandReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.ExecuteShellCommandReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.ExecuteShellCommandReq)
    MergeFrom(*source);
  }
}

void ExecuteShellCommandReq::MergeFrom(const ExecuteShellCommandReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.ExecuteShellCommandReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ExecuteShellCommandReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.ExecuteShellCommandReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecuteShellCommandReq::CopyFrom(const ExecuteShellCommandReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.ExecuteShellCommandReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteShellCommandReq::IsInitialized() const {
  return true;
}

void ExecuteShellCommandReq::InternalSwap(ExecuteShellCommandReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteShellCommandReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExecuteShellCommandRsp::InitAsDefaultInstance() {
}
class ExecuteShellCommandRsp::_Internal {
 public:
};

ExecuteShellCommandRsp::ExecuteShellCommandRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.ExecuteShellCommandRsp)
}
ExecuteShellCommandRsp::ExecuteShellCommandRsp(const ExecuteShellCommandRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfcat.ExecuteShellCommandRsp)
}

void ExecuteShellCommandRsp::SharedCtor() {
}

ExecuteShellCommandRsp::~ExecuteShellCommandRsp() {
  // @@protoc_insertion_point(destructor:perfcat.ExecuteShellCommandRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExecuteShellCommandRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ExecuteShellCommandRsp::ArenaDtor(void* object) {
  ExecuteShellCommandRsp* _this = reinterpret_cast< ExecuteShellCommandRsp* >(object);
  (void)_this;
}
void ExecuteShellCommandRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecuteShellCommandRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecuteShellCommandRsp& ExecuteShellCommandRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExecuteShellCommandRsp_perfcat_2eproto.base);
  return *internal_default_instance();
}


void ExecuteShellCommandRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.ExecuteShellCommandRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteShellCommandRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExecuteShellCommandRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.ExecuteShellCommandRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.ExecuteShellCommandRsp)
  return target;
}

size_t ExecuteShellCommandRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.ExecuteShellCommandRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecuteShellCommandRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.ExecuteShellCommandRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecuteShellCommandRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExecuteShellCommandRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.ExecuteShellCommandRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.ExecuteShellCommandRsp)
    MergeFrom(*source);
  }
}

void ExecuteShellCommandRsp::MergeFrom(const ExecuteShellCommandRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.ExecuteShellCommandRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ExecuteShellCommandRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.ExecuteShellCommandRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecuteShellCommandRsp::CopyFrom(const ExecuteShellCommandRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.ExecuteShellCommandRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteShellCommandRsp::IsInitialized() const {
  return true;
}

void ExecuteShellCommandRsp::InternalSwap(ExecuteShellCommandRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteShellCommandRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterAppReq::InitAsDefaultInstance() {
}
class RegisterAppReq::_Internal {
 public:
};

RegisterAppReq::RegisterAppReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.RegisterAppReq)
}
RegisterAppReq::RegisterAppReq(const RegisterAppReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfcat.RegisterAppReq)
}

void RegisterAppReq::SharedCtor() {
}

RegisterAppReq::~RegisterAppReq() {
  // @@protoc_insertion_point(destructor:perfcat.RegisterAppReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegisterAppReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RegisterAppReq::ArenaDtor(void* object) {
  RegisterAppReq* _this = reinterpret_cast< RegisterAppReq* >(object);
  (void)_this;
}
void RegisterAppReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterAppReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterAppReq& RegisterAppReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterAppReq_perfcat_2eproto.base);
  return *internal_default_instance();
}


void RegisterAppReq::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.RegisterAppReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterAppReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterAppReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.RegisterAppReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.RegisterAppReq)
  return target;
}

size_t RegisterAppReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.RegisterAppReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterAppReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.RegisterAppReq)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterAppReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterAppReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.RegisterAppReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.RegisterAppReq)
    MergeFrom(*source);
  }
}

void RegisterAppReq::MergeFrom(const RegisterAppReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.RegisterAppReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RegisterAppReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.RegisterAppReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterAppReq::CopyFrom(const RegisterAppReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.RegisterAppReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterAppReq::IsInitialized() const {
  return true;
}

void RegisterAppReq::InternalSwap(RegisterAppReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterAppReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResumeProfileReq::InitAsDefaultInstance() {
}
class ResumeProfileReq::_Internal {
 public:
};

ResumeProfileReq::ResumeProfileReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.ResumeProfileReq)
}
ResumeProfileReq::ResumeProfileReq(const ResumeProfileReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfcat.ResumeProfileReq)
}

void ResumeProfileReq::SharedCtor() {
}

ResumeProfileReq::~ResumeProfileReq() {
  // @@protoc_insertion_point(destructor:perfcat.ResumeProfileReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResumeProfileReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ResumeProfileReq::ArenaDtor(void* object) {
  ResumeProfileReq* _this = reinterpret_cast< ResumeProfileReq* >(object);
  (void)_this;
}
void ResumeProfileReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResumeProfileReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResumeProfileReq& ResumeProfileReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResumeProfileReq_perfcat_2eproto.base);
  return *internal_default_instance();
}


void ResumeProfileReq::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.ResumeProfileReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResumeProfileReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResumeProfileReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.ResumeProfileReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.ResumeProfileReq)
  return target;
}

size_t ResumeProfileReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.ResumeProfileReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResumeProfileReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.ResumeProfileReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ResumeProfileReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResumeProfileReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.ResumeProfileReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.ResumeProfileReq)
    MergeFrom(*source);
  }
}

void ResumeProfileReq::MergeFrom(const ResumeProfileReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.ResumeProfileReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ResumeProfileReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.ResumeProfileReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResumeProfileReq::CopyFrom(const ResumeProfileReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.ResumeProfileReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResumeProfileReq::IsInitialized() const {
  return true;
}

void ResumeProfileReq::InternalSwap(ResumeProfileReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResumeProfileReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResumeProfileRsp::InitAsDefaultInstance() {
}
class ResumeProfileRsp::_Internal {
 public:
};

ResumeProfileRsp::ResumeProfileRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.ResumeProfileRsp)
}
ResumeProfileRsp::ResumeProfileRsp(const ResumeProfileRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfcat.ResumeProfileRsp)
}

void ResumeProfileRsp::SharedCtor() {
}

ResumeProfileRsp::~ResumeProfileRsp() {
  // @@protoc_insertion_point(destructor:perfcat.ResumeProfileRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResumeProfileRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ResumeProfileRsp::ArenaDtor(void* object) {
  ResumeProfileRsp* _this = reinterpret_cast< ResumeProfileRsp* >(object);
  (void)_this;
}
void ResumeProfileRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResumeProfileRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResumeProfileRsp& ResumeProfileRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResumeProfileRsp_perfcat_2eproto.base);
  return *internal_default_instance();
}


void ResumeProfileRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.ResumeProfileRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResumeProfileRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResumeProfileRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.ResumeProfileRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.ResumeProfileRsp)
  return target;
}

size_t ResumeProfileRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.ResumeProfileRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResumeProfileRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.ResumeProfileRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ResumeProfileRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResumeProfileRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.ResumeProfileRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.ResumeProfileRsp)
    MergeFrom(*source);
  }
}

void ResumeProfileRsp::MergeFrom(const ResumeProfileRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.ResumeProfileRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ResumeProfileRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.ResumeProfileRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResumeProfileRsp::CopyFrom(const ResumeProfileRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.ResumeProfileRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResumeProfileRsp::IsInitialized() const {
  return true;
}

void ResumeProfileRsp::InternalSwap(ResumeProfileRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResumeProfileRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetDataFromAppReq::InitAsDefaultInstance() {
}
class GetDataFromAppReq::_Internal {
 public:
};

GetDataFromAppReq::GetDataFromAppReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.GetDataFromAppReq)
}
GetDataFromAppReq::GetDataFromAppReq(const GetDataFromAppReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfcat.GetDataFromAppReq)
}

void GetDataFromAppReq::SharedCtor() {
}

GetDataFromAppReq::~GetDataFromAppReq() {
  // @@protoc_insertion_point(destructor:perfcat.GetDataFromAppReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetDataFromAppReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetDataFromAppReq::ArenaDtor(void* object) {
  GetDataFromAppReq* _this = reinterpret_cast< GetDataFromAppReq* >(object);
  (void)_this;
}
void GetDataFromAppReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDataFromAppReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDataFromAppReq& GetDataFromAppReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDataFromAppReq_perfcat_2eproto.base);
  return *internal_default_instance();
}


void GetDataFromAppReq::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.GetDataFromAppReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDataFromAppReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDataFromAppReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.GetDataFromAppReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.GetDataFromAppReq)
  return target;
}

size_t GetDataFromAppReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.GetDataFromAppReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDataFromAppReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.GetDataFromAppReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDataFromAppReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDataFromAppReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.GetDataFromAppReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.GetDataFromAppReq)
    MergeFrom(*source);
  }
}

void GetDataFromAppReq::MergeFrom(const GetDataFromAppReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.GetDataFromAppReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetDataFromAppReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.GetDataFromAppReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDataFromAppReq::CopyFrom(const GetDataFromAppReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.GetDataFromAppReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDataFromAppReq::IsInitialized() const {
  return true;
}

void GetDataFromAppReq::InternalSwap(GetDataFromAppReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDataFromAppReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetDataFromAppRsp::InitAsDefaultInstance() {
}
class GetDataFromAppRsp::_Internal {
 public:
};

GetDataFromAppRsp::GetDataFromAppRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.GetDataFromAppRsp)
}
GetDataFromAppRsp::GetDataFromAppRsp(const GetDataFromAppRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfcat.GetDataFromAppRsp)
}

void GetDataFromAppRsp::SharedCtor() {
}

GetDataFromAppRsp::~GetDataFromAppRsp() {
  // @@protoc_insertion_point(destructor:perfcat.GetDataFromAppRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetDataFromAppRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetDataFromAppRsp::ArenaDtor(void* object) {
  GetDataFromAppRsp* _this = reinterpret_cast< GetDataFromAppRsp* >(object);
  (void)_this;
}
void GetDataFromAppRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDataFromAppRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDataFromAppRsp& GetDataFromAppRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDataFromAppRsp_perfcat_2eproto.base);
  return *internal_default_instance();
}


void GetDataFromAppRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.GetDataFromAppRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDataFromAppRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDataFromAppRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.GetDataFromAppRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.GetDataFromAppRsp)
  return target;
}

size_t GetDataFromAppRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.GetDataFromAppRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDataFromAppRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.GetDataFromAppRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDataFromAppRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDataFromAppRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.GetDataFromAppRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.GetDataFromAppRsp)
    MergeFrom(*source);
  }
}

void GetDataFromAppRsp::MergeFrom(const GetDataFromAppRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.GetDataFromAppRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetDataFromAppRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.GetDataFromAppRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDataFromAppRsp::CopyFrom(const GetDataFromAppRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.GetDataFromAppRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDataFromAppRsp::IsInitialized() const {
  return true;
}

void GetDataFromAppRsp::InternalSwap(GetDataFromAppRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDataFromAppRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetScreenshotIntervalReq::InitAsDefaultInstance() {
}
class SetScreenshotIntervalReq::_Internal {
 public:
};

SetScreenshotIntervalReq::SetScreenshotIntervalReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.SetScreenshotIntervalReq)
}
SetScreenshotIntervalReq::SetScreenshotIntervalReq(const SetScreenshotIntervalReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfcat.SetScreenshotIntervalReq)
}

void SetScreenshotIntervalReq::SharedCtor() {
}

SetScreenshotIntervalReq::~SetScreenshotIntervalReq() {
  // @@protoc_insertion_point(destructor:perfcat.SetScreenshotIntervalReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetScreenshotIntervalReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetScreenshotIntervalReq::ArenaDtor(void* object) {
  SetScreenshotIntervalReq* _this = reinterpret_cast< SetScreenshotIntervalReq* >(object);
  (void)_this;
}
void SetScreenshotIntervalReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetScreenshotIntervalReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetScreenshotIntervalReq& SetScreenshotIntervalReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetScreenshotIntervalReq_perfcat_2eproto.base);
  return *internal_default_instance();
}


void SetScreenshotIntervalReq::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.SetScreenshotIntervalReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetScreenshotIntervalReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetScreenshotIntervalReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.SetScreenshotIntervalReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.SetScreenshotIntervalReq)
  return target;
}

size_t SetScreenshotIntervalReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.SetScreenshotIntervalReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetScreenshotIntervalReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.SetScreenshotIntervalReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetScreenshotIntervalReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetScreenshotIntervalReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.SetScreenshotIntervalReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.SetScreenshotIntervalReq)
    MergeFrom(*source);
  }
}

void SetScreenshotIntervalReq::MergeFrom(const SetScreenshotIntervalReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.SetScreenshotIntervalReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SetScreenshotIntervalReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.SetScreenshotIntervalReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetScreenshotIntervalReq::CopyFrom(const SetScreenshotIntervalReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.SetScreenshotIntervalReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetScreenshotIntervalReq::IsInitialized() const {
  return true;
}

void SetScreenshotIntervalReq::InternalSwap(SetScreenshotIntervalReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetScreenshotIntervalReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnableFloatingWindowReq::InitAsDefaultInstance() {
}
class EnableFloatingWindowReq::_Internal {
 public:
};

EnableFloatingWindowReq::EnableFloatingWindowReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.EnableFloatingWindowReq)
}
EnableFloatingWindowReq::EnableFloatingWindowReq(const EnableFloatingWindowReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfcat.EnableFloatingWindowReq)
}

void EnableFloatingWindowReq::SharedCtor() {
}

EnableFloatingWindowReq::~EnableFloatingWindowReq() {
  // @@protoc_insertion_point(destructor:perfcat.EnableFloatingWindowReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnableFloatingWindowReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnableFloatingWindowReq::ArenaDtor(void* object) {
  EnableFloatingWindowReq* _this = reinterpret_cast< EnableFloatingWindowReq* >(object);
  (void)_this;
}
void EnableFloatingWindowReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnableFloatingWindowReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnableFloatingWindowReq& EnableFloatingWindowReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnableFloatingWindowReq_perfcat_2eproto.base);
  return *internal_default_instance();
}


void EnableFloatingWindowReq::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.EnableFloatingWindowReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnableFloatingWindowReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnableFloatingWindowReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.EnableFloatingWindowReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.EnableFloatingWindowReq)
  return target;
}

size_t EnableFloatingWindowReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.EnableFloatingWindowReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableFloatingWindowReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.EnableFloatingWindowReq)
  GOOGLE_DCHECK_NE(&from, this);
  const EnableFloatingWindowReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnableFloatingWindowReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.EnableFloatingWindowReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.EnableFloatingWindowReq)
    MergeFrom(*source);
  }
}

void EnableFloatingWindowReq::MergeFrom(const EnableFloatingWindowReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.EnableFloatingWindowReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EnableFloatingWindowReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.EnableFloatingWindowReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnableFloatingWindowReq::CopyFrom(const EnableFloatingWindowReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.EnableFloatingWindowReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableFloatingWindowReq::IsInitialized() const {
  return true;
}

void EnableFloatingWindowReq::InternalSwap(EnableFloatingWindowReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnableFloatingWindowReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetScreenInfoReq::InitAsDefaultInstance() {
}
class GetScreenInfoReq::_Internal {
 public:
};

GetScreenInfoReq::GetScreenInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.GetScreenInfoReq)
}
GetScreenInfoReq::GetScreenInfoReq(const GetScreenInfoReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfcat.GetScreenInfoReq)
}

void GetScreenInfoReq::SharedCtor() {
}

GetScreenInfoReq::~GetScreenInfoReq() {
  // @@protoc_insertion_point(destructor:perfcat.GetScreenInfoReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetScreenInfoReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetScreenInfoReq::ArenaDtor(void* object) {
  GetScreenInfoReq* _this = reinterpret_cast< GetScreenInfoReq* >(object);
  (void)_this;
}
void GetScreenInfoReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetScreenInfoReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetScreenInfoReq& GetScreenInfoReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetScreenInfoReq_perfcat_2eproto.base);
  return *internal_default_instance();
}


void GetScreenInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.GetScreenInfoReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetScreenInfoReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetScreenInfoReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.GetScreenInfoReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.GetScreenInfoReq)
  return target;
}

size_t GetScreenInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.GetScreenInfoReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetScreenInfoReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.GetScreenInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetScreenInfoReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetScreenInfoReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.GetScreenInfoReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.GetScreenInfoReq)
    MergeFrom(*source);
  }
}

void GetScreenInfoReq::MergeFrom(const GetScreenInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.GetScreenInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetScreenInfoReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.GetScreenInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetScreenInfoReq::CopyFrom(const GetScreenInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.GetScreenInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetScreenInfoReq::IsInitialized() const {
  return true;
}

void GetScreenInfoReq::InternalSwap(GetScreenInfoReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetScreenInfoReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetScreenInfoRsp::InitAsDefaultInstance() {
}
class GetScreenInfoRsp::_Internal {
 public:
};

GetScreenInfoRsp::GetScreenInfoRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.GetScreenInfoRsp)
}
GetScreenInfoRsp::GetScreenInfoRsp(const GetScreenInfoRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&screensize_, &from.screensize_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&screensize_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:perfcat.GetScreenInfoRsp)
}

void GetScreenInfoRsp::SharedCtor() {
  ::memset(&screensize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&screensize_)) + sizeof(height_));
}

GetScreenInfoRsp::~GetScreenInfoRsp() {
  // @@protoc_insertion_point(destructor:perfcat.GetScreenInfoRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetScreenInfoRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetScreenInfoRsp::ArenaDtor(void* object) {
  GetScreenInfoRsp* _this = reinterpret_cast< GetScreenInfoRsp* >(object);
  (void)_this;
}
void GetScreenInfoRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetScreenInfoRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetScreenInfoRsp& GetScreenInfoRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetScreenInfoRsp_perfcat_2eproto.base);
  return *internal_default_instance();
}


void GetScreenInfoRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.GetScreenInfoRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&screensize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&screensize_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetScreenInfoRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float screenSize = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          screensize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetScreenInfoRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.GetScreenInfoRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float screenSize = 1;
  if (!(this->screensize() <= 0 && this->screensize() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_screensize(), target);
  }

  // int32 width = 2;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_width(), target);
  }

  // int32 height = 3;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.GetScreenInfoRsp)
  return target;
}

size_t GetScreenInfoRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.GetScreenInfoRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float screenSize = 1;
  if (!(this->screensize() <= 0 && this->screensize() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetScreenInfoRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.GetScreenInfoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetScreenInfoRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetScreenInfoRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.GetScreenInfoRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.GetScreenInfoRsp)
    MergeFrom(*source);
  }
}

void GetScreenInfoRsp::MergeFrom(const GetScreenInfoRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.GetScreenInfoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.screensize() <= 0 && from.screensize() >= 0)) {
    _internal_set_screensize(from._internal_screensize());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void GetScreenInfoRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.GetScreenInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetScreenInfoRsp::CopyFrom(const GetScreenInfoRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.GetScreenInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetScreenInfoRsp::IsInitialized() const {
  return true;
}

void GetScreenInfoRsp::InternalSwap(GetScreenInfoRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetScreenInfoRsp, height_)
      + sizeof(GetScreenInfoRsp::height_)
      - PROTOBUF_FIELD_OFFSET(GetScreenInfoRsp, screensize_)>(
          reinterpret_cast<char*>(&screensize_),
          reinterpret_cast<char*>(&other->screensize_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetScreenInfoRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetLMKThresholdReq::InitAsDefaultInstance() {
}
class GetLMKThresholdReq::_Internal {
 public:
};

GetLMKThresholdReq::GetLMKThresholdReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.GetLMKThresholdReq)
}
GetLMKThresholdReq::GetLMKThresholdReq(const GetLMKThresholdReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfcat.GetLMKThresholdReq)
}

void GetLMKThresholdReq::SharedCtor() {
}

GetLMKThresholdReq::~GetLMKThresholdReq() {
  // @@protoc_insertion_point(destructor:perfcat.GetLMKThresholdReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetLMKThresholdReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetLMKThresholdReq::ArenaDtor(void* object) {
  GetLMKThresholdReq* _this = reinterpret_cast< GetLMKThresholdReq* >(object);
  (void)_this;
}
void GetLMKThresholdReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLMKThresholdReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLMKThresholdReq& GetLMKThresholdReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLMKThresholdReq_perfcat_2eproto.base);
  return *internal_default_instance();
}


void GetLMKThresholdReq::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.GetLMKThresholdReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLMKThresholdReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLMKThresholdReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.GetLMKThresholdReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.GetLMKThresholdReq)
  return target;
}

size_t GetLMKThresholdReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.GetLMKThresholdReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLMKThresholdReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.GetLMKThresholdReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLMKThresholdReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLMKThresholdReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.GetLMKThresholdReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.GetLMKThresholdReq)
    MergeFrom(*source);
  }
}

void GetLMKThresholdReq::MergeFrom(const GetLMKThresholdReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.GetLMKThresholdReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetLMKThresholdReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.GetLMKThresholdReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLMKThresholdReq::CopyFrom(const GetLMKThresholdReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.GetLMKThresholdReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLMKThresholdReq::IsInitialized() const {
  return true;
}

void GetLMKThresholdReq::InternalSwap(GetLMKThresholdReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLMKThresholdReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetLMKThresholdRsp::InitAsDefaultInstance() {
}
class GetLMKThresholdRsp::_Internal {
 public:
};

GetLMKThresholdRsp::GetLMKThresholdRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.GetLMKThresholdRsp)
}
GetLMKThresholdRsp::GetLMKThresholdRsp(const GetLMKThresholdRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  memorythreshold_ = from.memorythreshold_;
  // @@protoc_insertion_point(copy_constructor:perfcat.GetLMKThresholdRsp)
}

void GetLMKThresholdRsp::SharedCtor() {
  memorythreshold_ = 0;
}

GetLMKThresholdRsp::~GetLMKThresholdRsp() {
  // @@protoc_insertion_point(destructor:perfcat.GetLMKThresholdRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetLMKThresholdRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetLMKThresholdRsp::ArenaDtor(void* object) {
  GetLMKThresholdRsp* _this = reinterpret_cast< GetLMKThresholdRsp* >(object);
  (void)_this;
}
void GetLMKThresholdRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLMKThresholdRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLMKThresholdRsp& GetLMKThresholdRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLMKThresholdRsp_perfcat_2eproto.base);
  return *internal_default_instance();
}


void GetLMKThresholdRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.GetLMKThresholdRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  memorythreshold_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLMKThresholdRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 memoryThreshold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          memorythreshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLMKThresholdRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.GetLMKThresholdRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 memoryThreshold = 1;
  if (this->memorythreshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_memorythreshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.GetLMKThresholdRsp)
  return target;
}

size_t GetLMKThresholdRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.GetLMKThresholdRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 memoryThreshold = 1;
  if (this->memorythreshold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_memorythreshold());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLMKThresholdRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.GetLMKThresholdRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLMKThresholdRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLMKThresholdRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.GetLMKThresholdRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.GetLMKThresholdRsp)
    MergeFrom(*source);
  }
}

void GetLMKThresholdRsp::MergeFrom(const GetLMKThresholdRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.GetLMKThresholdRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.memorythreshold() != 0) {
    _internal_set_memorythreshold(from._internal_memorythreshold());
  }
}

void GetLMKThresholdRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.GetLMKThresholdRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLMKThresholdRsp::CopyFrom(const GetLMKThresholdRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.GetLMKThresholdRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLMKThresholdRsp::IsInitialized() const {
  return true;
}

void GetLMKThresholdRsp::InternalSwap(GetLMKThresholdRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(memorythreshold_, other->memorythreshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLMKThresholdRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CheckOverlayPermissionReq::InitAsDefaultInstance() {
}
class CheckOverlayPermissionReq::_Internal {
 public:
};

CheckOverlayPermissionReq::CheckOverlayPermissionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.CheckOverlayPermissionReq)
}
CheckOverlayPermissionReq::CheckOverlayPermissionReq(const CheckOverlayPermissionReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfcat.CheckOverlayPermissionReq)
}

void CheckOverlayPermissionReq::SharedCtor() {
}

CheckOverlayPermissionReq::~CheckOverlayPermissionReq() {
  // @@protoc_insertion_point(destructor:perfcat.CheckOverlayPermissionReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CheckOverlayPermissionReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CheckOverlayPermissionReq::ArenaDtor(void* object) {
  CheckOverlayPermissionReq* _this = reinterpret_cast< CheckOverlayPermissionReq* >(object);
  (void)_this;
}
void CheckOverlayPermissionReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckOverlayPermissionReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckOverlayPermissionReq& CheckOverlayPermissionReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckOverlayPermissionReq_perfcat_2eproto.base);
  return *internal_default_instance();
}


void CheckOverlayPermissionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.CheckOverlayPermissionReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckOverlayPermissionReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckOverlayPermissionReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.CheckOverlayPermissionReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.CheckOverlayPermissionReq)
  return target;
}

size_t CheckOverlayPermissionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.CheckOverlayPermissionReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckOverlayPermissionReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.CheckOverlayPermissionReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckOverlayPermissionReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckOverlayPermissionReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.CheckOverlayPermissionReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.CheckOverlayPermissionReq)
    MergeFrom(*source);
  }
}

void CheckOverlayPermissionReq::MergeFrom(const CheckOverlayPermissionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.CheckOverlayPermissionReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CheckOverlayPermissionReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.CheckOverlayPermissionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckOverlayPermissionReq::CopyFrom(const CheckOverlayPermissionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.CheckOverlayPermissionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckOverlayPermissionReq::IsInitialized() const {
  return true;
}

void CheckOverlayPermissionReq::InternalSwap(CheckOverlayPermissionReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckOverlayPermissionReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CheckOverlayPermissionRsp::InitAsDefaultInstance() {
}
class CheckOverlayPermissionRsp::_Internal {
 public:
};

CheckOverlayPermissionRsp::CheckOverlayPermissionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.CheckOverlayPermissionRsp)
}
CheckOverlayPermissionRsp::CheckOverlayPermissionRsp(const CheckOverlayPermissionRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  overlaypermission_ = from.overlaypermission_;
  // @@protoc_insertion_point(copy_constructor:perfcat.CheckOverlayPermissionRsp)
}

void CheckOverlayPermissionRsp::SharedCtor() {
  overlaypermission_ = false;
}

CheckOverlayPermissionRsp::~CheckOverlayPermissionRsp() {
  // @@protoc_insertion_point(destructor:perfcat.CheckOverlayPermissionRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CheckOverlayPermissionRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CheckOverlayPermissionRsp::ArenaDtor(void* object) {
  CheckOverlayPermissionRsp* _this = reinterpret_cast< CheckOverlayPermissionRsp* >(object);
  (void)_this;
}
void CheckOverlayPermissionRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckOverlayPermissionRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckOverlayPermissionRsp& CheckOverlayPermissionRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckOverlayPermissionRsp_perfcat_2eproto.base);
  return *internal_default_instance();
}


void CheckOverlayPermissionRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.CheckOverlayPermissionRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  overlaypermission_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckOverlayPermissionRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool overLayPermission = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          overlaypermission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckOverlayPermissionRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.CheckOverlayPermissionRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool overLayPermission = 1;
  if (this->overlaypermission() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_overlaypermission(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.CheckOverlayPermissionRsp)
  return target;
}

size_t CheckOverlayPermissionRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.CheckOverlayPermissionRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool overLayPermission = 1;
  if (this->overlaypermission() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckOverlayPermissionRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.CheckOverlayPermissionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckOverlayPermissionRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckOverlayPermissionRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.CheckOverlayPermissionRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.CheckOverlayPermissionRsp)
    MergeFrom(*source);
  }
}

void CheckOverlayPermissionRsp::MergeFrom(const CheckOverlayPermissionRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.CheckOverlayPermissionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.overlaypermission() != 0) {
    _internal_set_overlaypermission(from._internal_overlaypermission());
  }
}

void CheckOverlayPermissionRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.CheckOverlayPermissionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckOverlayPermissionRsp::CopyFrom(const CheckOverlayPermissionRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.CheckOverlayPermissionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckOverlayPermissionRsp::IsInitialized() const {
  return true;
}

void CheckOverlayPermissionRsp::InternalSwap(CheckOverlayPermissionRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(overlaypermission_, other->overlaypermission_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckOverlayPermissionRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppHelloReq::InitAsDefaultInstance() {
}
class AppHelloReq::_Internal {
 public:
};

AppHelloReq::AppHelloReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.AppHelloReq)
}
AppHelloReq::AppHelloReq(const AppHelloReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfcat.AppHelloReq)
}

void AppHelloReq::SharedCtor() {
}

AppHelloReq::~AppHelloReq() {
  // @@protoc_insertion_point(destructor:perfcat.AppHelloReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppHelloReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AppHelloReq::ArenaDtor(void* object) {
  AppHelloReq* _this = reinterpret_cast< AppHelloReq* >(object);
  (void)_this;
}
void AppHelloReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppHelloReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppHelloReq& AppHelloReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppHelloReq_perfcat_2eproto.base);
  return *internal_default_instance();
}


void AppHelloReq::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.AppHelloReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppHelloReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppHelloReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.AppHelloReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.AppHelloReq)
  return target;
}

size_t AppHelloReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.AppHelloReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppHelloReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.AppHelloReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AppHelloReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppHelloReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.AppHelloReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.AppHelloReq)
    MergeFrom(*source);
  }
}

void AppHelloReq::MergeFrom(const AppHelloReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.AppHelloReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AppHelloReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.AppHelloReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppHelloReq::CopyFrom(const AppHelloReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.AppHelloReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppHelloReq::IsInitialized() const {
  return true;
}

void AppHelloReq::InternalSwap(AppHelloReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppHelloReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppHelloRsp::InitAsDefaultInstance() {
}
class AppHelloRsp::_Internal {
 public:
};

AppHelloRsp::AppHelloRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.AppHelloRsp)
}
AppHelloRsp::AppHelloRsp(const AppHelloRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:perfcat.AppHelloRsp)
}

void AppHelloRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppHelloRsp_perfcat_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AppHelloRsp::~AppHelloRsp() {
  // @@protoc_insertion_point(destructor:perfcat.AppHelloRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppHelloRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppHelloRsp::ArenaDtor(void* object) {
  AppHelloRsp* _this = reinterpret_cast< AppHelloRsp* >(object);
  (void)_this;
}
void AppHelloRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppHelloRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppHelloRsp& AppHelloRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppHelloRsp_perfcat_2eproto.base);
  return *internal_default_instance();
}


void AppHelloRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.AppHelloRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppHelloRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "perfcat.AppHelloRsp.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppHelloRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.AppHelloRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "perfcat.AppHelloRsp.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.AppHelloRsp)
  return target;
}

size_t AppHelloRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.AppHelloRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppHelloRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.AppHelloRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const AppHelloRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppHelloRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.AppHelloRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.AppHelloRsp)
    MergeFrom(*source);
  }
}

void AppHelloRsp::MergeFrom(const AppHelloRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.AppHelloRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
}

void AppHelloRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.AppHelloRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppHelloRsp::CopyFrom(const AppHelloRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.AppHelloRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppHelloRsp::IsInitialized() const {
  return true;
}

void AppHelloRsp::InternalSwap(AppHelloRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AppHelloRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProfileIOSNtf::InitAsDefaultInstance() {
  ::perfcat::_ProfileIOSNtf_default_instance_._instance.get_mutable()->screenshot_ = const_cast< ::perfcat::Screenshot*>(
      ::perfcat::Screenshot::internal_default_instance());
  ::perfcat::_ProfileIOSNtf_default_instance_._instance.get_mutable()->fps_ = const_cast< ::perfcat::FPS*>(
      ::perfcat::FPS::internal_default_instance());
  ::perfcat::_ProfileIOSNtf_default_instance_._instance.get_mutable()->frametime_ = const_cast< ::perfcat::iOSFrameTime*>(
      ::perfcat::iOSFrameTime::internal_default_instance());
  ::perfcat::_ProfileIOSNtf_default_instance_._instance.get_mutable()->cpuusage_ = const_cast< ::perfcat::CpuUsage*>(
      ::perfcat::CpuUsage::internal_default_instance());
  ::perfcat::_ProfileIOSNtf_default_instance_._instance.get_mutable()->memory_ = const_cast< ::perfcat::iOSMemory*>(
      ::perfcat::iOSMemory::internal_default_instance());
  ::perfcat::_ProfileIOSNtf_default_instance_._instance.get_mutable()->gpuusage_ = const_cast< ::perfcat::iOSGpuUsage*>(
      ::perfcat::iOSGpuUsage::internal_default_instance());
  ::perfcat::_ProfileIOSNtf_default_instance_._instance.get_mutable()->network_ = const_cast< ::perfcat::Network*>(
      ::perfcat::Network::internal_default_instance());
  ::perfcat::_ProfileIOSNtf_default_instance_._instance.get_mutable()->power_ = const_cast< ::perfcat::Power*>(
      ::perfcat::Power::internal_default_instance());
  ::perfcat::_ProfileIOSNtf_default_instance_._instance.get_mutable()->contextswitch_ = const_cast< ::perfcat::iOSContextSwitch*>(
      ::perfcat::iOSContextSwitch::internal_default_instance());
  ::perfcat::_ProfileIOSNtf_default_instance_._instance.get_mutable()->wakeups_ = const_cast< ::perfcat::iOSWakeups*>(
      ::perfcat::iOSWakeups::internal_default_instance());
  ::perfcat::_ProfileIOSNtf_default_instance_._instance.get_mutable()->energyusage_ = const_cast< ::perfcat::iOSEnergyUsage*>(
      ::perfcat::iOSEnergyUsage::internal_default_instance());
}
class ProfileIOSNtf::_Internal {
 public:
  static const ::perfcat::Screenshot& screenshot(const ProfileIOSNtf* msg);
  static const ::perfcat::FPS& fps(const ProfileIOSNtf* msg);
  static const ::perfcat::iOSFrameTime& frametime(const ProfileIOSNtf* msg);
  static const ::perfcat::CpuUsage& cpuusage(const ProfileIOSNtf* msg);
  static const ::perfcat::iOSMemory& memory(const ProfileIOSNtf* msg);
  static const ::perfcat::iOSGpuUsage& gpuusage(const ProfileIOSNtf* msg);
  static const ::perfcat::Network& network(const ProfileIOSNtf* msg);
  static const ::perfcat::Power& power(const ProfileIOSNtf* msg);
  static const ::perfcat::iOSContextSwitch& contextswitch(const ProfileIOSNtf* msg);
  static const ::perfcat::iOSWakeups& wakeups(const ProfileIOSNtf* msg);
  static const ::perfcat::iOSEnergyUsage& energyusage(const ProfileIOSNtf* msg);
};

const ::perfcat::Screenshot&
ProfileIOSNtf::_Internal::screenshot(const ProfileIOSNtf* msg) {
  return *msg->screenshot_;
}
const ::perfcat::FPS&
ProfileIOSNtf::_Internal::fps(const ProfileIOSNtf* msg) {
  return *msg->fps_;
}
const ::perfcat::iOSFrameTime&
ProfileIOSNtf::_Internal::frametime(const ProfileIOSNtf* msg) {
  return *msg->frametime_;
}
const ::perfcat::CpuUsage&
ProfileIOSNtf::_Internal::cpuusage(const ProfileIOSNtf* msg) {
  return *msg->cpuusage_;
}
const ::perfcat::iOSMemory&
ProfileIOSNtf::_Internal::memory(const ProfileIOSNtf* msg) {
  return *msg->memory_;
}
const ::perfcat::iOSGpuUsage&
ProfileIOSNtf::_Internal::gpuusage(const ProfileIOSNtf* msg) {
  return *msg->gpuusage_;
}
const ::perfcat::Network&
ProfileIOSNtf::_Internal::network(const ProfileIOSNtf* msg) {
  return *msg->network_;
}
const ::perfcat::Power&
ProfileIOSNtf::_Internal::power(const ProfileIOSNtf* msg) {
  return *msg->power_;
}
const ::perfcat::iOSContextSwitch&
ProfileIOSNtf::_Internal::contextswitch(const ProfileIOSNtf* msg) {
  return *msg->contextswitch_;
}
const ::perfcat::iOSWakeups&
ProfileIOSNtf::_Internal::wakeups(const ProfileIOSNtf* msg) {
  return *msg->wakeups_;
}
const ::perfcat::iOSEnergyUsage&
ProfileIOSNtf::_Internal::energyusage(const ProfileIOSNtf* msg) {
  return *msg->energyusage_;
}
ProfileIOSNtf::ProfileIOSNtf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.ProfileIOSNtf)
}
ProfileIOSNtf::ProfileIOSNtf(const ProfileIOSNtf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_screenshot()) {
    screenshot_ = new ::perfcat::Screenshot(*from.screenshot_);
  } else {
    screenshot_ = nullptr;
  }
  if (from._internal_has_fps()) {
    fps_ = new ::perfcat::FPS(*from.fps_);
  } else {
    fps_ = nullptr;
  }
  if (from._internal_has_frametime()) {
    frametime_ = new ::perfcat::iOSFrameTime(*from.frametime_);
  } else {
    frametime_ = nullptr;
  }
  if (from._internal_has_cpuusage()) {
    cpuusage_ = new ::perfcat::CpuUsage(*from.cpuusage_);
  } else {
    cpuusage_ = nullptr;
  }
  if (from._internal_has_memory()) {
    memory_ = new ::perfcat::iOSMemory(*from.memory_);
  } else {
    memory_ = nullptr;
  }
  if (from._internal_has_gpuusage()) {
    gpuusage_ = new ::perfcat::iOSGpuUsage(*from.gpuusage_);
  } else {
    gpuusage_ = nullptr;
  }
  if (from._internal_has_network()) {
    network_ = new ::perfcat::Network(*from.network_);
  } else {
    network_ = nullptr;
  }
  if (from._internal_has_power()) {
    power_ = new ::perfcat::Power(*from.power_);
  } else {
    power_ = nullptr;
  }
  if (from._internal_has_contextswitch()) {
    contextswitch_ = new ::perfcat::iOSContextSwitch(*from.contextswitch_);
  } else {
    contextswitch_ = nullptr;
  }
  if (from._internal_has_wakeups()) {
    wakeups_ = new ::perfcat::iOSWakeups(*from.wakeups_);
  } else {
    wakeups_ = nullptr;
  }
  if (from._internal_has_energyusage()) {
    energyusage_ = new ::perfcat::iOSEnergyUsage(*from.energyusage_);
  } else {
    energyusage_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:perfcat.ProfileIOSNtf)
}

void ProfileIOSNtf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfileIOSNtf_perfcat_2eproto.base);
  ::memset(&screenshot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&screenshot_)) + sizeof(index_));
}

ProfileIOSNtf::~ProfileIOSNtf() {
  // @@protoc_insertion_point(destructor:perfcat.ProfileIOSNtf)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfileIOSNtf::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete screenshot_;
  if (this != internal_default_instance()) delete fps_;
  if (this != internal_default_instance()) delete frametime_;
  if (this != internal_default_instance()) delete cpuusage_;
  if (this != internal_default_instance()) delete memory_;
  if (this != internal_default_instance()) delete gpuusage_;
  if (this != internal_default_instance()) delete network_;
  if (this != internal_default_instance()) delete power_;
  if (this != internal_default_instance()) delete contextswitch_;
  if (this != internal_default_instance()) delete wakeups_;
  if (this != internal_default_instance()) delete energyusage_;
}

void ProfileIOSNtf::ArenaDtor(void* object) {
  ProfileIOSNtf* _this = reinterpret_cast< ProfileIOSNtf* >(object);
  (void)_this;
}
void ProfileIOSNtf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfileIOSNtf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfileIOSNtf& ProfileIOSNtf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfileIOSNtf_perfcat_2eproto.base);
  return *internal_default_instance();
}


void ProfileIOSNtf::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.ProfileIOSNtf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && screenshot_ != nullptr) {
    delete screenshot_;
  }
  screenshot_ = nullptr;
  if (GetArena() == nullptr && fps_ != nullptr) {
    delete fps_;
  }
  fps_ = nullptr;
  if (GetArena() == nullptr && frametime_ != nullptr) {
    delete frametime_;
  }
  frametime_ = nullptr;
  if (GetArena() == nullptr && cpuusage_ != nullptr) {
    delete cpuusage_;
  }
  cpuusage_ = nullptr;
  if (GetArena() == nullptr && memory_ != nullptr) {
    delete memory_;
  }
  memory_ = nullptr;
  if (GetArena() == nullptr && gpuusage_ != nullptr) {
    delete gpuusage_;
  }
  gpuusage_ = nullptr;
  if (GetArena() == nullptr && network_ != nullptr) {
    delete network_;
  }
  network_ = nullptr;
  if (GetArena() == nullptr && power_ != nullptr) {
    delete power_;
  }
  power_ = nullptr;
  if (GetArena() == nullptr && contextswitch_ != nullptr) {
    delete contextswitch_;
  }
  contextswitch_ = nullptr;
  if (GetArena() == nullptr && wakeups_ != nullptr) {
    delete wakeups_;
  }
  wakeups_ = nullptr;
  if (GetArena() == nullptr && energyusage_ != nullptr) {
    delete energyusage_;
  }
  energyusage_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfileIOSNtf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.Screenshot screenshot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_screenshot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.FPS fps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.iOSFrameTime frameTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_frametime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.CpuUsage cpuUsage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpuusage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.iOSMemory memory = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_memory(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.iOSGpuUsage gpuUsage = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_gpuusage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.Network network = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_network(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.Power power = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_power(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.iOSContextSwitch contextSwitch = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_contextswitch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.iOSWakeups wakeups = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_wakeups(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .perfcat.iOSEnergyUsage energyUsage = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_energyusage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfileIOSNtf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.ProfileIOSNtf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // .perfcat.Screenshot screenshot = 3;
  if (this->has_screenshot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::screenshot(this), target, stream);
  }

  // .perfcat.FPS fps = 4;
  if (this->has_fps()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::fps(this), target, stream);
  }

  // .perfcat.iOSFrameTime frameTime = 5;
  if (this->has_frametime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::frametime(this), target, stream);
  }

  // .perfcat.CpuUsage cpuUsage = 6;
  if (this->has_cpuusage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::cpuusage(this), target, stream);
  }

  // .perfcat.iOSMemory memory = 7;
  if (this->has_memory()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::memory(this), target, stream);
  }

  // .perfcat.iOSGpuUsage gpuUsage = 8;
  if (this->has_gpuusage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::gpuusage(this), target, stream);
  }

  // .perfcat.Network network = 9;
  if (this->has_network()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::network(this), target, stream);
  }

  // .perfcat.Power power = 10;
  if (this->has_power()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::power(this), target, stream);
  }

  // .perfcat.iOSContextSwitch contextSwitch = 11;
  if (this->has_contextswitch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::contextswitch(this), target, stream);
  }

  // .perfcat.iOSWakeups wakeups = 12;
  if (this->has_wakeups()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::wakeups(this), target, stream);
  }

  // .perfcat.iOSEnergyUsage energyUsage = 13;
  if (this->has_energyusage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::energyusage(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.ProfileIOSNtf)
  return target;
}

size_t ProfileIOSNtf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.ProfileIOSNtf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .perfcat.Screenshot screenshot = 3;
  if (this->has_screenshot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *screenshot_);
  }

  // .perfcat.FPS fps = 4;
  if (this->has_fps()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fps_);
  }

  // .perfcat.iOSFrameTime frameTime = 5;
  if (this->has_frametime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frametime_);
  }

  // .perfcat.CpuUsage cpuUsage = 6;
  if (this->has_cpuusage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cpuusage_);
  }

  // .perfcat.iOSMemory memory = 7;
  if (this->has_memory()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *memory_);
  }

  // .perfcat.iOSGpuUsage gpuUsage = 8;
  if (this->has_gpuusage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gpuusage_);
  }

  // .perfcat.Network network = 9;
  if (this->has_network()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *network_);
  }

  // .perfcat.Power power = 10;
  if (this->has_power()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *power_);
  }

  // .perfcat.iOSContextSwitch contextSwitch = 11;
  if (this->has_contextswitch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *contextswitch_);
  }

  // .perfcat.iOSWakeups wakeups = 12;
  if (this->has_wakeups()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *wakeups_);
  }

  // .perfcat.iOSEnergyUsage energyUsage = 13;
  if (this->has_energyusage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *energyusage_);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfileIOSNtf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.ProfileIOSNtf)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileIOSNtf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfileIOSNtf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.ProfileIOSNtf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.ProfileIOSNtf)
    MergeFrom(*source);
  }
}

void ProfileIOSNtf::MergeFrom(const ProfileIOSNtf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.ProfileIOSNtf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_screenshot()) {
    _internal_mutable_screenshot()->::perfcat::Screenshot::MergeFrom(from._internal_screenshot());
  }
  if (from.has_fps()) {
    _internal_mutable_fps()->::perfcat::FPS::MergeFrom(from._internal_fps());
  }
  if (from.has_frametime()) {
    _internal_mutable_frametime()->::perfcat::iOSFrameTime::MergeFrom(from._internal_frametime());
  }
  if (from.has_cpuusage()) {
    _internal_mutable_cpuusage()->::perfcat::CpuUsage::MergeFrom(from._internal_cpuusage());
  }
  if (from.has_memory()) {
    _internal_mutable_memory()->::perfcat::iOSMemory::MergeFrom(from._internal_memory());
  }
  if (from.has_gpuusage()) {
    _internal_mutable_gpuusage()->::perfcat::iOSGpuUsage::MergeFrom(from._internal_gpuusage());
  }
  if (from.has_network()) {
    _internal_mutable_network()->::perfcat::Network::MergeFrom(from._internal_network());
  }
  if (from.has_power()) {
    _internal_mutable_power()->::perfcat::Power::MergeFrom(from._internal_power());
  }
  if (from.has_contextswitch()) {
    _internal_mutable_contextswitch()->::perfcat::iOSContextSwitch::MergeFrom(from._internal_contextswitch());
  }
  if (from.has_wakeups()) {
    _internal_mutable_wakeups()->::perfcat::iOSWakeups::MergeFrom(from._internal_wakeups());
  }
  if (from.has_energyusage()) {
    _internal_mutable_energyusage()->::perfcat::iOSEnergyUsage::MergeFrom(from._internal_energyusage());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void ProfileIOSNtf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.ProfileIOSNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileIOSNtf::CopyFrom(const ProfileIOSNtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.ProfileIOSNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileIOSNtf::IsInitialized() const {
  return true;
}

void ProfileIOSNtf::InternalSwap(ProfileIOSNtf* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfileIOSNtf, index_)
      + sizeof(ProfileIOSNtf::index_)
      - PROTOBUF_FIELD_OFFSET(ProfileIOSNtf, screenshot_)>(
          reinterpret_cast<char*>(&screenshot_),
          reinterpret_cast<char*>(&other->screenshot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileIOSNtf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void iOSFrameTime::InitAsDefaultInstance() {
}
class iOSFrameTime::_Internal {
 public:
};

iOSFrameTime::iOSFrameTime(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  frametime_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.iOSFrameTime)
}
iOSFrameTime::iOSFrameTime(const iOSFrameTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      frametime_(from.frametime_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:perfcat.iOSFrameTime)
}

void iOSFrameTime::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_iOSFrameTime_perfcat_2eproto.base);
}

iOSFrameTime::~iOSFrameTime() {
  // @@protoc_insertion_point(destructor:perfcat.iOSFrameTime)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void iOSFrameTime::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void iOSFrameTime::ArenaDtor(void* object) {
  iOSFrameTime* _this = reinterpret_cast< iOSFrameTime* >(object);
  (void)_this;
}
void iOSFrameTime::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void iOSFrameTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const iOSFrameTime& iOSFrameTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_iOSFrameTime_perfcat_2eproto.base);
  return *internal_default_instance();
}


void iOSFrameTime::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.iOSFrameTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frametime_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* iOSFrameTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .perfcat.iOSFrameRecord frameTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frametime(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* iOSFrameTime::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.iOSFrameTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .perfcat.iOSFrameRecord frameTime = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_frametime_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_frametime(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.iOSFrameTime)
  return target;
}

size_t iOSFrameTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.iOSFrameTime)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .perfcat.iOSFrameRecord frameTime = 1;
  total_size += 1UL * this->_internal_frametime_size();
  for (const auto& msg : this->frametime_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void iOSFrameTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.iOSFrameTime)
  GOOGLE_DCHECK_NE(&from, this);
  const iOSFrameTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<iOSFrameTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.iOSFrameTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.iOSFrameTime)
    MergeFrom(*source);
  }
}

void iOSFrameTime::MergeFrom(const iOSFrameTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.iOSFrameTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frametime_.MergeFrom(from.frametime_);
}

void iOSFrameTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.iOSFrameTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void iOSFrameTime::CopyFrom(const iOSFrameTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.iOSFrameTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool iOSFrameTime::IsInitialized() const {
  return true;
}

void iOSFrameTime::InternalSwap(iOSFrameTime* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  frametime_.InternalSwap(&other->frametime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata iOSFrameTime::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void iOSFrameRecord::InitAsDefaultInstance() {
}
class iOSFrameRecord::_Internal {
 public:
};

iOSFrameRecord::iOSFrameRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.iOSFrameRecord)
}
iOSFrameRecord::iOSFrameRecord(const iOSFrameRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&frametime_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(frametime_));
  // @@protoc_insertion_point(copy_constructor:perfcat.iOSFrameRecord)
}

void iOSFrameRecord::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frametime_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(frametime_));
}

iOSFrameRecord::~iOSFrameRecord() {
  // @@protoc_insertion_point(destructor:perfcat.iOSFrameRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void iOSFrameRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void iOSFrameRecord::ArenaDtor(void* object) {
  iOSFrameRecord* _this = reinterpret_cast< iOSFrameRecord* >(object);
  (void)_this;
}
void iOSFrameRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void iOSFrameRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const iOSFrameRecord& iOSFrameRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_iOSFrameRecord_perfcat_2eproto.base);
  return *internal_default_instance();
}


void iOSFrameRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.iOSFrameRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frametime_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(frametime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* iOSFrameRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float frameTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          frametime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* iOSFrameRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.iOSFrameRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // float frameTime = 2;
  if (!(this->frametime() <= 0 && this->frametime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_frametime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.iOSFrameRecord)
  return target;
}

size_t iOSFrameRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.iOSFrameRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // float frameTime = 2;
  if (!(this->frametime() <= 0 && this->frametime() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void iOSFrameRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.iOSFrameRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const iOSFrameRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<iOSFrameRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.iOSFrameRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.iOSFrameRecord)
    MergeFrom(*source);
  }
}

void iOSFrameRecord::MergeFrom(const iOSFrameRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.iOSFrameRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (!(from.frametime() <= 0 && from.frametime() >= 0)) {
    _internal_set_frametime(from._internal_frametime());
  }
}

void iOSFrameRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.iOSFrameRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void iOSFrameRecord::CopyFrom(const iOSFrameRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.iOSFrameRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool iOSFrameRecord::IsInitialized() const {
  return true;
}

void iOSFrameRecord::InternalSwap(iOSFrameRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(iOSFrameRecord, frametime_)
      + sizeof(iOSFrameRecord::frametime_)
      - PROTOBUF_FIELD_OFFSET(iOSFrameRecord, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata iOSFrameRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void iOSMemory::InitAsDefaultInstance() {
}
class iOSMemory::_Internal {
 public:
};

iOSMemory::iOSMemory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.iOSMemory)
}
iOSMemory::iOSMemory(const iOSMemory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&memory_, &from.memory_,
    static_cast<size_t>(reinterpret_cast<char*>(&xcodememory_) -
    reinterpret_cast<char*>(&memory_)) + sizeof(xcodememory_));
  // @@protoc_insertion_point(copy_constructor:perfcat.iOSMemory)
}

void iOSMemory::SharedCtor() {
  ::memset(&memory_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&xcodememory_) -
      reinterpret_cast<char*>(&memory_)) + sizeof(xcodememory_));
}

iOSMemory::~iOSMemory() {
  // @@protoc_insertion_point(destructor:perfcat.iOSMemory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void iOSMemory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void iOSMemory::ArenaDtor(void* object) {
  iOSMemory* _this = reinterpret_cast< iOSMemory* >(object);
  (void)_this;
}
void iOSMemory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void iOSMemory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const iOSMemory& iOSMemory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_iOSMemory_perfcat_2eproto.base);
  return *internal_default_instance();
}


void iOSMemory::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.iOSMemory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&memory_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&xcodememory_) -
      reinterpret_cast<char*>(&memory_)) + sizeof(xcodememory_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* iOSMemory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 memory = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          memory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 virtualMemory = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          virtualmemory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 realMemory = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          realmemory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 xcodeMemory = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          xcodememory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* iOSMemory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.iOSMemory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 memory = 1;
  if (this->memory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_memory(), target);
  }

  // int32 virtualMemory = 2;
  if (this->virtualmemory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_virtualmemory(), target);
  }

  // int32 realMemory = 3;
  if (this->realmemory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_realmemory(), target);
  }

  // int32 xcodeMemory = 4;
  if (this->xcodememory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_xcodememory(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.iOSMemory)
  return target;
}

size_t iOSMemory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.iOSMemory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 memory = 1;
  if (this->memory() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_memory());
  }

  // int32 virtualMemory = 2;
  if (this->virtualmemory() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_virtualmemory());
  }

  // int32 realMemory = 3;
  if (this->realmemory() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_realmemory());
  }

  // int32 xcodeMemory = 4;
  if (this->xcodememory() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_xcodememory());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void iOSMemory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.iOSMemory)
  GOOGLE_DCHECK_NE(&from, this);
  const iOSMemory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<iOSMemory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.iOSMemory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.iOSMemory)
    MergeFrom(*source);
  }
}

void iOSMemory::MergeFrom(const iOSMemory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.iOSMemory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.memory() != 0) {
    _internal_set_memory(from._internal_memory());
  }
  if (from.virtualmemory() != 0) {
    _internal_set_virtualmemory(from._internal_virtualmemory());
  }
  if (from.realmemory() != 0) {
    _internal_set_realmemory(from._internal_realmemory());
  }
  if (from.xcodememory() != 0) {
    _internal_set_xcodememory(from._internal_xcodememory());
  }
}

void iOSMemory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.iOSMemory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void iOSMemory::CopyFrom(const iOSMemory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.iOSMemory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool iOSMemory::IsInitialized() const {
  return true;
}

void iOSMemory::InternalSwap(iOSMemory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(iOSMemory, xcodememory_)
      + sizeof(iOSMemory::xcodememory_)
      - PROTOBUF_FIELD_OFFSET(iOSMemory, memory_)>(
          reinterpret_cast<char*>(&memory_),
          reinterpret_cast<char*>(&other->memory_));
}

::PROTOBUF_NAMESPACE_ID::Metadata iOSMemory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void iOSGpuUsage::InitAsDefaultInstance() {
}
class iOSGpuUsage::_Internal {
 public:
};

iOSGpuUsage::iOSGpuUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.iOSGpuUsage)
}
iOSGpuUsage::iOSGpuUsage(const iOSGpuUsage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gpurender_, &from.gpurender_,
    static_cast<size_t>(reinterpret_cast<char*>(&gpudevice_) -
    reinterpret_cast<char*>(&gpurender_)) + sizeof(gpudevice_));
  // @@protoc_insertion_point(copy_constructor:perfcat.iOSGpuUsage)
}

void iOSGpuUsage::SharedCtor() {
  ::memset(&gpurender_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gpudevice_) -
      reinterpret_cast<char*>(&gpurender_)) + sizeof(gpudevice_));
}

iOSGpuUsage::~iOSGpuUsage() {
  // @@protoc_insertion_point(destructor:perfcat.iOSGpuUsage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void iOSGpuUsage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void iOSGpuUsage::ArenaDtor(void* object) {
  iOSGpuUsage* _this = reinterpret_cast< iOSGpuUsage* >(object);
  (void)_this;
}
void iOSGpuUsage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void iOSGpuUsage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const iOSGpuUsage& iOSGpuUsage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_iOSGpuUsage_perfcat_2eproto.base);
  return *internal_default_instance();
}


void iOSGpuUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.iOSGpuUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gpurender_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gpudevice_) -
      reinterpret_cast<char*>(&gpurender_)) + sizeof(gpudevice_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* iOSGpuUsage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float gpuRender = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          gpurender_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gpuTiler = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          gputiler_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gpuDevice = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          gpudevice_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* iOSGpuUsage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.iOSGpuUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float gpuRender = 1;
  if (!(this->gpurender() <= 0 && this->gpurender() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_gpurender(), target);
  }

  // float gpuTiler = 2;
  if (!(this->gputiler() <= 0 && this->gputiler() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_gputiler(), target);
  }

  // float gpuDevice = 3;
  if (!(this->gpudevice() <= 0 && this->gpudevice() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_gpudevice(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.iOSGpuUsage)
  return target;
}

size_t iOSGpuUsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.iOSGpuUsage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float gpuRender = 1;
  if (!(this->gpurender() <= 0 && this->gpurender() >= 0)) {
    total_size += 1 + 4;
  }

  // float gpuTiler = 2;
  if (!(this->gputiler() <= 0 && this->gputiler() >= 0)) {
    total_size += 1 + 4;
  }

  // float gpuDevice = 3;
  if (!(this->gpudevice() <= 0 && this->gpudevice() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void iOSGpuUsage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.iOSGpuUsage)
  GOOGLE_DCHECK_NE(&from, this);
  const iOSGpuUsage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<iOSGpuUsage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.iOSGpuUsage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.iOSGpuUsage)
    MergeFrom(*source);
  }
}

void iOSGpuUsage::MergeFrom(const iOSGpuUsage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.iOSGpuUsage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.gpurender() <= 0 && from.gpurender() >= 0)) {
    _internal_set_gpurender(from._internal_gpurender());
  }
  if (!(from.gputiler() <= 0 && from.gputiler() >= 0)) {
    _internal_set_gputiler(from._internal_gputiler());
  }
  if (!(from.gpudevice() <= 0 && from.gpudevice() >= 0)) {
    _internal_set_gpudevice(from._internal_gpudevice());
  }
}

void iOSGpuUsage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.iOSGpuUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void iOSGpuUsage::CopyFrom(const iOSGpuUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.iOSGpuUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool iOSGpuUsage::IsInitialized() const {
  return true;
}

void iOSGpuUsage::InternalSwap(iOSGpuUsage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(iOSGpuUsage, gpudevice_)
      + sizeof(iOSGpuUsage::gpudevice_)
      - PROTOBUF_FIELD_OFFSET(iOSGpuUsage, gpurender_)>(
          reinterpret_cast<char*>(&gpurender_),
          reinterpret_cast<char*>(&other->gpurender_));
}

::PROTOBUF_NAMESPACE_ID::Metadata iOSGpuUsage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void iOSContextSwitch::InitAsDefaultInstance() {
}
class iOSContextSwitch::_Internal {
 public:
};

iOSContextSwitch::iOSContextSwitch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.iOSContextSwitch)
}
iOSContextSwitch::iOSContextSwitch(const iOSContextSwitch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contextswitch_ = from.contextswitch_;
  // @@protoc_insertion_point(copy_constructor:perfcat.iOSContextSwitch)
}

void iOSContextSwitch::SharedCtor() {
  contextswitch_ = 0;
}

iOSContextSwitch::~iOSContextSwitch() {
  // @@protoc_insertion_point(destructor:perfcat.iOSContextSwitch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void iOSContextSwitch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void iOSContextSwitch::ArenaDtor(void* object) {
  iOSContextSwitch* _this = reinterpret_cast< iOSContextSwitch* >(object);
  (void)_this;
}
void iOSContextSwitch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void iOSContextSwitch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const iOSContextSwitch& iOSContextSwitch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_iOSContextSwitch_perfcat_2eproto.base);
  return *internal_default_instance();
}


void iOSContextSwitch::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.iOSContextSwitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contextswitch_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* iOSContextSwitch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 contextSwitch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          contextswitch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* iOSContextSwitch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.iOSContextSwitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 contextSwitch = 1;
  if (this->contextswitch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_contextswitch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.iOSContextSwitch)
  return target;
}

size_t iOSContextSwitch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.iOSContextSwitch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 contextSwitch = 1;
  if (this->contextswitch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_contextswitch());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void iOSContextSwitch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.iOSContextSwitch)
  GOOGLE_DCHECK_NE(&from, this);
  const iOSContextSwitch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<iOSContextSwitch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.iOSContextSwitch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.iOSContextSwitch)
    MergeFrom(*source);
  }
}

void iOSContextSwitch::MergeFrom(const iOSContextSwitch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.iOSContextSwitch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.contextswitch() != 0) {
    _internal_set_contextswitch(from._internal_contextswitch());
  }
}

void iOSContextSwitch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.iOSContextSwitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void iOSContextSwitch::CopyFrom(const iOSContextSwitch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.iOSContextSwitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool iOSContextSwitch::IsInitialized() const {
  return true;
}

void iOSContextSwitch::InternalSwap(iOSContextSwitch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(contextswitch_, other->contextswitch_);
}

::PROTOBUF_NAMESPACE_ID::Metadata iOSContextSwitch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void iOSWakeups::InitAsDefaultInstance() {
}
class iOSWakeups::_Internal {
 public:
};

iOSWakeups::iOSWakeups(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.iOSWakeups)
}
iOSWakeups::iOSWakeups(const iOSWakeups& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  wakeups_ = from.wakeups_;
  // @@protoc_insertion_point(copy_constructor:perfcat.iOSWakeups)
}

void iOSWakeups::SharedCtor() {
  wakeups_ = 0;
}

iOSWakeups::~iOSWakeups() {
  // @@protoc_insertion_point(destructor:perfcat.iOSWakeups)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void iOSWakeups::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void iOSWakeups::ArenaDtor(void* object) {
  iOSWakeups* _this = reinterpret_cast< iOSWakeups* >(object);
  (void)_this;
}
void iOSWakeups::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void iOSWakeups::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const iOSWakeups& iOSWakeups::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_iOSWakeups_perfcat_2eproto.base);
  return *internal_default_instance();
}


void iOSWakeups::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.iOSWakeups)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wakeups_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* iOSWakeups::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 wakeups = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          wakeups_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* iOSWakeups::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.iOSWakeups)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 wakeups = 1;
  if (this->wakeups() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_wakeups(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.iOSWakeups)
  return target;
}

size_t iOSWakeups::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.iOSWakeups)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 wakeups = 1;
  if (this->wakeups() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wakeups());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void iOSWakeups::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.iOSWakeups)
  GOOGLE_DCHECK_NE(&from, this);
  const iOSWakeups* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<iOSWakeups>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.iOSWakeups)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.iOSWakeups)
    MergeFrom(*source);
  }
}

void iOSWakeups::MergeFrom(const iOSWakeups& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.iOSWakeups)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.wakeups() != 0) {
    _internal_set_wakeups(from._internal_wakeups());
  }
}

void iOSWakeups::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.iOSWakeups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void iOSWakeups::CopyFrom(const iOSWakeups& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.iOSWakeups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool iOSWakeups::IsInitialized() const {
  return true;
}

void iOSWakeups::InternalSwap(iOSWakeups* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(wakeups_, other->wakeups_);
}

::PROTOBUF_NAMESPACE_ID::Metadata iOSWakeups::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void iOSEnergyUsage::InitAsDefaultInstance() {
}
class iOSEnergyUsage::_Internal {
 public:
};

iOSEnergyUsage::iOSEnergyUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:perfcat.iOSEnergyUsage)
}
iOSEnergyUsage::iOSEnergyUsage(const iOSEnergyUsage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cpuenergy_, &from.cpuenergy_,
    static_cast<size_t>(reinterpret_cast<char*>(&overheadenergy_) -
    reinterpret_cast<char*>(&cpuenergy_)) + sizeof(overheadenergy_));
  // @@protoc_insertion_point(copy_constructor:perfcat.iOSEnergyUsage)
}

void iOSEnergyUsage::SharedCtor() {
  ::memset(&cpuenergy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overheadenergy_) -
      reinterpret_cast<char*>(&cpuenergy_)) + sizeof(overheadenergy_));
}

iOSEnergyUsage::~iOSEnergyUsage() {
  // @@protoc_insertion_point(destructor:perfcat.iOSEnergyUsage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void iOSEnergyUsage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void iOSEnergyUsage::ArenaDtor(void* object) {
  iOSEnergyUsage* _this = reinterpret_cast< iOSEnergyUsage* >(object);
  (void)_this;
}
void iOSEnergyUsage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void iOSEnergyUsage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const iOSEnergyUsage& iOSEnergyUsage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_iOSEnergyUsage_perfcat_2eproto.base);
  return *internal_default_instance();
}


void iOSEnergyUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:perfcat.iOSEnergyUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cpuenergy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overheadenergy_) -
      reinterpret_cast<char*>(&cpuenergy_)) + sizeof(overheadenergy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* iOSEnergyUsage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 cpuEnergy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cpuenergy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gpuEnergy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gpuenergy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 networkEnergy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          networkenergy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 locationEnergy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          locationenergy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 displayEnergy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          displayenergy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 overheadEnergy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          overheadenergy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* iOSEnergyUsage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:perfcat.iOSEnergyUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cpuEnergy = 1;
  if (this->cpuenergy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cpuenergy(), target);
  }

  // int32 gpuEnergy = 2;
  if (this->gpuenergy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_gpuenergy(), target);
  }

  // int32 networkEnergy = 3;
  if (this->networkenergy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_networkenergy(), target);
  }

  // int32 locationEnergy = 4;
  if (this->locationenergy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_locationenergy(), target);
  }

  // int32 displayEnergy = 5;
  if (this->displayenergy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_displayenergy(), target);
  }

  // int32 overheadEnergy = 6;
  if (this->overheadenergy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_overheadenergy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perfcat.iOSEnergyUsage)
  return target;
}

size_t iOSEnergyUsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:perfcat.iOSEnergyUsage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 cpuEnergy = 1;
  if (this->cpuenergy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cpuenergy());
  }

  // int32 gpuEnergy = 2;
  if (this->gpuenergy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gpuenergy());
  }

  // int32 networkEnergy = 3;
  if (this->networkenergy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_networkenergy());
  }

  // int32 locationEnergy = 4;
  if (this->locationenergy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_locationenergy());
  }

  // int32 displayEnergy = 5;
  if (this->displayenergy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_displayenergy());
  }

  // int32 overheadEnergy = 6;
  if (this->overheadenergy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_overheadenergy());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void iOSEnergyUsage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perfcat.iOSEnergyUsage)
  GOOGLE_DCHECK_NE(&from, this);
  const iOSEnergyUsage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<iOSEnergyUsage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perfcat.iOSEnergyUsage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perfcat.iOSEnergyUsage)
    MergeFrom(*source);
  }
}

void iOSEnergyUsage::MergeFrom(const iOSEnergyUsage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perfcat.iOSEnergyUsage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cpuenergy() != 0) {
    _internal_set_cpuenergy(from._internal_cpuenergy());
  }
  if (from.gpuenergy() != 0) {
    _internal_set_gpuenergy(from._internal_gpuenergy());
  }
  if (from.networkenergy() != 0) {
    _internal_set_networkenergy(from._internal_networkenergy());
  }
  if (from.locationenergy() != 0) {
    _internal_set_locationenergy(from._internal_locationenergy());
  }
  if (from.displayenergy() != 0) {
    _internal_set_displayenergy(from._internal_displayenergy());
  }
  if (from.overheadenergy() != 0) {
    _internal_set_overheadenergy(from._internal_overheadenergy());
  }
}

void iOSEnergyUsage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perfcat.iOSEnergyUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void iOSEnergyUsage::CopyFrom(const iOSEnergyUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perfcat.iOSEnergyUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool iOSEnergyUsage::IsInitialized() const {
  return true;
}

void iOSEnergyUsage::InternalSwap(iOSEnergyUsage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(iOSEnergyUsage, overheadenergy_)
      + sizeof(iOSEnergyUsage::overheadenergy_)
      - PROTOBUF_FIELD_OFFSET(iOSEnergyUsage, cpuenergy_)>(
          reinterpret_cast<char*>(&cpuenergy_),
          reinterpret_cast<char*>(&other->cpuenergy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata iOSEnergyUsage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace perfcat
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::perfcat::PerfcatAppProtocol* Arena::CreateMaybeMessage< ::perfcat::PerfcatAppProtocol >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::PerfcatAppProtocol >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::PerfcatServerProtocol* Arena::CreateMaybeMessage< ::perfcat::PerfcatServerProtocol >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::PerfcatServerProtocol >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::ProfileReq* Arena::CreateMaybeMessage< ::perfcat::ProfileReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::ProfileReq >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::ProfileApp* Arena::CreateMaybeMessage< ::perfcat::ProfileApp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::ProfileApp >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::ProfileAppPidName* Arena::CreateMaybeMessage< ::perfcat::ProfileAppPidName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::ProfileAppPidName >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::ProfileAppInfo* Arena::CreateMaybeMessage< ::perfcat::ProfileAppInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::ProfileAppInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::ProfileRsp* Arena::CreateMaybeMessage< ::perfcat::ProfileRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::ProfileRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::GetMemoryUsageReq* Arena::CreateMaybeMessage< ::perfcat::GetMemoryUsageReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::GetMemoryUsageReq >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::GetMemoryUsageRsp* Arena::CreateMaybeMessage< ::perfcat::GetMemoryUsageRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::GetMemoryUsageRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::StopProfileReq* Arena::CreateMaybeMessage< ::perfcat::StopProfileReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::StopProfileReq >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::StopProfileRsp* Arena::CreateMaybeMessage< ::perfcat::StopProfileRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::StopProfileRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::CheckDeviceReq* Arena::CreateMaybeMessage< ::perfcat::CheckDeviceReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::CheckDeviceReq >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::CheckDeviceRsp* Arena::CreateMaybeMessage< ::perfcat::CheckDeviceRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::CheckDeviceRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::ProfileNtf* Arena::CreateMaybeMessage< ::perfcat::ProfileNtf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::ProfileNtf >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::Screenshot* Arena::CreateMaybeMessage< ::perfcat::Screenshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::Screenshot >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::VirtualMemory* Arena::CreateMaybeMessage< ::perfcat::VirtualMemory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::VirtualMemory >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::Power* Arena::CreateMaybeMessage< ::perfcat::Power >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::Power >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::Temp* Arena::CreateMaybeMessage< ::perfcat::Temp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::Temp >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::CpuUsage* Arena::CreateMaybeMessage< ::perfcat::CpuUsage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::CpuUsage >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::FPS* Arena::CreateMaybeMessage< ::perfcat::FPS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::FPS >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::CoreUsage* Arena::CreateMaybeMessage< ::perfcat::CoreUsage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::CoreUsage >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::FrameTime* Arena::CreateMaybeMessage< ::perfcat::FrameTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::FrameTime >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::Network* Arena::CreateMaybeMessage< ::perfcat::Network >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::Network >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::Memory* Arena::CreateMaybeMessage< ::perfcat::Memory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::Memory >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::MemoryDetail* Arena::CreateMaybeMessage< ::perfcat::MemoryDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::MemoryDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::GpuFreq* Arena::CreateMaybeMessage< ::perfcat::GpuFreq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::GpuFreq >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::GpuUsage* Arena::CreateMaybeMessage< ::perfcat::GpuUsage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::GpuUsage >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::CpuFreq* Arena::CreateMaybeMessage< ::perfcat::CpuFreq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::CpuFreq >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::GetCpuMaxFreqReq* Arena::CreateMaybeMessage< ::perfcat::GetCpuMaxFreqReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::GetCpuMaxFreqReq >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::GetCpuMaxFreqRsp* Arena::CreateMaybeMessage< ::perfcat::GetCpuMaxFreqRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::GetCpuMaxFreqRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::ToggleInterestingFiledNTF* Arena::CreateMaybeMessage< ::perfcat::ToggleInterestingFiledNTF >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::ToggleInterestingFiledNTF >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::ProfileStartedNTF* Arena::CreateMaybeMessage< ::perfcat::ProfileStartedNTF >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::ProfileStartedNTF >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::ProfileStoppedNTF* Arena::CreateMaybeMessage< ::perfcat::ProfileStoppedNTF >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::ProfileStoppedNTF >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::ProcessNotFoundNTF* Arena::CreateMaybeMessage< ::perfcat::ProcessNotFoundNTF >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::ProcessNotFoundNTF >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::ProcessFoundNTF* Arena::CreateMaybeMessage< ::perfcat::ProcessFoundNTF >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::ProcessFoundNTF >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::GetBatteryInfoReq* Arena::CreateMaybeMessage< ::perfcat::GetBatteryInfoReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::GetBatteryInfoReq >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::GetBatteryInfoRsp* Arena::CreateMaybeMessage< ::perfcat::GetBatteryInfoRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::GetBatteryInfoRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::AppClosedNTF* Arena::CreateMaybeMessage< ::perfcat::AppClosedNTF >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::AppClosedNTF >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::ProfileNTFACK* Arena::CreateMaybeMessage< ::perfcat::ProfileNTFACK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::ProfileNTFACK >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::PrepareWifiProfileNTF* Arena::CreateMaybeMessage< ::perfcat::PrepareWifiProfileNTF >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::PrepareWifiProfileNTF >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::GetAppInfoReq* Arena::CreateMaybeMessage< ::perfcat::GetAppInfoReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::GetAppInfoReq >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::GetAppInfoRsp* Arena::CreateMaybeMessage< ::perfcat::GetAppInfoRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::GetAppInfoRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::AppInfo* Arena::CreateMaybeMessage< ::perfcat::AppInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::AppInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::EmptyRsp* Arena::CreateMaybeMessage< ::perfcat::EmptyRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::EmptyRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::HelloReq* Arena::CreateMaybeMessage< ::perfcat::HelloReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::HelloReq >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::ExecuteShellCommandReq* Arena::CreateMaybeMessage< ::perfcat::ExecuteShellCommandReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::ExecuteShellCommandReq >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::ExecuteShellCommandRsp* Arena::CreateMaybeMessage< ::perfcat::ExecuteShellCommandRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::ExecuteShellCommandRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::RegisterAppReq* Arena::CreateMaybeMessage< ::perfcat::RegisterAppReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::RegisterAppReq >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::ResumeProfileReq* Arena::CreateMaybeMessage< ::perfcat::ResumeProfileReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::ResumeProfileReq >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::ResumeProfileRsp* Arena::CreateMaybeMessage< ::perfcat::ResumeProfileRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::ResumeProfileRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::GetDataFromAppReq* Arena::CreateMaybeMessage< ::perfcat::GetDataFromAppReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::GetDataFromAppReq >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::GetDataFromAppRsp* Arena::CreateMaybeMessage< ::perfcat::GetDataFromAppRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::GetDataFromAppRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::SetScreenshotIntervalReq* Arena::CreateMaybeMessage< ::perfcat::SetScreenshotIntervalReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::SetScreenshotIntervalReq >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::EnableFloatingWindowReq* Arena::CreateMaybeMessage< ::perfcat::EnableFloatingWindowReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::EnableFloatingWindowReq >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::GetScreenInfoReq* Arena::CreateMaybeMessage< ::perfcat::GetScreenInfoReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::GetScreenInfoReq >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::GetScreenInfoRsp* Arena::CreateMaybeMessage< ::perfcat::GetScreenInfoRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::GetScreenInfoRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::GetLMKThresholdReq* Arena::CreateMaybeMessage< ::perfcat::GetLMKThresholdReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::GetLMKThresholdReq >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::GetLMKThresholdRsp* Arena::CreateMaybeMessage< ::perfcat::GetLMKThresholdRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::GetLMKThresholdRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::CheckOverlayPermissionReq* Arena::CreateMaybeMessage< ::perfcat::CheckOverlayPermissionReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::CheckOverlayPermissionReq >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::CheckOverlayPermissionRsp* Arena::CreateMaybeMessage< ::perfcat::CheckOverlayPermissionRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::CheckOverlayPermissionRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::AppHelloReq* Arena::CreateMaybeMessage< ::perfcat::AppHelloReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::AppHelloReq >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::AppHelloRsp* Arena::CreateMaybeMessage< ::perfcat::AppHelloRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::AppHelloRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::ProfileIOSNtf* Arena::CreateMaybeMessage< ::perfcat::ProfileIOSNtf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::ProfileIOSNtf >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::iOSFrameTime* Arena::CreateMaybeMessage< ::perfcat::iOSFrameTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::iOSFrameTime >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::iOSFrameRecord* Arena::CreateMaybeMessage< ::perfcat::iOSFrameRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::iOSFrameRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::iOSMemory* Arena::CreateMaybeMessage< ::perfcat::iOSMemory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::iOSMemory >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::iOSGpuUsage* Arena::CreateMaybeMessage< ::perfcat::iOSGpuUsage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::iOSGpuUsage >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::iOSContextSwitch* Arena::CreateMaybeMessage< ::perfcat::iOSContextSwitch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::iOSContextSwitch >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::iOSWakeups* Arena::CreateMaybeMessage< ::perfcat::iOSWakeups >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::iOSWakeups >(arena);
}
template<> PROTOBUF_NOINLINE ::perfcat::iOSEnergyUsage* Arena::CreateMaybeMessage< ::perfcat::iOSEnergyUsage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::perfcat::iOSEnergyUsage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
